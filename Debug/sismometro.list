
sismometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08011118  08011118  00012118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011658  08011658  00013208  2**0
                  CONTENTS
  4 .ARM          00000008  08011658  08011658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011660  08011660  00013208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011660  08011660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011664  08011664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011668  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce8  20000208  08011870  00013208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  08011870  00013ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be71  00000000  00000000  00013238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf1  00000000  00000000  0002f0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00033da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010eb  00000000  00000000  000353e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb64  00000000  00000000  000364d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c66  00000000  00000000  00053037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009463b  00000000  00000000  00074c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001092d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df8  00000000  00000000  0010931c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00110114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011100 	.word	0x08011100

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08011100 	.word	0x08011100

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <COMPASSACCELERO_IO_Init>:
  	   }
     }
    return(valormax);
}
void COMPASSACCELERO_IO_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <COMPASSACCELERO_IO_Write>:
void COMPASSACCELERO_IO_ITConfig(void)
{
}

void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
 8000f62:	460b      	mov	r3, r1
 8000f64:	717b      	strb	r3, [r7, #5]
 8000f66:	4613      	mov	r3, r2
 8000f68:	713b      	strb	r3, [r7, #4]
	uint8_t buffer[2] = {RegisterAddr, Value};
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	733b      	strb	r3, [r7, #12]
 8000f6e:	793b      	ldrb	r3, [r7, #4]
 8000f70:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(&hi2c1, DeviceAddr, buffer, 2, 100);
 8000f72:	f107 020c 	add.w	r2, r7, #12
 8000f76:	88f9      	ldrh	r1, [r7, #6]
 8000f78:	2364      	movs	r3, #100	@ 0x64
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <COMPASSACCELERO_IO_Write+0x38>)
 8000f80:	f003 fd62 	bl	8004a48 <HAL_I2C_Master_Transmit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73fb      	strb	r3, [r7, #15]
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000224 	.word	0x20000224

08000f94 <COMPASSACCELERO_IO_Read>:

uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	80fb      	strh	r3, [r7, #6]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(&hi2c1, DeviceAddr, &RegisterAddr, 1, 100);
 8000fa4:	1d7a      	adds	r2, r7, #5
 8000fa6:	88f9      	ldrh	r1, [r7, #6]
 8000fa8:	2364      	movs	r3, #100	@ 0x64
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <COMPASSACCELERO_IO_Read+0x4c>)
 8000fb0:	f003 fd4a 	bl	8004a48 <HAL_I2C_Master_Transmit>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
	uint8_t value;
	res = HAL_I2C_Master_Receive(&hi2c1, DeviceAddr | 0x01, &value, 1, 100);
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	f107 020e 	add.w	r2, r7, #14
 8000fc4:	2364      	movs	r3, #100	@ 0x64
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <COMPASSACCELERO_IO_Read+0x4c>)
 8000fcc:	f003 fe3a 	bl	8004c44 <HAL_I2C_Master_Receive>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
	return value;
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000224 	.word	0x20000224

08000fe4 <onHostUserClassActiveCallback>:


void onHostUserClassActiveCallback(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  f_mount(&fs, "", 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4906      	ldr	r1, [pc, #24]	@ (8001004 <onHostUserClassActiveCallback+0x20>)
 8000fec:	4806      	ldr	r0, [pc, #24]	@ (8001008 <onHostUserClassActiveCallback+0x24>)
 8000fee:	f00b fee9 	bl	800cdc4 <f_mount>
  HAL_GPIO_WritePin(port_test, led_test, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <onHostUserClassActiveCallback+0x28>)
 8000ffa:	f001 fa93 	bl	8002524 <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	08011118 	.word	0x08011118
 8001008:	20000360 	.word	0x20000360
 800100c:	40020c00 	.word	0x40020c00

08001010 <onHostUserDisconnectionCallback>:
void onHostUserDisconnectionCallback(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  f_mount(NULL, "", 0);
 8001014:	2200      	movs	r2, #0
 8001016:	4906      	ldr	r1, [pc, #24]	@ (8001030 <onHostUserDisconnectionCallback+0x20>)
 8001018:	2000      	movs	r0, #0
 800101a:	f00b fed3 	bl	800cdc4 <f_mount>
  HAL_GPIO_WritePin(port_test, led_test, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <onHostUserDisconnectionCallback+0x24>)
 8001026:	f001 fa7d 	bl	8002524 <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08011118 	.word	0x08011118
 8001034:	40020c00 	.word	0x40020c00

08001038 <saveSismicData>:

void saveSismicData()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800103e:	af02      	add	r7, sp, #8
    FIL archivo;
    FRESULT resultado;

    // Abre o crea un archivo en modo escritura y lo posiciona al final
    resultado = f_open(&archivo, "archivo.txt", FA_WRITE | FA_OPEN_ALWAYS);
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	2212      	movs	r2, #18
 8001046:	4947      	ldr	r1, [pc, #284]	@ (8001164 <saveSismicData+0x12c>)
 8001048:	4618      	mov	r0, r3
 800104a:	f00b ff01 	bl	800ce50 <f_open>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if (resultado != FR_OK) {
 8001054:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <saveSismicData+0x32>
        printf("Error al abrir el archivo: %d\n", resultado);
 800105c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001060:	4619      	mov	r1, r3
 8001062:	4841      	ldr	r0, [pc, #260]	@ (8001168 <saveSismicData+0x130>)
 8001064:	f00d fe48 	bl	800ecf8 <iprintf>
        return;
 8001068:	e078      	b.n	800115c <saveSismicData+0x124>
    }

    // Posicionar al final del archivo
    resultado = f_lseek(&archivo, f_size(&archivo));
 800106a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800106e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f00c fabf 	bl	800d5fe <f_lseek>
 8001080:	4603      	mov	r3, r0
 8001082:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if (resultado != FR_OK) {
 8001086:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <saveSismicData+0x6e>
        printf("Error al posicionar al final del archivo: %d\n", resultado);
 800108e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001092:	4619      	mov	r1, r3
 8001094:	4835      	ldr	r0, [pc, #212]	@ (800116c <saveSismicData+0x134>)
 8001096:	f00d fe2f 	bl	800ecf8 <iprintf>
        f_close(&archivo);
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4618      	mov	r0, r3
 80010a0:	f00c fa83 	bl	800d5aa <f_close>
        return;
 80010a4:	e05a      	b.n	800115c <saveSismicData+0x124>
    }

    // Escribir texto inicial
    const char* texto = "\nSismo de valor: ";
 80010a6:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <saveSismicData+0x138>)
 80010a8:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    UINT bytesEscritos;
    resultado = f_write(&archivo, texto, strlen(texto), &bytesEscritos);
 80010ac:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 80010b0:	f7ff f8e6 	bl	8000280 <strlen>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	f107 0018 	add.w	r0, r7, #24
 80010be:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80010c2:	f00c f87f 	bl	800d1c4 <f_write>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if (resultado != FR_OK) {
 80010cc:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <saveSismicData+0xb4>
        printf("Error al escribir texto: %d\n", resultado);
 80010d4:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80010d8:	4619      	mov	r1, r3
 80010da:	4826      	ldr	r0, [pc, #152]	@ (8001174 <saveSismicData+0x13c>)
 80010dc:	f00d fe0c 	bl	800ecf8 <iprintf>
        f_close(&archivo);
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00c fa60 	bl	800d5aa <f_close>
        return;
 80010ea:	e037      	b.n	800115c <saveSismicData+0x124>
    }

    // Convertir y escribir el valor
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "%.1f", maxAccelerationMagnitude);
 80010ec:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <saveSismicData+0x140>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa31 	bl	8000558 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4638      	mov	r0, r7
 80010fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001100:	4a1e      	ldr	r2, [pc, #120]	@ (800117c <saveSismicData+0x144>)
 8001102:	2114      	movs	r1, #20
 8001104:	f00d fe68 	bl	800edd8 <sniprintf>
    resultado = f_write(&archivo, buffer, strlen(buffer), &bytesEscritos);
 8001108:	463b      	mov	r3, r7
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f8b8 	bl	8000280 <strlen>
 8001110:	4602      	mov	r2, r0
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4639      	mov	r1, r7
 8001118:	f107 0018 	add.w	r0, r7, #24
 800111c:	f00c f852 	bl	800d1c4 <f_write>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if (resultado != FR_OK) {
 8001126:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00b      	beq.n	8001146 <saveSismicData+0x10e>
        printf("Error al escribir valor: %d\n", resultado);
 800112e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001132:	4619      	mov	r1, r3
 8001134:	4812      	ldr	r0, [pc, #72]	@ (8001180 <saveSismicData+0x148>)
 8001136:	f00d fddf 	bl	800ecf8 <iprintf>
        f_close(&archivo);
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	4618      	mov	r0, r3
 8001140:	f00c fa33 	bl	800d5aa <f_close>
        return;
 8001144:	e00a      	b.n	800115c <saveSismicData+0x124>
    }

    // Cerrar el archivo
    if (f_close(&archivo) != FR_OK) {
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	4618      	mov	r0, r3
 800114c:	f00c fa2d 	bl	800d5aa <f_close>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <saveSismicData+0x124>
        printf("Error al cerrar el archivo.\n");
 8001156:	480b      	ldr	r0, [pc, #44]	@ (8001184 <saveSismicData+0x14c>)
 8001158:	f00d fe36 	bl	800edc8 <puts>
    }
}
 800115c:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0801111c 	.word	0x0801111c
 8001168:	08011128 	.word	0x08011128
 800116c:	08011148 	.word	0x08011148
 8001170:	08011178 	.word	0x08011178
 8001174:	0801118c 	.word	0x0801118c
 8001178:	200005a0 	.word	0x200005a0
 800117c:	080111ac 	.word	0x080111ac
 8001180:	080111b4 	.word	0x080111b4
 8001184:	080111d4 	.word	0x080111d4

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fe9d 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f8c9 	bl	8001328 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001196:	f000 f92f 	bl	80013f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 fa0f 	bl	80015bc <MX_GPIO_Init>
  MX_I2C1_Init();
 800119e:	f000 f94b 	bl	8001438 <MX_I2C1_Init>
  MX_I2S2_Init();
 80011a2:	f000 f977 	bl	8001494 <MX_I2S2_Init>
  MX_I2S3_Init();
 80011a6:	f000 f9a3 	bl	80014f0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011aa:	f000 f9d1 	bl	8001550 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80011ae:	f00c fc8b 	bl	800dac8 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 80011b2:	f006 fecd 	bl	8007f50 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  LSM303DLHC_AccInit(
 80011b6:	f248 0057 	movw	r0, #32855	@ 0x8057
 80011ba:	f000 fda0 	bl	8001cfe <LSM303DLHC_AccInit>
  );
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  seismicEventDetected = 0;
 80011be:	4b53      	ldr	r3, [pc, #332]	@ (800130c <main+0x184>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
  maxAccelerationMagnitude = 0;
 80011c4:	4b52      	ldr	r3, [pc, #328]	@ (8001310 <main+0x188>)
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011cc:	f00c fca2 	bl	800db14 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    LSM303DLHC_AccReadXYZ(acc_data);
 80011d0:	4850      	ldr	r0, [pc, #320]	@ (8001314 <main+0x18c>)
 80011d2:	f000 fdb3 	bl	8001d3c <LSM303DLHC_AccReadXYZ>
    accelerationMagnitude = sqrt((float)(acc_data[0] * acc_data[0] + acc_data[1] * acc_data[1] + (acc_data[2] - accelerationgravedad) * (acc_data[2] - accelerationgravedad)));
 80011d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001314 <main+0x18c>)
 80011d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b4d      	ldr	r3, [pc, #308]	@ (8001314 <main+0x18c>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	fb03 f202 	mul.w	r2, r3, r2
 80011e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <main+0x18c>)
 80011ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4b48      	ldr	r3, [pc, #288]	@ (8001314 <main+0x18c>)
 80011f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001204:	4b43      	ldr	r3, [pc, #268]	@ (8001314 <main+0x18c>)
 8001206:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001212:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <main+0x190>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800121c:	4b3d      	ldr	r3, [pc, #244]	@ (8001314 <main+0x18c>)
 800121e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800122a:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <main+0x190>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	ee17 0a90 	vmov	r0, s15
 8001240:	f7ff f98a 	bl	8000558 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f00f fe52 	bl	8010ef4 <sqrt>
 8001250:	ec53 2b10 	vmov	r2, r3, d0
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fcae 	bl	8000bb8 <__aeabi_d2f>
 800125c:	4603      	mov	r3, r0
 800125e:	4a2f      	ldr	r2, [pc, #188]	@ (800131c <main+0x194>)
 8001260:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(SEISMIC_LED_PORT, SEISMIC_LED_PIN, accelerationMagnitude > SEISMIC_THRESHOLD ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001262:	4b2e      	ldr	r3, [pc, #184]	@ (800131c <main+0x194>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001320 <main+0x198>
 800126c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	bfcc      	ite	gt
 8001276:	2301      	movgt	r3, #1
 8001278:	2300      	movle	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001282:	4828      	ldr	r0, [pc, #160]	@ (8001324 <main+0x19c>)
 8001284:	f001 f94e 	bl	8002524 <HAL_GPIO_WritePin>

    int startTime;
    /* Comprueba si la magnitud supera el umbral */
    if (seismicEventDetected)
 8001288:	4b20      	ldr	r3, [pc, #128]	@ (800130c <main+0x184>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d026      	beq.n	80012de <main+0x156>
    {
    	//me quedo con el valor mas grande
    	if (maxAccelerationMagnitude < accelerationMagnitude)
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <main+0x188>)
 8001292:	ed93 7a00 	vldr	s14, [r3]
 8001296:	4b21      	ldr	r3, [pc, #132]	@ (800131c <main+0x194>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	d503      	bpl.n	80012ae <main+0x126>
        	maxAccelerationMagnitude = accelerationMagnitude;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <main+0x194>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <main+0x188>)
 80012ac:	6013      	str	r3, [r2, #0]
    	if (HAL_GetTick() - startTime > 10000)
 80012ae:	f000 fe73 	bl	8001f98 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012bc:	4293      	cmp	r3, r2
 80012be:	d985      	bls.n	80011cc <main+0x44>
    	{
    		seismicEventDetected = 0;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <main+0x184>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
    		//escribo en un fichero los valores de aceleracion maxima detectada
	        saveSismicData(maxAccelerationMagnitude);
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <main+0x188>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f944 	bl	8000558 <__aeabi_f2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	ec43 2b10 	vmov	d0, r2, r3
 80012d8:	f7ff feae 	bl	8001038 <saveSismicData>
 80012dc:	e776      	b.n	80011cc <main+0x44>
    	}
    }
    else if (accelerationMagnitude > SEISMIC_THRESHOLD) {
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <main+0x194>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001320 <main+0x198>
 80012e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	dd0a      	ble.n	8001308 <main+0x180>
	      startTime = HAL_GetTick();
 80012f2:	f000 fe51 	bl	8001f98 <HAL_GetTick>
 80012f6:	4603      	mov	r3, r0
 80012f8:	607b      	str	r3, [r7, #4]
	      seismicEventDetected = 1;
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <main+0x184>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
      	  maxAccelerationMagnitude = accelerationMagnitude;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <main+0x194>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a02      	ldr	r2, [pc, #8]	@ (8001310 <main+0x188>)
 8001306:	6013      	str	r3, [r2, #0]
  {
 8001308:	e760      	b.n	80011cc <main+0x44>
 800130a:	bf00      	nop
 800130c:	20000590 	.word	0x20000590
 8001310:	200005a0 	.word	0x200005a0
 8001314:	20000594 	.word	0x20000594
 8001318:	20000000 	.word	0x20000000
 800131c:	2000059c 	.word	0x2000059c
 8001320:	451c4000 	.word	0x451c4000
 8001324:	40020c00 	.word	0x40020c00

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	@ 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	2230      	movs	r2, #48	@ 0x30
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00d fe5a 	bl	800eff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <SystemClock_Config+0xc8>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	4a26      	ldr	r2, [pc, #152]	@ (80013f0 <SystemClock_Config+0xc8>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135a:	6413      	str	r3, [r2, #64]	@ 0x40
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <SystemClock_Config+0xc8>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <SystemClock_Config+0xcc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a20      	ldr	r2, [pc, #128]	@ (80013f4 <SystemClock_Config+0xcc>)
 8001372:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <SystemClock_Config+0xcc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001392:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001398:	2304      	movs	r3, #4
 800139a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800139c:	23c0      	movs	r3, #192	@ 0xc0
 800139e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 fea1 	bl	80060f4 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013b8:	f000 f9da 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013bc:	230f      	movs	r3, #15
 80013be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c0:	2302      	movs	r3, #2
 80013c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2103      	movs	r1, #3
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 f903 	bl	80065e4 <HAL_RCC_ClockConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013e4:	f000 f9c4 	bl	8001770 <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3750      	adds	r7, #80	@ 0x50
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40007000 	.word	0x40007000

080013f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800140e:	2301      	movs	r3, #1
 8001410:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001412:	23c8      	movs	r3, #200	@ 0xc8
 8001414:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001416:	2305      	movs	r3, #5
 8001418:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4618      	mov	r0, r3
 8001422:	f005 faeb 	bl	80069fc <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800142c:	f000 f9a0 	bl	8001770 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_I2C1_Init+0x50>)
 800143e:	4a13      	ldr	r2, [pc, #76]	@ (800148c <MX_I2C1_Init+0x54>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001444:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_I2C1_Init+0x58>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001456:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800145a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001476:	f003 f9a3 	bl	80047c0 <HAL_I2C_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001480:	f000 f976 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000224 	.word	0x20000224
 800148c:	40005400 	.word	0x40005400
 8001490:	000186a0 	.word	0x000186a0

08001494 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_I2S2_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <MX_I2S2_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014ba:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <MX_I2S2_Init+0x58>)
 80014bc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_I2S2_Init+0x50>)
 80014d2:	f004 f96f 	bl	80057b4 <HAL_I2S_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 f948 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000278 	.word	0x20000278
 80014e8:	40003800 	.word	0x40003800
 80014ec:	00017700 	.word	0x00017700

080014f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <MX_I2S3_Init+0x54>)
 80014f6:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <MX_I2S3_Init+0x58>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_I2S3_Init+0x54>)
 80014fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001500:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <MX_I2S3_Init+0x54>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_I2S3_Init+0x54>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <MX_I2S3_Init+0x54>)
 8001510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001514:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <MX_I2S3_Init+0x54>)
 8001518:	4a0c      	ldr	r2, [pc, #48]	@ (800154c <MX_I2S3_Init+0x5c>)
 800151a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_I2S3_Init+0x54>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <MX_I2S3_Init+0x54>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_I2S3_Init+0x54>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_I2S3_Init+0x54>)
 8001530:	f004 f940 	bl	80057b4 <HAL_I2S_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800153a:	f000 f919 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200002c0 	.word	0x200002c0
 8001548:	40003c00 	.word	0x40003c00
 800154c:	00017700 	.word	0x00017700

08001550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001554:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <MX_SPI1_Init+0x64>)
 8001556:	4a18      	ldr	r2, [pc, #96]	@ (80015b8 <MX_SPI1_Init+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <MX_SPI1_Init+0x64>)
 800155c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_SPI1_Init+0x64>)
 800157c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001582:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_SPI1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_SPI1_Init+0x64>)
 800159c:	220a      	movs	r2, #10
 800159e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_SPI1_Init+0x64>)
 80015a2:	f005 fb7d 	bl	8006ca0 <HAL_SPI_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015ac:	f000 f8e0 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000308 	.word	0x20000308
 80015b8:	40013000 	.word	0x40013000

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	@ 0x30
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	4b61      	ldr	r3, [pc, #388]	@ (800175c <MX_GPIO_Init+0x1a0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a60      	ldr	r2, [pc, #384]	@ (800175c <MX_GPIO_Init+0x1a0>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <MX_GPIO_Init+0x1a0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	4b5a      	ldr	r3, [pc, #360]	@ (800175c <MX_GPIO_Init+0x1a0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a59      	ldr	r2, [pc, #356]	@ (800175c <MX_GPIO_Init+0x1a0>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b57      	ldr	r3, [pc, #348]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b53      	ldr	r3, [pc, #332]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a52      	ldr	r2, [pc, #328]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b50      	ldr	r3, [pc, #320]	@ (800175c <MX_GPIO_Init+0x1a0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b4c      	ldr	r3, [pc, #304]	@ (800175c <MX_GPIO_Init+0x1a0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a4b      	ldr	r2, [pc, #300]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b45      	ldr	r3, [pc, #276]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a44      	ldr	r2, [pc, #272]	@ (800175c <MX_GPIO_Init+0x1a0>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b42      	ldr	r3, [pc, #264]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b3e      	ldr	r3, [pc, #248]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a3d      	ldr	r2, [pc, #244]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <MX_GPIO_Init+0x1a0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2108      	movs	r1, #8
 800167e:	4838      	ldr	r0, [pc, #224]	@ (8001760 <MX_GPIO_Init+0x1a4>)
 8001680:	f000 ff50 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2101      	movs	r1, #1
 8001688:	4836      	ldr	r0, [pc, #216]	@ (8001764 <MX_GPIO_Init+0x1a8>)
 800168a:	f000 ff4b 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800168e:	2200      	movs	r2, #0
 8001690:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001694:	4834      	ldr	r0, [pc, #208]	@ (8001768 <MX_GPIO_Init+0x1ac>)
 8001696:	f000 ff45 	bl	8002524 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800169a:	2304      	movs	r3, #4
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	482c      	ldr	r0, [pc, #176]	@ (8001760 <MX_GPIO_Init+0x1a4>)
 80016ae:	f000 fdb5 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80016b2:	2308      	movs	r3, #8
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4825      	ldr	r0, [pc, #148]	@ (8001760 <MX_GPIO_Init+0x1a4>)
 80016ca:	f000 fda7 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80016ce:	2332      	movs	r3, #50	@ 0x32
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016d2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	481f      	ldr	r0, [pc, #124]	@ (8001760 <MX_GPIO_Init+0x1a4>)
 80016e4:	f000 fd9a 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4819      	ldr	r0, [pc, #100]	@ (8001764 <MX_GPIO_Init+0x1a8>)
 8001700:	f000 fd8c 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001704:	2301      	movs	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001708:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4814      	ldr	r0, [pc, #80]	@ (800176c <MX_GPIO_Init+0x1b0>)
 800171a:	f000 fd7f 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800171e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001722:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	480c      	ldr	r0, [pc, #48]	@ (8001768 <MX_GPIO_Init+0x1ac>)
 8001738:	f000 fd70 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800173c:	2320      	movs	r3, #32
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <MX_GPIO_Init+0x1ac>)
 8001750:	f000 fd64 	bl	800221c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	@ 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40020000 	.word	0x40020000

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <Error_Handler+0x8>

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <HAL_MspInit+0x4c>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001790:	6453      	str	r3, [r2, #68]	@ 0x44
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ba:	2007      	movs	r0, #7
 80017bc:	f000 fcec 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <HAL_I2C_MspInit+0x84>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12c      	bne.n	8001848 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_I2C_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <HAL_I2C_MspInit+0x88>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_I2C_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800180a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001810:	2312      	movs	r3, #18
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181c:	2304      	movs	r3, #4
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	480c      	ldr	r0, [pc, #48]	@ (8001858 <HAL_I2C_MspInit+0x8c>)
 8001828:	f000 fcf8 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_I2C_MspInit+0x88>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_I2C_MspInit+0x88>)
 8001836:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_I2C_MspInit+0x88>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40005400 	.word	0x40005400
 8001854:	40023800 	.word	0x40023800
 8001858:	40020400 	.word	0x40020400

0800185c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	@ 0x38
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a59      	ldr	r2, [pc, #356]	@ (80019e0 <HAL_I2S_MspInit+0x184>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d15b      	bne.n	8001936 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	4b58      	ldr	r3, [pc, #352]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4a57      	ldr	r2, [pc, #348]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40
 800188e:	4b55      	ldr	r3, [pc, #340]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	4b51      	ldr	r3, [pc, #324]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a50      	ldr	r2, [pc, #320]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b4e      	ldr	r3, [pc, #312]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	4b4a      	ldr	r3, [pc, #296]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a49      	ldr	r2, [pc, #292]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018d2:	2304      	movs	r3, #4
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80018e2:	2306      	movs	r3, #6
 80018e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	483e      	ldr	r0, [pc, #248]	@ (80019e8 <HAL_I2S_MspInit+0x18c>)
 80018ee:	f000 fc95 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018f2:	2308      	movs	r3, #8
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001902:	2305      	movs	r3, #5
 8001904:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4836      	ldr	r0, [pc, #216]	@ (80019e8 <HAL_I2S_MspInit+0x18c>)
 800190e:	f000 fc85 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001912:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001924:	2305      	movs	r3, #5
 8001926:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192c:	4619      	mov	r1, r3
 800192e:	482f      	ldr	r0, [pc, #188]	@ (80019ec <HAL_I2S_MspInit+0x190>)
 8001930:	f000 fc74 	bl	800221c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001934:	e04f      	b.n	80019d6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2d      	ldr	r2, [pc, #180]	@ (80019f0 <HAL_I2S_MspInit+0x194>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d14a      	bne.n	80019d6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4a26      	ldr	r2, [pc, #152]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 800194a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	4a1f      	ldr	r2, [pc, #124]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6313      	str	r3, [r2, #48]	@ 0x30
 800196c:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6313      	str	r3, [r2, #48]	@ 0x30
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_I2S_MspInit+0x188>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001994:	2310      	movs	r3, #16
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019a4:	2306      	movs	r3, #6
 80019a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4811      	ldr	r0, [pc, #68]	@ (80019f4 <HAL_I2S_MspInit+0x198>)
 80019b0:	f000 fc34 	bl	800221c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80019b4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019c6:	2306      	movs	r3, #6
 80019c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <HAL_I2S_MspInit+0x18c>)
 80019d2:	f000 fc23 	bl	800221c <HAL_GPIO_Init>
}
 80019d6:	bf00      	nop
 80019d8:	3738      	adds	r7, #56	@ 0x38
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40003800 	.word	0x40003800
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40003c00 	.word	0x40003c00
 80019f4:	40020000 	.word	0x40020000

080019f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <HAL_SPI_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12b      	bne.n	8001a72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	4a17      	ldr	r2, [pc, #92]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a52:	23e0      	movs	r3, #224	@ 0xe0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a62:	2305      	movs	r3, #5
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <HAL_SPI_MspInit+0x8c>)
 8001a6e:	f000 fbd5 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	@ 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40013000 	.word	0x40013000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <NMI_Handler+0x4>

08001a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <MemManage_Handler+0x4>

08001aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <UsageFault_Handler+0x4>

08001ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f000 fa47 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <OTG_FS_IRQHandler+0x10>)
 8001aee:	f001 f813 	bl	8002b18 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200009c4 	.word	0x200009c4

08001afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_kill>:

int _kill(int pid, int sig)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b16:	f00d facd 	bl	800f0b4 <__errno>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2216      	movs	r2, #22
 8001b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_exit>:

void _exit (int status)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ffe7 	bl	8001b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b3e:	bf00      	nop
 8001b40:	e7fd      	b.n	8001b3e <_exit+0x12>

08001b42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e00a      	b.n	8001b6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b54:	f3af 8000 	nop.w
 8001b58:	4601      	mov	r1, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbf0      	blt.n	8001b54 <_read+0x12>
  }

  return len;
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e009      	b.n	8001ba2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	60ba      	str	r2, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf1      	blt.n	8001b8e <_write+0x12>
  }
  return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_close>:

int _close(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bdc:	605a      	str	r2, [r3, #4]
  return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_isatty>:

int _isatty(int file)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f00d fa32 	bl	800f0b4 <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20020000 	.word	0x20020000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	200005a4 	.word	0x200005a4
 8001c84:	20000ef0 	.word	0x20000ef0

08001c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <SystemInit+0x20>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c92:	4a05      	ldr	r2, [pc, #20]	@ (8001ca8 <SystemInit+0x20>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ce4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb0:	f7ff ffea 	bl	8001c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	@ (8001cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f00d f9f1 	bl	800f0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cde:	f7ff fa53 	bl	8001188 <main>
  bx  lr    
 8001ce2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001cf0:	08011668 	.word	0x08011668
  ldr r2, =_sbss
 8001cf4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001cf8:	20000ef0 	.word	0x20000ef0

08001cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>

08001cfe <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001d0c:	f7ff f91c 	bl	8000f48 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	461a      	mov	r2, r3
 8001d18:	2120      	movs	r1, #32
 8001d1a:	2032      	movs	r0, #50	@ 0x32
 8001d1c:	f7ff f91c 	bl	8000f58 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2123      	movs	r1, #35	@ 0x23
 8001d2e:	2032      	movs	r0, #50	@ 0x32
 8001d30:	f7ff f912 	bl	8000f58 <COMPASSACCELERO_IO_Write>
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001d44:	2300      	movs	r3, #0
 8001d46:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001d50:	2123      	movs	r1, #35	@ 0x23
 8001d52:	2032      	movs	r0, #50	@ 0x32
 8001d54:	f7ff f91e 	bl	8000f94 <COMPASSACCELERO_IO_Read>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001d5c:	2124      	movs	r1, #36	@ 0x24
 8001d5e:	2032      	movs	r0, #50	@ 0x32
 8001d60:	f7ff f918 	bl	8000f94 <COMPASSACCELERO_IO_Read>
 8001d64:	4603      	mov	r3, r0
 8001d66:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001d68:	2128      	movs	r1, #40	@ 0x28
 8001d6a:	2032      	movs	r0, #50	@ 0x32
 8001d6c:	f7ff f912 	bl	8000f94 <COMPASSACCELERO_IO_Read>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001d76:	2129      	movs	r1, #41	@ 0x29
 8001d78:	2032      	movs	r0, #50	@ 0x32
 8001d7a:	f7ff f90b 	bl	8000f94 <COMPASSACCELERO_IO_Read>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001d84:	212a      	movs	r1, #42	@ 0x2a
 8001d86:	2032      	movs	r0, #50	@ 0x32
 8001d88:	f7ff f904 	bl	8000f94 <COMPASSACCELERO_IO_Read>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001d92:	212b      	movs	r1, #43	@ 0x2b
 8001d94:	2032      	movs	r0, #50	@ 0x32
 8001d96:	f7ff f8fd 	bl	8000f94 <COMPASSACCELERO_IO_Read>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001da0:	212c      	movs	r1, #44	@ 0x2c
 8001da2:	2032      	movs	r0, #50	@ 0x32
 8001da4:	f7ff f8f6 	bl	8000f94 <COMPASSACCELERO_IO_Read>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b25b      	sxtb	r3, r3
 8001dac:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001dae:	212d      	movs	r1, #45	@ 0x2d
 8001db0:	2032      	movs	r0, #50	@ 0x32
 8001db2:	f7ff f8ef 	bl	8000f94 <COMPASSACCELERO_IO_Read>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001dbc:	7d3b      	ldrb	r3, [r7, #20]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d123      	bne.n	8001e0e <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	77fb      	strb	r3, [r7, #31]
 8001dca:	e01c      	b.n	8001e06 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	443b      	add	r3, r7
 8001dd6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	7ffb      	ldrb	r3, [r7, #31]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	3320      	adds	r3, #32
 8001de6:	443b      	add	r3, r7
 8001de8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	4413      	add	r3, r2
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
 8001df4:	b212      	sxth	r2, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	3320      	adds	r3, #32
 8001dfa:	443b      	add	r3, r7
 8001dfc:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001e00:	7ffb      	ldrb	r3, [r7, #31]
 8001e02:	3301      	adds	r3, #1
 8001e04:	77fb      	strb	r3, [r7, #31]
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d9df      	bls.n	8001dcc <LSM303DLHC_AccReadXYZ+0x90>
 8001e0c:	e022      	b.n	8001e54 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	77fb      	strb	r3, [r7, #31]
 8001e12:	e01c      	b.n	8001e4e <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001e14:	7ffb      	ldrb	r3, [r7, #31]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	3320      	adds	r3, #32
 8001e1a:	443b      	add	r3, r7
 8001e1c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	3320      	adds	r3, #32
 8001e2e:	443b      	add	r3, r7
 8001e30:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
 8001e3c:	b212      	sxth	r2, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	3320      	adds	r3, #32
 8001e42:	443b      	add	r3, r7
 8001e44:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001e48:	7ffb      	ldrb	r3, [r7, #31]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	77fb      	strb	r3, [r7, #31]
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d9df      	bls.n	8001e14 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001e54:	7d3b      	ldrb	r3, [r7, #20]
 8001e56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001e5a:	2b30      	cmp	r3, #48	@ 0x30
 8001e5c:	d013      	beq.n	8001e86 <LSM303DLHC_AccReadXYZ+0x14a>
 8001e5e:	2b30      	cmp	r3, #48	@ 0x30
 8001e60:	dc14      	bgt.n	8001e8c <LSM303DLHC_AccReadXYZ+0x150>
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d00c      	beq.n	8001e80 <LSM303DLHC_AccReadXYZ+0x144>
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	dc10      	bgt.n	8001e8c <LSM303DLHC_AccReadXYZ+0x150>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <LSM303DLHC_AccReadXYZ+0x138>
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d003      	beq.n	8001e7a <LSM303DLHC_AccReadXYZ+0x13e>
 8001e72:	e00b      	b.n	8001e8c <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001e74:	2301      	movs	r3, #1
 8001e76:	77bb      	strb	r3, [r7, #30]
    break;
 8001e78:	e008      	b.n	8001e8c <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	77bb      	strb	r3, [r7, #30]
    break;
 8001e7e:	e005      	b.n	8001e8c <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001e80:	2304      	movs	r3, #4
 8001e82:	77bb      	strb	r3, [r7, #30]
    break;
 8001e84:	e002      	b.n	8001e8c <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001e86:	230c      	movs	r3, #12
 8001e88:	77bb      	strb	r3, [r7, #30]
    break;
 8001e8a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
 8001e90:	e014      	b.n	8001ebc <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001e92:	7ffb      	ldrb	r3, [r7, #31]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	3320      	adds	r3, #32
 8001e98:	443b      	add	r3, r7
 8001e9a:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	7fbb      	ldrb	r3, [r7, #30]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	fb12 f303 	smulbb	r3, r2, r3
 8001ea8:	b299      	uxth	r1, r3
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b20a      	sxth	r2, r1
 8001eb4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001eb6:	7ffb      	ldrb	r3, [r7, #31]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	77fb      	strb	r3, [r7, #31]
 8001ebc:	7ffb      	ldrb	r3, [r7, #31]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d9e7      	bls.n	8001e92 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <HAL_Init+0x40>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_Init+0x40>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	@ (8001f0c <HAL_Init+0x40>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f94f 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f808 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff fc3c 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_InitTick+0x54>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_InitTick+0x58>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f967 	bl	8002202 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f92f 	bl	80021ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	@ (8001f6c <HAL_InitTick+0x5c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000004 	.word	0x20000004
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	20000008 	.word	0x20000008

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000000c 	.word	0x2000000c
 8001f94:	200005a8 	.word	0x200005a8

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	200005a8 	.word	0x200005a8

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000000c 	.word	0x2000000c

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	@ (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	@ (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	@ (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff3e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff8e 	bl	80020ec <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5d 	bl	8002098 <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa2 	bl	8002154 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	@ 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e159      	b.n	80024ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 8148 	bne.w	80024e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d005      	beq.n	800226e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	2b02      	cmp	r3, #2
 800226c:	d130      	bne.n	80022d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0201 	and.w	r2, r3, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d017      	beq.n	800230c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d123      	bne.n	8002360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80a2 	beq.w	80024e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b57      	ldr	r3, [pc, #348]	@ (8002504 <HAL_GPIO_Init+0x2e8>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a56      	ldr	r2, [pc, #344]	@ (8002504 <HAL_GPIO_Init+0x2e8>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b54      	ldr	r3, [pc, #336]	@ (8002504 <HAL_GPIO_Init+0x2e8>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023be:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <HAL_GPIO_Init+0x2ec>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a49      	ldr	r2, [pc, #292]	@ (800250c <HAL_GPIO_Init+0x2f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0x202>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a48      	ldr	r2, [pc, #288]	@ (8002510 <HAL_GPIO_Init+0x2f4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x1fe>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a47      	ldr	r2, [pc, #284]	@ (8002514 <HAL_GPIO_Init+0x2f8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x1fa>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a46      	ldr	r2, [pc, #280]	@ (8002518 <HAL_GPIO_Init+0x2fc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x1f6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a45      	ldr	r2, [pc, #276]	@ (800251c <HAL_GPIO_Init+0x300>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x1f2>
 800240a:	2304      	movs	r3, #4
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x204>
 800240e:	2307      	movs	r3, #7
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x204>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x204>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x204>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x204>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	4935      	ldr	r1, [pc, #212]	@ (8002508 <HAL_GPIO_Init+0x2ec>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243e:	4b38      	ldr	r3, [pc, #224]	@ (8002520 <HAL_GPIO_Init+0x304>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002462:	4a2f      	ldr	r2, [pc, #188]	@ (8002520 <HAL_GPIO_Init+0x304>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002468:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <HAL_GPIO_Init+0x304>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800248c:	4a24      	ldr	r2, [pc, #144]	@ (8002520 <HAL_GPIO_Init+0x304>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002492:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <HAL_GPIO_Init+0x304>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002520 <HAL_GPIO_Init+0x304>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024bc:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <HAL_GPIO_Init+0x304>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002520 <HAL_GPIO_Init+0x304>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f aea2 	bls.w	8002238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020400 	.word	0x40020400
 8002514:	40020800 	.word	0x40020800
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40021000 	.word	0x40021000
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002540:	e003      	b.n	800254a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	041a      	lsls	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	619a      	str	r2, [r3, #24]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af02      	add	r7, sp, #8
 800255c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e059      	b.n	800261c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f00b fb00 	bl	800db88 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2203      	movs	r2, #3
 800258c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002596:	d102      	bne.n	800259e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 fc7a 	bl	8006e9c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7c1a      	ldrb	r2, [r3, #16]
 80025b0:	f88d 2000 	strb.w	r2, [sp]
 80025b4:	3304      	adds	r3, #4
 80025b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b8:	f004 fbfb 	bl	8006db2 <USB_CoreInit>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e026      	b.n	800261c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 fc72 	bl	8006ebe <USB_SetCurrentMode>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e017      	b.n	800261c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7c1a      	ldrb	r2, [r3, #16]
 80025f4:	f88d 2000 	strb.w	r2, [sp]
 80025f8:	3304      	adds	r3, #4
 80025fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025fc:	f004 fe14 	bl	8007228 <USB_HostInit>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e004      	b.n	800261c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b08b      	sub	sp, #44	@ 0x2c
 8002628:	af04      	add	r7, sp, #16
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4603      	mov	r3, r0
 8002634:	70fb      	strb	r3, [r7, #3]
 8002636:	460b      	mov	r3, r1
 8002638:	70bb      	strb	r3, [r7, #2]
 800263a:	4613      	mov	r3, r2
 800263c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800263e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002640:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_HCD_HC_Init+0x2c>
 800264c:	2302      	movs	r3, #2
 800264e:	e09d      	b.n	800278c <HAL_HCD_HC_Init+0x168>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3319      	adds	r3, #25
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3314      	adds	r3, #20
 800267c:	787a      	ldrb	r2, [r7, #1]
 800267e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3315      	adds	r3, #21
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	3326      	adds	r3, #38	@ 0x26
 80026a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	78bb      	ldrb	r3, [r7, #2]
 80026ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026b2:	b2d8      	uxtb	r0, r3
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3316      	adds	r3, #22
 80026c2:	4602      	mov	r2, r0
 80026c4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fbc8 	bl	8002e60 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	da0a      	bge.n	80026ee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3317      	adds	r3, #23
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e009      	b.n	8002702 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3317      	adds	r3, #23
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 fedc 	bl	80074c4 <USB_GetHostSpeed>
 800270c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800270e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10b      	bne.n	800272e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002716:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_HCD_HC_Init+0x10a>
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2bbc      	cmp	r3, #188	@ 0xbc
 8002728:	d901      	bls.n	800272e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800272a:	23bc      	movs	r3, #188	@ 0xbc
 800272c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	3318      	adds	r3, #24
 800273e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	b298      	uxth	r0, r3
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3328      	adds	r3, #40	@ 0x28
 8002758:	4602      	mov	r2, r0
 800275a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	b29b      	uxth	r3, r3
 8002764:	787c      	ldrb	r4, [r7, #1]
 8002766:	78ba      	ldrb	r2, [r7, #2]
 8002768:	78f9      	ldrb	r1, [r7, #3]
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4623      	mov	r3, r4
 800277a:	f004 fecb 	bl	8007514 <USB_HC_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}

08002794 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_HCD_HC_Halt+0x1e>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e00f      	b.n	80027d2 <HAL_HCD_HC_Halt+0x3e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f005 fa11 	bl	8007bea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	70fb      	strb	r3, [r7, #3]
 80027ee:	460b      	mov	r3, r1
 80027f0:	70bb      	strb	r3, [r7, #2]
 80027f2:	4613      	mov	r3, r2
 80027f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3317      	adds	r3, #23
 8002806:	78ba      	ldrb	r2, [r7, #2]
 8002808:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3326      	adds	r3, #38	@ 0x26
 800281a:	787a      	ldrb	r2, [r7, #1]
 800281c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800281e:	7c3b      	ldrb	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d114      	bne.n	800284e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	332a      	adds	r3, #42	@ 0x2a
 8002834:	2203      	movs	r2, #3
 8002836:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3319      	adds	r3, #25
 8002848:	7f3a      	ldrb	r2, [r7, #28]
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e009      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	332a      	adds	r3, #42	@ 0x2a
 800285e:	2202      	movs	r2, #2
 8002860:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002862:	787b      	ldrb	r3, [r7, #1]
 8002864:	2b03      	cmp	r3, #3
 8002866:	f200 8102 	bhi.w	8002a6e <HAL_HCD_HC_SubmitRequest+0x292>
 800286a:	a201      	add	r2, pc, #4	@ (adr r2, 8002870 <HAL_HCD_HC_SubmitRequest+0x94>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	08002881 	.word	0x08002881
 8002874:	08002a59 	.word	0x08002a59
 8002878:	08002945 	.word	0x08002945
 800287c:	080029cf 	.word	0x080029cf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002880:	7c3b      	ldrb	r3, [r7, #16]
 8002882:	2b01      	cmp	r3, #1
 8002884:	f040 80f5 	bne.w	8002a72 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002888:	78bb      	ldrb	r3, [r7, #2]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d12d      	bne.n	80028ea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800288e:	8b3b      	ldrh	r3, [r7, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	333d      	adds	r3, #61	@ 0x3d
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	333d      	adds	r3, #61	@ 0x3d
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	332a      	adds	r3, #42	@ 0x2a
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028d2:	e0ce      	b.n	8002a72 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	332a      	adds	r3, #42	@ 0x2a
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]
      break;
 80028e8:	e0c3      	b.n	8002a72 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	331a      	adds	r3, #26
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 80b8 	bne.w	8002a72 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	333c      	adds	r3, #60	@ 0x3c
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	332a      	adds	r3, #42	@ 0x2a
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
      break;
 800292c:	e0a1      	b.n	8002a72 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	332a      	adds	r3, #42	@ 0x2a
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
      break;
 8002942:	e096      	b.n	8002a72 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002944:	78bb      	ldrb	r3, [r7, #2]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d120      	bne.n	800298c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	333d      	adds	r3, #61	@ 0x3d
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	332a      	adds	r3, #42	@ 0x2a
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002974:	e07e      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	332a      	adds	r3, #42	@ 0x2a
 8002986:	2202      	movs	r2, #2
 8002988:	701a      	strb	r2, [r3, #0]
      break;
 800298a:	e073      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	333c      	adds	r3, #60	@ 0x3c
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	332a      	adds	r3, #42	@ 0x2a
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
      break;
 80029b6:	e05d      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	332a      	adds	r3, #42	@ 0x2a
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
      break;
 80029cc:	e052      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029ce:	78bb      	ldrb	r3, [r7, #2]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d120      	bne.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	333d      	adds	r3, #61	@ 0x3d
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	332a      	adds	r3, #42	@ 0x2a
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029fe:	e039      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	332a      	adds	r3, #42	@ 0x2a
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]
      break;
 8002a14:	e02e      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	333c      	adds	r3, #60	@ 0x3c
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	332a      	adds	r3, #42	@ 0x2a
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
      break;
 8002a40:	e018      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	332a      	adds	r3, #42	@ 0x2a
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
      break;
 8002a56:	e00d      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	332a      	adds	r3, #42	@ 0x2a
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
      break;
 8002a6c:	e002      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a72:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	332c      	adds	r3, #44	@ 0x2c
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	8b39      	ldrh	r1, [r7, #24]
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4403      	add	r3, r0
 8002a98:	3334      	adds	r3, #52	@ 0x34
 8002a9a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334c      	adds	r3, #76	@ 0x4c
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3338      	adds	r3, #56	@ 0x38
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3315      	adds	r3, #21
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334d      	adds	r3, #77	@ 0x4d
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	3310      	adds	r3, #16
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	1d19      	adds	r1, r3, #4
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	799b      	ldrb	r3, [r3, #6]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f004 fe1a 	bl	8007740 <USB_HC_StartXfer>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop

08002b18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 fb3b 	bl	80071aa <USB_GetMode>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	f040 80fb 	bne.w	8002d32 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fafe 	bl	8007142 <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80f1 	beq.w	8002d30 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 faf5 	bl	8007142 <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b62:	d104      	bne.n	8002b6e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 fae5 	bl	8007142 <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b82:	d104      	bne.n	8002b8e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 fad5 	bl	8007142 <USB_ReadInterrupts>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ba2:	d104      	bne.n	8002bae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f004 fac5 	bl	8007142 <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d103      	bne.n	8002bca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fab7 	bl	8007142 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bde:	d120      	bne.n	8002c22 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002be8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d113      	bne.n	8002c22 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002bfa:	2110      	movs	r1, #16
 8002bfc:	6938      	ldr	r0, [r7, #16]
 8002bfe:	f004 f9aa 	bl	8006f56 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c02:	6938      	ldr	r0, [r7, #16]
 8002c04:	f004 f9d9 	bl	8006fba <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7a5b      	ldrb	r3, [r3, #9]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d105      	bne.n	8002c1c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 fbb4 	bl	8007384 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f00b f831 	bl	800dc84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 fa8b 	bl	8007142 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c36:	d102      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f001 fd4d 	bl	80046d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 fa7d 	bl	8007142 <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d106      	bne.n	8002c60 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f00a fffa 	bl	800dc4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f004 fa6c 	bl	8007142 <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c74:	d139      	bne.n	8002cea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 ffa4 	bl	8007bc8 <USB_HC_ReadInterrupt>
 8002c80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e025      	b.n	8002cd4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d018      	beq.n	8002cce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb2:	d106      	bne.n	8002cc2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f905 	bl	8002eca <HCD_HC_IN_IRQHandler>
 8002cc0:	e005      	b.n	8002cce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 ff67 	bl	8003b9c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	795b      	ldrb	r3, [r3, #5]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d3d3      	bcc.n	8002c88 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f004 fa27 	bl	8007142 <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d101      	bne.n	8002d02 <HAL_HCD_IRQHandler+0x1ea>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_HCD_IRQHandler+0x1ec>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d014      	beq.n	8002d32 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0210 	bic.w	r2, r2, #16
 8002d16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f001 fbfe 	bl	800451a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0210 	orr.w	r2, r2, #16
 8002d2c:	619a      	str	r2, [r3, #24]
 8002d2e:	e000      	b.n	8002d32 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d30:	bf00      	nop
    }
  }
}
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_HCD_Start+0x16>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e013      	b.n	8002d76 <HAL_HCD_Start+0x3e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fb78 	bl	8007452 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 f887 	bl	8006e7a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_HCD_Stop+0x16>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e00d      	b.n	8002db0 <HAL_HCD_Stop+0x32>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f005 f842 	bl	8007e2a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f004 fb1a 	bl	80073fe <USB_ResetPort>
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334c      	adds	r3, #76	@ 0x4c
 8002df0:	781b      	ldrb	r3, [r3, #0]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3338      	adds	r3, #56	@ 0x38
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 fb5c 	bl	80074f2 <USB_GetCurrentFrame>
 8002e3a:	4603      	mov	r3, r0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fb37 	bl	80074c4 <USB_GetHostSpeed>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	331a      	adds	r3, #26
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	331b      	adds	r3, #27
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3325      	adds	r3, #37	@ 0x25
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3324      	adds	r3, #36	@ 0x24
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 f93d 	bl	8007168 <USB_ReadChInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d11a      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2304      	movs	r3, #4
 8002f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	334d      	adds	r3, #77	@ 0x4d
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 fe5f 	bl	8007bea <USB_HC_Halt>
 8002f2c:	e09e      	b.n	800306c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 f916 	bl	8007168 <USB_ReadChInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f46:	d11b      	bne.n	8002f80 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334d      	adds	r3, #77	@ 0x4d
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f004 fe36 	bl	8007bea <USB_HC_Halt>
 8002f7e:	e075      	b.n	800306c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 f8ed 	bl	8007168 <USB_ReadChInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d11a      	bne.n	8002fce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	334d      	adds	r3, #77	@ 0x4d
 8002fba:	2206      	movs	r2, #6
 8002fbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 fe0f 	bl	8007bea <USB_HC_Halt>
 8002fcc:	e04e      	b.n	800306c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 f8c6 	bl	8007168 <USB_ReadChInterrupts>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d11b      	bne.n	8003020 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ffa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	334d      	adds	r3, #77	@ 0x4d
 800300c:	2209      	movs	r2, #9
 800300e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f004 fde6 	bl	8007bea <USB_HC_Halt>
 800301e:	e025      	b.n	800306c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f004 f89d 	bl	8007168 <USB_ReadChInterrupts>
 800302e:	4603      	mov	r3, r0
 8003030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003034:	2b80      	cmp	r3, #128	@ 0x80
 8003036:	d119      	bne.n	800306c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003044:	461a      	mov	r2, r3
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	334d      	adds	r3, #77	@ 0x4d
 800305a:	2207      	movs	r2, #7
 800305c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f004 fdbf 	bl	8007bea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f004 f877 	bl	8007168 <USB_ReadChInterrupts>
 800307a:	4603      	mov	r3, r0
 800307c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003084:	d112      	bne.n	80030ac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f004 fdab 	bl	8007bea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	f000 bd75 	b.w	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 f857 	bl	8007168 <USB_ReadChInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 8128 	bne.w	8003316 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d2:	461a      	mov	r2, r3
 80030d4:	2320      	movs	r3, #32
 80030d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	331b      	adds	r3, #27
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d119      	bne.n	8003122 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	331b      	adds	r3, #27
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	0151      	lsls	r1, r2, #5
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	440a      	add	r2, r1
 8003118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800311c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003120:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	799b      	ldrb	r3, [r3, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01b      	beq.n	8003162 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3330      	adds	r3, #48	@ 0x30
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	1ac9      	subs	r1, r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4403      	add	r3, r0
 800315e:	3338      	adds	r3, #56	@ 0x38
 8003160:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334d      	adds	r3, #77	@ 0x4d
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3344      	adds	r3, #68	@ 0x44
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	2301      	movs	r3, #1
 800319a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3326      	adds	r3, #38	@ 0x26
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3326      	adds	r3, #38	@ 0x26
 80031c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d110      	bne.n	80031ea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f004 fd0a 	bl	8007bea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e2:	461a      	mov	r2, r3
 80031e4:	2310      	movs	r3, #16
 80031e6:	6093      	str	r3, [r2, #8]
 80031e8:	e03d      	b.n	8003266 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3326      	adds	r3, #38	@ 0x26
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d00a      	beq.n	8003216 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3326      	adds	r3, #38	@ 0x26
 8003210:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003212:	2b01      	cmp	r3, #1
 8003214:	d127      	bne.n	8003266 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	0151      	lsls	r1, r2, #5
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	440a      	add	r2, r1
 800322c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003230:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003234:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334c      	adds	r3, #76	@ 0x4c
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334c      	adds	r3, #76	@ 0x4c
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	4619      	mov	r1, r3
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f00a fd1d 	bl	800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	799b      	ldrb	r3, [r3, #6]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d13b      	bne.n	80032e6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	3338      	adds	r3, #56	@ 0x38
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4403      	add	r3, r0
 800328e:	3328      	adds	r3, #40	@ 0x28
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	440b      	add	r3, r1
 8003294:	1e59      	subs	r1, r3, #1
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4403      	add	r3, r0
 80032a4:	3328      	adds	r3, #40	@ 0x28
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8470 	beq.w	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	333c      	adds	r3, #60	@ 0x3c
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	f083 0301 	eor.w	r3, r3, #1
 80032ce:	b2d8      	uxtb	r0, r3
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	333c      	adds	r3, #60	@ 0x3c
 80032de:	4602      	mov	r2, r0
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	f000 bc58 	b.w	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	333c      	adds	r3, #60	@ 0x3c
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	f083 0301 	eor.w	r3, r3, #1
 80032fe:	b2d8      	uxtb	r0, r3
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	333c      	adds	r3, #60	@ 0x3c
 800330e:	4602      	mov	r2, r0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	f000 bc40 	b.w	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f003 ff22 	bl	8007168 <USB_ReadChInterrupts>
 8003324:	4603      	mov	r3, r0
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d131      	bne.n	8003392 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	2320      	movs	r3, #32
 800333e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	331a      	adds	r3, #26
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	f040 841f 	bne.w	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	331b      	adds	r3, #27
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334d      	adds	r3, #77	@ 0x4d
 800337c:	2203      	movs	r2, #3
 800337e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f004 fc2e 	bl	8007bea <USB_HC_Halt>
 800338e:	f000 bc02 	b.w	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f003 fee4 	bl	8007168 <USB_ReadChInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	f040 8305 	bne.w	80039b6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	2302      	movs	r3, #2
 80033bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	334d      	adds	r3, #77	@ 0x4d
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d114      	bne.n	80033fe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	334d      	adds	r3, #77	@ 0x4d
 80033e4:	2202      	movs	r2, #2
 80033e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334c      	adds	r3, #76	@ 0x4c
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e2cc      	b.n	8003998 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	334d      	adds	r3, #77	@ 0x4d
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b06      	cmp	r3, #6
 8003412:	d114      	bne.n	800343e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	334d      	adds	r3, #77	@ 0x4d
 8003424:	2202      	movs	r2, #2
 8003426:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	@ 0x4c
 8003438:	2205      	movs	r2, #5
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e2ac      	b.n	8003998 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	334d      	adds	r3, #77	@ 0x4d
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b07      	cmp	r3, #7
 8003452:	d00b      	beq.n	800346c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	334d      	adds	r3, #77	@ 0x4d
 8003464:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003466:	2b09      	cmp	r3, #9
 8003468:	f040 80a6 	bne.w	80035b8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	334d      	adds	r3, #77	@ 0x4d
 800347c:	2202      	movs	r2, #2
 800347e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	3344      	adds	r3, #68	@ 0x44
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1c59      	adds	r1, r3, #1
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4403      	add	r3, r0
 80034a0:	3344      	adds	r3, #68	@ 0x44
 80034a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3344      	adds	r3, #68	@ 0x44
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d943      	bls.n	8003542 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3344      	adds	r3, #68	@ 0x44
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	331a      	adds	r3, #26
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d123      	bne.n	800352c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	331b      	adds	r3, #27
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	331c      	adds	r3, #28
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	0151      	lsls	r1, r2, #5
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	440a      	add	r2, r1
 8003522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	334c      	adds	r3, #76	@ 0x4c
 800353c:	2204      	movs	r2, #4
 800353e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003540:	e229      	b.n	8003996 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	334c      	adds	r3, #76	@ 0x4c
 8003552:	2202      	movs	r2, #2
 8003554:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	3326      	adds	r3, #38	@ 0x26
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3326      	adds	r3, #38	@ 0x26
 800357c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800357e:	2b02      	cmp	r3, #2
 8003580:	f040 8209 	bne.w	8003996 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800359a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b0:	461a      	mov	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035b6:	e1ee      	b.n	8003996 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334d      	adds	r3, #77	@ 0x4d
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	f040 80c8 	bne.w	8003760 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334d      	adds	r3, #77	@ 0x4d
 80035e0:	2202      	movs	r2, #2
 80035e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	331b      	adds	r3, #27
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	f040 81ce 	bne.w	8003998 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3326      	adds	r3, #38	@ 0x26
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d16b      	bne.n	80036ea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3348      	adds	r3, #72	@ 0x48
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	1c59      	adds	r1, r3, #1
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4403      	add	r3, r0
 8003632:	3348      	adds	r3, #72	@ 0x48
 8003634:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	3348      	adds	r3, #72	@ 0x48
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d943      	bls.n	80036d4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3348      	adds	r3, #72	@ 0x48
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	331b      	adds	r3, #27
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	3344      	adds	r3, #68	@ 0x44
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d809      	bhi.n	800369e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	331c      	adds	r3, #28
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	0151      	lsls	r1, r2, #5
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	440a      	add	r2, r1
 80036b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036bc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	334c      	adds	r3, #76	@ 0x4c
 80036ce:	2204      	movs	r2, #4
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e014      	b.n	80036fe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334c      	adds	r3, #76	@ 0x4c
 80036e4:	2202      	movs	r2, #2
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e009      	b.n	80036fe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	334c      	adds	r3, #76	@ 0x4c
 80036fa:	2202      	movs	r2, #2
 80036fc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3326      	adds	r3, #38	@ 0x26
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00b      	beq.n	800372c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3326      	adds	r3, #38	@ 0x26
 8003724:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003726:	2b02      	cmp	r3, #2
 8003728:	f040 8136 	bne.w	8003998 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003742:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800374a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003758:	461a      	mov	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e11b      	b.n	8003998 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	334d      	adds	r3, #77	@ 0x4d
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b03      	cmp	r3, #3
 8003774:	f040 8081 	bne.w	800387a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334d      	adds	r3, #77	@ 0x4d
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	331b      	adds	r3, #27
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	f040 80fa 	bne.w	8003998 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	334c      	adds	r3, #76	@ 0x4c
 80037b4:	2202      	movs	r2, #2
 80037b6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037f6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	0151      	lsls	r1, r2, #5
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	440a      	add	r2, r1
 800380e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003812:	f023 0320 	bic.w	r3, r3, #32
 8003816:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3326      	adds	r3, #38	@ 0x26
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3326      	adds	r3, #38	@ 0x26
 800383e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003840:	2b02      	cmp	r3, #2
 8003842:	f040 80a9 	bne.w	8003998 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800385c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003864:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	e08e      	b.n	8003998 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	334d      	adds	r3, #77	@ 0x4d
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d143      	bne.n	8003918 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	334d      	adds	r3, #77	@ 0x4d
 80038a0:	2202      	movs	r2, #2
 80038a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	334c      	adds	r3, #76	@ 0x4c
 80038b4:	2202      	movs	r2, #2
 80038b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3326      	adds	r3, #38	@ 0x26
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3326      	adds	r3, #38	@ 0x26
 80038de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d159      	bne.n	8003998 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003902:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e03f      	b.n	8003998 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	334d      	adds	r3, #77	@ 0x4d
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b08      	cmp	r3, #8
 800392c:	d126      	bne.n	800397c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	334d      	adds	r3, #77	@ 0x4d
 800393e:	2202      	movs	r2, #2
 8003940:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3344      	adds	r3, #68	@ 0x44
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	1c59      	adds	r1, r3, #1
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4403      	add	r3, r0
 8003962:	3344      	adds	r3, #68	@ 0x44
 8003964:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	334c      	adds	r3, #76	@ 0x4c
 8003976:	2204      	movs	r2, #4
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e00d      	b.n	8003998 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334d      	adds	r3, #77	@ 0x4d
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b02      	cmp	r3, #2
 8003990:	f000 8100 	beq.w	8003b94 <HCD_HC_IN_IRQHandler+0xcca>
 8003994:	e000      	b.n	8003998 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003996:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	334c      	adds	r3, #76	@ 0x4c
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f00a f976 	bl	800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039b4:	e0ef      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 fbd2 	bl	8007168 <USB_ReadChInterrupts>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b40      	cmp	r3, #64	@ 0x40
 80039cc:	d12f      	bne.n	8003a2e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039da:	461a      	mov	r2, r3
 80039dc:	2340      	movs	r3, #64	@ 0x40
 80039de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	334d      	adds	r3, #77	@ 0x4d
 80039f0:	2205      	movs	r2, #5
 80039f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	331a      	adds	r3, #26
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3344      	adds	r3, #68	@ 0x44
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 f8df 	bl	8007bea <USB_HC_Halt>
 8003a2c:	e0b3      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fb96 	bl	8007168 <USB_ReadChInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	f040 80a7 	bne.w	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3326      	adds	r3, #38	@ 0x26
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d11b      	bne.n	8003a96 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3344      	adds	r3, #68	@ 0x44
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	334d      	adds	r3, #77	@ 0x4d
 8003a82:	2204      	movs	r2, #4
 8003a84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 f8ab 	bl	8007bea <USB_HC_Halt>
 8003a94:	e03f      	b.n	8003b16 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3326      	adds	r3, #38	@ 0x26
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3326      	adds	r3, #38	@ 0x26
 8003abc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d129      	bne.n	8003b16 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3344      	adds	r3, #68	@ 0x44
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	799b      	ldrb	r3, [r3, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HCD_HC_IN_IRQHandler+0xc2a>
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	331b      	adds	r3, #27
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d110      	bne.n	8003b16 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	@ 0x4d
 8003b04:	2204      	movs	r2, #4
 8003b06:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f004 f86a 	bl	8007bea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	331b      	adds	r3, #27
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d129      	bne.n	8003b80 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	331b      	adds	r3, #27
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	0151      	lsls	r1, r2, #5
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	440a      	add	r2, r1
 8003b56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2310      	movs	r3, #16
 8003b90:	6093      	str	r3, [r2, #8]
 8003b92:	e000      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003b94:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f003 fad4 	bl	8007168 <USB_ReadChInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d11b      	bne.n	8003c02 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2304      	movs	r3, #4
 8003bda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	334d      	adds	r3, #77	@ 0x4d
 8003bec:	2207      	movs	r2, #7
 8003bee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f003 fff6 	bl	8007bea <USB_HC_Halt>
 8003bfe:	f000 bc89 	b.w	8004514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f003 faac 	bl	8007168 <USB_ReadChInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	f040 8082 	bne.w	8003d20 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3319      	adds	r3, #25
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d124      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3319      	adds	r3, #25
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	334c      	adds	r3, #76	@ 0x4c
 8003c68:	2202      	movs	r2, #2
 8003c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	334d      	adds	r3, #77	@ 0x4d
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 ffae 	bl	8007bea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	331a      	adds	r3, #26
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 8437 	bne.w	8004514 <HCD_HC_OUT_IRQHandler+0x978>
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	331b      	adds	r3, #27
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 842b 	bne.w	8004514 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	3326      	adds	r3, #38	@ 0x26
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d009      	beq.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	331b      	adds	r3, #27
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	334d      	adds	r3, #77	@ 0x4d
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f003 ff70 	bl	8007bea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	3344      	adds	r3, #68	@ 0x44
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e3f9      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f003 fa1d 	bl	8007168 <USB_ReadChInterrupts>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d38:	d111      	bne.n	8003d5e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f003 ff47 	bl	8007bea <USB_HC_Halt>
 8003d5c:	e3da      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 f9fe 	bl	8007168 <USB_ReadChInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d168      	bne.n	8003e48 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3344      	adds	r3, #68	@ 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 f9e8 	bl	8007168 <USB_ReadChInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9e:	2b40      	cmp	r3, #64	@ 0x40
 8003da0:	d112      	bne.n	8003dc8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3319      	adds	r3, #25
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2340      	movs	r3, #64	@ 0x40
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	331b      	adds	r3, #27
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d019      	beq.n	8003e12 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	331b      	adds	r3, #27
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	0151      	lsls	r1, r2, #5
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	440a      	add	r2, r1
 8003e08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e10:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2301      	movs	r3, #1
 8003e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	334d      	adds	r3, #77	@ 0x4d
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f003 fed2 	bl	8007bea <USB_HC_Halt>
 8003e46:	e365      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 f989 	bl	8007168 <USB_ReadChInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b40      	cmp	r3, #64	@ 0x40
 8003e5e:	d139      	bne.n	8003ed4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	334d      	adds	r3, #77	@ 0x4d
 8003e70:	2205      	movs	r2, #5
 8003e72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	331a      	adds	r3, #26
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	3319      	adds	r3, #25
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3344      	adds	r3, #68	@ 0x44
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f003 fe95 	bl	8007bea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2340      	movs	r3, #64	@ 0x40
 8003ed0:	6093      	str	r3, [r2, #8]
 8003ed2:	e31f      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 f943 	bl	8007168 <USB_ReadChInterrupts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d11a      	bne.n	8003f22 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2308      	movs	r3, #8
 8003efc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	334d      	adds	r3, #77	@ 0x4d
 8003f0e:	2206      	movs	r2, #6
 8003f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f003 fe65 	bl	8007bea <USB_HC_Halt>
 8003f20:	e2f8      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 f91c 	bl	8007168 <USB_ReadChInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d144      	bne.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	3344      	adds	r3, #68	@ 0x44
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	334d      	adds	r3, #77	@ 0x4d
 8003f5e:	2204      	movs	r2, #4
 8003f60:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3319      	adds	r3, #25
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d114      	bne.n	8003fa2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	3318      	adds	r3, #24
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3319      	adds	r3, #25
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 fe1d 	bl	8007bea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	6093      	str	r3, [r2, #8]
 8003fc2:	e2a7      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f003 f8cb 	bl	8007168 <USB_ReadChInterrupts>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd8:	2b80      	cmp	r3, #128	@ 0x80
 8003fda:	f040 8083 	bne.w	80040e4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	799b      	ldrb	r3, [r3, #6]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d111      	bne.n	800400a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	334d      	adds	r3, #77	@ 0x4d
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f003 fdf1 	bl	8007bea <USB_HC_Halt>
 8004008:	e062      	b.n	80040d0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3344      	adds	r3, #68	@ 0x44
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c59      	adds	r1, r3, #1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4403      	add	r3, r0
 800402a:	3344      	adds	r3, #68	@ 0x44
 800402c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	3344      	adds	r3, #68	@ 0x44
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d922      	bls.n	800408a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3344      	adds	r3, #68	@ 0x44
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	334c      	adds	r3, #76	@ 0x4c
 8004068:	2204      	movs	r2, #4
 800406a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	334c      	adds	r3, #76	@ 0x4c
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f009 fe0c 	bl	800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004088:	e022      	b.n	80040d0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	334c      	adds	r3, #76	@ 0x4c
 800409a:	2202      	movs	r2, #2
 800409c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040b4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040bc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040dc:	461a      	mov	r2, r3
 80040de:	2380      	movs	r3, #128	@ 0x80
 80040e0:	6093      	str	r3, [r2, #8]
 80040e2:	e217      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f003 f83b 	bl	8007168 <USB_ReadChInterrupts>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fc:	d11b      	bne.n	8004136 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	334d      	adds	r3, #77	@ 0x4d
 800410e:	2209      	movs	r2, #9
 8004110:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f003 fd65 	bl	8007bea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800412c:	461a      	mov	r2, r3
 800412e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004132:	6093      	str	r3, [r2, #8]
 8004134:	e1ee      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f003 f812 	bl	8007168 <USB_ReadChInterrupts>
 8004144:	4603      	mov	r3, r0
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	f040 81df 	bne.w	800450e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415c:	461a      	mov	r2, r3
 800415e:	2302      	movs	r3, #2
 8004160:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	334d      	adds	r3, #77	@ 0x4d
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 8093 	bne.w	80042a0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	334d      	adds	r3, #77	@ 0x4d
 800418a:	2202      	movs	r2, #2
 800418c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	334c      	adds	r3, #76	@ 0x4c
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3326      	adds	r3, #38	@ 0x26
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d00b      	beq.n	80041d0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	3326      	adds	r3, #38	@ 0x26
 80041c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	f040 8190 	bne.w	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	799b      	ldrb	r3, [r3, #6]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d115      	bne.n	8004204 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	333d      	adds	r3, #61	@ 0x3d
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	f083 0301 	eor.w	r3, r3, #1
 80041f0:	b2d8      	uxtb	r0, r3
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	333d      	adds	r3, #61	@ 0x3d
 8004200:	4602      	mov	r2, r0
 8004202:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	799b      	ldrb	r3, [r3, #6]
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 8171 	bne.w	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3334      	adds	r3, #52	@ 0x34
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8165 	beq.w	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	3334      	adds	r3, #52	@ 0x34
 8004236:	6819      	ldr	r1, [r3, #0]
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4403      	add	r3, r0
 8004246:	3328      	adds	r3, #40	@ 0x28
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	440b      	add	r3, r1
 800424c:	1e59      	subs	r1, r3, #1
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4403      	add	r3, r0
 800425c:	3328      	adds	r3, #40	@ 0x28
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	fbb1 f3f3 	udiv	r3, r1, r3
 8004264:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 813f 	beq.w	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	333d      	adds	r3, #61	@ 0x3d
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	f083 0301 	eor.w	r3, r3, #1
 800428a:	b2d8      	uxtb	r0, r3
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	333d      	adds	r3, #61	@ 0x3d
 800429a:	4602      	mov	r2, r0
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e127      	b.n	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	334d      	adds	r3, #77	@ 0x4d
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d120      	bne.n	80042f8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	334d      	adds	r3, #77	@ 0x4d
 80042c6:	2202      	movs	r2, #2
 80042c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	331b      	adds	r3, #27
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 8107 	bne.w	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	334c      	adds	r3, #76	@ 0x4c
 80042f2:	2202      	movs	r2, #2
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	e0fb      	b.n	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	334d      	adds	r3, #77	@ 0x4d
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b04      	cmp	r3, #4
 800430c:	d13a      	bne.n	8004384 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	334d      	adds	r3, #77	@ 0x4d
 800431e:	2202      	movs	r2, #2
 8004320:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	334c      	adds	r3, #76	@ 0x4c
 8004332:	2202      	movs	r2, #2
 8004334:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	331b      	adds	r3, #27
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	f040 80d1 	bne.w	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	331b      	adds	r3, #27
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	440a      	add	r2, r1
 8004378:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800437c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004380:	6053      	str	r3, [r2, #4]
 8004382:	e0b5      	b.n	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	334d      	adds	r3, #77	@ 0x4d
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b05      	cmp	r3, #5
 8004398:	d114      	bne.n	80043c4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	334d      	adds	r3, #77	@ 0x4d
 80043aa:	2202      	movs	r2, #2
 80043ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	334c      	adds	r3, #76	@ 0x4c
 80043be:	2202      	movs	r2, #2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	e095      	b.n	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	334d      	adds	r3, #77	@ 0x4d
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d114      	bne.n	8004404 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	334d      	adds	r3, #77	@ 0x4d
 80043ea:	2202      	movs	r2, #2
 80043ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	334c      	adds	r3, #76	@ 0x4c
 80043fe:	2205      	movs	r2, #5
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e075      	b.n	80044f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	334d      	adds	r3, #77	@ 0x4d
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b07      	cmp	r3, #7
 8004418:	d00a      	beq.n	8004430 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	334d      	adds	r3, #77	@ 0x4d
 800442a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800442c:	2b09      	cmp	r3, #9
 800442e:	d170      	bne.n	8004512 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	334d      	adds	r3, #77	@ 0x4d
 8004440:	2202      	movs	r2, #2
 8004442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3344      	adds	r3, #68	@ 0x44
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4403      	add	r3, r0
 8004464:	3344      	adds	r3, #68	@ 0x44
 8004466:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3344      	adds	r3, #68	@ 0x44
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d914      	bls.n	80044a8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3344      	adds	r3, #68	@ 0x44
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	334c      	adds	r3, #76	@ 0x4c
 80044a2:	2204      	movs	r2, #4
 80044a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044a6:	e022      	b.n	80044ee <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	334c      	adds	r3, #76	@ 0x4c
 80044b8:	2202      	movs	r2, #2
 80044ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e8:	461a      	mov	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334c      	adds	r3, #76	@ 0x4c
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f009 fbca 	bl	800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800450c:	e002      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004512:	bf00      	nop
  }
}
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b08a      	sub	sp, #40	@ 0x28
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	0c5b      	lsrs	r3, r3, #17
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800454e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d004      	beq.n	8004560 <HCD_RXQLVL_IRQHandler+0x46>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b05      	cmp	r3, #5
 800455a:	f000 80b6 	beq.w	80046ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800455e:	e0b7      	b.n	80046d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80b3 	beq.w	80046ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	332c      	adds	r3, #44	@ 0x2c
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80a7 	beq.w	80046ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3338      	adds	r3, #56	@ 0x38
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	18d1      	adds	r1, r2, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4403      	add	r3, r0
 80045a4:	3334      	adds	r3, #52	@ 0x34
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4299      	cmp	r1, r3
 80045aa:	f200 8083 	bhi.w	80046b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	332c      	adds	r3, #44	@ 0x2c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	b292      	uxth	r2, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	f002 fd62 	bl	8007092 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	332c      	adds	r3, #44	@ 0x2c
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	18d1      	adds	r1, r2, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4403      	add	r3, r0
 80045f2:	332c      	adds	r3, #44	@ 0x2c
 80045f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3338      	adds	r3, #56	@ 0x38
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	18d1      	adds	r1, r2, r3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4403      	add	r3, r0
 800461a:	3338      	adds	r3, #56	@ 0x38
 800461c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	4413      	add	r3, r2
 8004626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	0cdb      	lsrs	r3, r3, #19
 800462e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004632:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	3328      	adds	r3, #40	@ 0x28
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4293      	cmp	r3, r2
 800464c:	d13f      	bne.n	80046ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d03c      	beq.n	80046ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800466a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004672:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	333c      	adds	r3, #60	@ 0x3c
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f083 0301 	eor.w	r3, r3, #1
 800469c:	b2d8      	uxtb	r0, r3
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	333c      	adds	r3, #60	@ 0x3c
 80046ae:	4602      	mov	r2, r0
 80046b0:	701a      	strb	r2, [r3, #0]
      break;
 80046b2:	e00c      	b.n	80046ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	334c      	adds	r3, #76	@ 0x4c
 80046c4:	2204      	movs	r2, #4
 80046c6:	701a      	strb	r2, [r3, #0]
      break;
 80046c8:	e001      	b.n	80046ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80046ce:	bf00      	nop
  }
}
 80046d0:	bf00      	nop
 80046d2:	3728      	adds	r7, #40	@ 0x28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004704:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d10b      	bne.n	8004728 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b01      	cmp	r3, #1
 8004718:	d102      	bne.n	8004720 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f009 faa4 	bl	800dc68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b08      	cmp	r3, #8
 8004730:	d132      	bne.n	8004798 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f043 0308 	orr.w	r3, r3, #8
 8004738:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b04      	cmp	r3, #4
 8004742:	d126      	bne.n	8004792 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7a5b      	ldrb	r3, [r3, #9]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d113      	bne.n	8004774 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004756:	d106      	bne.n	8004766 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2102      	movs	r1, #2
 800475e:	4618      	mov	r0, r3
 8004760:	f002 fe10 	bl	8007384 <USB_InitFSLSPClkSel>
 8004764:	e011      	b.n	800478a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f002 fe09 	bl	8007384 <USB_InitFSLSPClkSel>
 8004772:	e00a      	b.n	800478a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	79db      	ldrb	r3, [r3, #7]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d106      	bne.n	800478a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004782:	461a      	mov	r2, r3
 8004784:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004788:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f009 fa96 	bl	800dcbc <HAL_HCD_PortEnabled_Callback>
 8004790:	e002      	b.n	8004798 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f009 faa0 	bl	800dcd8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d103      	bne.n	80047aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f043 0320 	orr.w	r3, r3, #32
 80047a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6013      	str	r3, [r2, #0]
}
 80047b6:	bf00      	nop
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e12b      	b.n	8004a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc fff0 	bl	80017cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	@ 0x24
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004824:	f002 f8d6 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
 8004828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a81      	ldr	r2, [pc, #516]	@ (8004a34 <HAL_I2C_Init+0x274>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d807      	bhi.n	8004844 <HAL_I2C_Init+0x84>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a80      	ldr	r2, [pc, #512]	@ (8004a38 <HAL_I2C_Init+0x278>)
 8004838:	4293      	cmp	r3, r2
 800483a:	bf94      	ite	ls
 800483c:	2301      	movls	r3, #1
 800483e:	2300      	movhi	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e006      	b.n	8004852 <HAL_I2C_Init+0x92>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a7d      	ldr	r2, [pc, #500]	@ (8004a3c <HAL_I2C_Init+0x27c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	bf94      	ite	ls
 800484c:	2301      	movls	r3, #1
 800484e:	2300      	movhi	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0e7      	b.n	8004a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a78      	ldr	r2, [pc, #480]	@ (8004a40 <HAL_I2C_Init+0x280>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	0c9b      	lsrs	r3, r3, #18
 8004864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4a6a      	ldr	r2, [pc, #424]	@ (8004a34 <HAL_I2C_Init+0x274>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d802      	bhi.n	8004894 <HAL_I2C_Init+0xd4>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3301      	adds	r3, #1
 8004892:	e009      	b.n	80048a8 <HAL_I2C_Init+0xe8>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	4a69      	ldr	r2, [pc, #420]	@ (8004a44 <HAL_I2C_Init+0x284>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	3301      	adds	r3, #1
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	495c      	ldr	r1, [pc, #368]	@ (8004a34 <HAL_I2C_Init+0x274>)
 80048c4:	428b      	cmp	r3, r1
 80048c6:	d819      	bhi.n	80048fc <HAL_I2C_Init+0x13c>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1e59      	subs	r1, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d6:	1c59      	adds	r1, r3, #1
 80048d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048dc:	400b      	ands	r3, r1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_I2C_Init+0x138>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1e59      	subs	r1, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f0:	3301      	adds	r3, #1
 80048f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f6:	e051      	b.n	800499c <HAL_I2C_Init+0x1dc>
 80048f8:	2304      	movs	r3, #4
 80048fa:	e04f      	b.n	800499c <HAL_I2C_Init+0x1dc>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d111      	bne.n	8004928 <HAL_I2C_Init+0x168>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1e58      	subs	r0, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6859      	ldr	r1, [r3, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	440b      	add	r3, r1
 8004912:	fbb0 f3f3 	udiv	r3, r0, r3
 8004916:	3301      	adds	r3, #1
 8004918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e012      	b.n	800494e <HAL_I2C_Init+0x18e>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1e58      	subs	r0, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6859      	ldr	r1, [r3, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	0099      	lsls	r1, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	fbb0 f3f3 	udiv	r3, r0, r3
 800493e:	3301      	adds	r3, #1
 8004940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Init+0x196>
 8004952:	2301      	movs	r3, #1
 8004954:	e022      	b.n	800499c <HAL_I2C_Init+0x1dc>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10e      	bne.n	800497c <HAL_I2C_Init+0x1bc>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1e58      	subs	r0, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	440b      	add	r3, r1
 800496c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004970:	3301      	adds	r3, #1
 8004972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800497a:	e00f      	b.n	800499c <HAL_I2C_Init+0x1dc>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1e58      	subs	r0, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	0099      	lsls	r1, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004992:	3301      	adds	r3, #1
 8004994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	6809      	ldr	r1, [r1, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6911      	ldr	r1, [r2, #16]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68d2      	ldr	r2, [r2, #12]
 80049d6:	4311      	orrs	r1, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	430b      	orrs	r3, r1
 80049de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	000186a0 	.word	0x000186a0
 8004a38:	001e847f 	.word	0x001e847f
 8004a3c:	003d08ff 	.word	0x003d08ff
 8004a40:	431bde83 	.word	0x431bde83
 8004a44:	10624dd3 	.word	0x10624dd3

08004a48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	461a      	mov	r2, r3
 8004a54:	460b      	mov	r3, r1
 8004a56:	817b      	strh	r3, [r7, #10]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a5c:	f7fd fa9c 	bl	8001f98 <HAL_GetTick>
 8004a60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	f040 80e0 	bne.w	8004c30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2319      	movs	r3, #25
 8004a76:	2201      	movs	r2, #1
 8004a78:	4970      	ldr	r1, [pc, #448]	@ (8004c3c <HAL_I2C_Master_Transmit+0x1f4>)
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fc64 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0d3      	b.n	8004c32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_I2C_Master_Transmit+0x50>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e0cc      	b.n	8004c32 <HAL_I2C_Master_Transmit+0x1ea>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d007      	beq.n	8004abe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0201 	orr.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004acc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2221      	movs	r2, #33	@ 0x21
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	893a      	ldrh	r2, [r7, #8]
 8004aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a50      	ldr	r2, [pc, #320]	@ (8004c40 <HAL_I2C_Master_Transmit+0x1f8>)
 8004afe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b00:	8979      	ldrh	r1, [r7, #10]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 face 	bl	80050a8 <I2C_MasterRequestWrite>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e08d      	b.n	8004c32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b2c:	e066      	b.n	8004bfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	6a39      	ldr	r1, [r7, #32]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fd22 	bl	800557c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d107      	bne.n	8004b56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e06b      	b.n	8004c32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d11b      	bne.n	8004bd0 <HAL_I2C_Master_Transmit+0x188>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d017      	beq.n	8004bd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	6a39      	ldr	r1, [r7, #32]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fd19 	bl	800560c <I2C_WaitOnBTFFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d107      	bne.n	8004bf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e01a      	b.n	8004c32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d194      	bne.n	8004b2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	00100002 	.word	0x00100002
 8004c40:	ffff0000 	.word	0xffff0000

08004c44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08c      	sub	sp, #48	@ 0x30
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	607a      	str	r2, [r7, #4]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	460b      	mov	r3, r1
 8004c52:	817b      	strh	r3, [r7, #10]
 8004c54:	4613      	mov	r3, r2
 8004c56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c58:	f7fd f99e 	bl	8001f98 <HAL_GetTick>
 8004c5c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	f040 8217 	bne.w	800509a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2319      	movs	r3, #25
 8004c72:	2201      	movs	r2, #1
 8004c74:	497c      	ldr	r1, [pc, #496]	@ (8004e68 <HAL_I2C_Master_Receive+0x224>)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fb66 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
 8004c84:	e20a      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_I2C_Master_Receive+0x50>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e203      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d007      	beq.n	8004cba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2222      	movs	r2, #34	@ 0x22
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	893a      	ldrh	r2, [r7, #8]
 8004cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8004e6c <HAL_I2C_Master_Receive+0x228>)
 8004cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cfc:	8979      	ldrh	r1, [r7, #10]
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fa52 	bl	80051ac <I2C_MasterRequestRead>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e1c4      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d113      	bne.n	8004d42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e198      	b.n	8005074 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d11b      	bne.n	8004d82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e178      	b.n	8005074 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d11b      	bne.n	8004dc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	e158      	b.n	8005074 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004de8:	e144      	b.n	8005074 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	f200 80f1 	bhi.w	8004fd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d123      	bne.n	8004e44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fc4b 	bl	800569c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e145      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e42:	e117      	b.n	8005074 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d14e      	bne.n	8004eea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	2200      	movs	r2, #0
 8004e54:	4906      	ldr	r1, [pc, #24]	@ (8004e70 <HAL_I2C_Master_Receive+0x22c>)
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fa76 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e11a      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
 8004e66:	bf00      	nop
 8004e68:	00100002 	.word	0x00100002
 8004e6c:	ffff0000 	.word	0xffff0000
 8004e70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ee8:	e0c4      	b.n	8005074 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	496c      	ldr	r1, [pc, #432]	@ (80050a4 <HAL_I2C_Master_Receive+0x460>)
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fa27 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0cb      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4955      	ldr	r1, [pc, #340]	@ (80050a4 <HAL_I2C_Master_Receive+0x460>)
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f9f9 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e09d      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fd4:	e04e      	b.n	8005074 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fb5e 	bl	800569c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e058      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b04      	cmp	r3, #4
 8005028:	d124      	bne.n	8005074 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502e:	2b03      	cmp	r3, #3
 8005030:	d107      	bne.n	8005042 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005040:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005078:	2b00      	cmp	r3, #0
 800507a:	f47f aeb6 	bne.w	8004dea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800509a:	2302      	movs	r3, #2
  }
}
 800509c:	4618      	mov	r0, r3
 800509e:	3728      	adds	r7, #40	@ 0x28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	00010004 	.word	0x00010004

080050a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	460b      	mov	r3, r1
 80050b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d006      	beq.n	80050d2 <I2C_MasterRequestWrite+0x2a>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d003      	beq.n	80050d2 <I2C_MasterRequestWrite+0x2a>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050d0:	d108      	bne.n	80050e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e00b      	b.n	80050fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e8:	2b12      	cmp	r3, #18
 80050ea:	d107      	bne.n	80050fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f91d 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005122:	d103      	bne.n	800512c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800512a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e035      	b.n	800519c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005138:	d108      	bne.n	800514c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005148:	611a      	str	r2, [r3, #16]
 800514a:	e01b      	b.n	8005184 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800514c:	897b      	ldrh	r3, [r7, #10]
 800514e:	11db      	asrs	r3, r3, #7
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f003 0306 	and.w	r3, r3, #6
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f063 030f 	orn	r3, r3, #15
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	490e      	ldr	r1, [pc, #56]	@ (80051a4 <I2C_MasterRequestWrite+0xfc>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f966 	bl	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e010      	b.n	800519c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800517a:	897b      	ldrh	r3, [r7, #10]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4907      	ldr	r1, [pc, #28]	@ (80051a8 <I2C_MasterRequestWrite+0x100>)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f956 	bl	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	00010008 	.word	0x00010008
 80051a8:	00010002 	.word	0x00010002

080051ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	607a      	str	r2, [r7, #4]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	460b      	mov	r3, r1
 80051ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d006      	beq.n	80051e6 <I2C_MasterRequestRead+0x3a>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d003      	beq.n	80051e6 <I2C_MasterRequestRead+0x3a>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051e4:	d108      	bne.n	80051f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e00b      	b.n	8005210 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	2b11      	cmp	r3, #17
 80051fe:	d107      	bne.n	8005210 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800520e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f893 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005236:	d103      	bne.n	8005240 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800523e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e079      	b.n	8005338 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800524c:	d108      	bne.n	8005260 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800524e:	897b      	ldrh	r3, [r7, #10]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]
 800525e:	e05f      	b.n	8005320 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005260:	897b      	ldrh	r3, [r7, #10]
 8005262:	11db      	asrs	r3, r3, #7
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0306 	and.w	r3, r3, #6
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f063 030f 	orn	r3, r3, #15
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4930      	ldr	r1, [pc, #192]	@ (8005340 <I2C_MasterRequestRead+0x194>)
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f8dc 	bl	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e054      	b.n	8005338 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800528e:	897b      	ldrh	r3, [r7, #10]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4929      	ldr	r1, [pc, #164]	@ (8005344 <I2C_MasterRequestRead+0x198>)
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f8cc 	bl	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e044      	b.n	8005338 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f831 	bl	8005348 <I2C_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00d      	beq.n	8005308 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052fa:	d103      	bne.n	8005304 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e017      	b.n	8005338 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005308:	897b      	ldrh	r3, [r7, #10]
 800530a:	11db      	asrs	r3, r3, #7
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 0306 	and.w	r3, r3, #6
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f063 030e 	orn	r3, r3, #14
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	4907      	ldr	r1, [pc, #28]	@ (8005344 <I2C_MasterRequestRead+0x198>)
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f888 	bl	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	00010008 	.word	0x00010008
 8005344:	00010002 	.word	0x00010002

08005348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005358:	e048      	b.n	80053ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d044      	beq.n	80053ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fc fe19 	bl	8001f98 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d139      	bne.n	80053ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	d10d      	bne.n	800539e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	43da      	mvns	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	e00c      	b.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	43da      	mvns	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d116      	bne.n	80053ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e023      	b.n	8005434 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d10d      	bne.n	8005412 <I2C_WaitOnFlagUntilTimeout+0xca>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	43da      	mvns	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4013      	ands	r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	e00c      	b.n	800542c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	43da      	mvns	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4013      	ands	r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	461a      	mov	r2, r3
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	429a      	cmp	r2, r3
 8005430:	d093      	beq.n	800535a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544a:	e071      	b.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545a:	d123      	bne.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800546a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	f043 0204 	orr.w	r2, r3, #4
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e067      	b.n	8005574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d041      	beq.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ac:	f7fc fd74 	bl	8001f98 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d302      	bcc.n	80054c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d136      	bne.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10c      	bne.n	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	43da      	mvns	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e00b      	b.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	43da      	mvns	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d016      	beq.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551c:	f043 0220 	orr.w	r2, r3, #32
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e021      	b.n	8005574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	0c1b      	lsrs	r3, r3, #16
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10c      	bne.n	8005554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	43da      	mvns	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4013      	ands	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e00b      	b.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	43da      	mvns	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4013      	ands	r3, r2
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	bf14      	ite	ne
 8005566:	2301      	movne	r3, #1
 8005568:	2300      	moveq	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	f47f af6d 	bne.w	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005588:	e034      	b.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f8e3 	bl	8005756 <I2C_IsAcknowledgeFailed>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e034      	b.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d028      	beq.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fc fcf9 	bl	8001f98 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11d      	bne.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b80      	cmp	r3, #128	@ 0x80
 80055c4:	d016      	beq.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e007      	b.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fe:	2b80      	cmp	r3, #128	@ 0x80
 8005600:	d1c3      	bne.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005618:	e034      	b.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f89b 	bl	8005756 <I2C_IsAcknowledgeFailed>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e034      	b.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d028      	beq.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fc fcb1 	bl	8001f98 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11d      	bne.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d016      	beq.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005670:	f043 0220 	orr.w	r2, r3, #32
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e007      	b.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d1c3      	bne.n	800561a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056a8:	e049      	b.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d119      	bne.n	80056ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0210 	mvn.w	r2, #16
 80056c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e030      	b.n	800574e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ec:	f7fc fc54 	bl	8001f98 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11d      	bne.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	d016      	beq.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e007      	b.n	800574e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	d1ae      	bne.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800576c:	d11b      	bne.n	80057a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005776:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	f043 0204 	orr.w	r2, r3, #4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e128      	b.n	8005a18 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a90      	ldr	r2, [pc, #576]	@ (8005a20 <HAL_I2S_Init+0x26c>)
 80057de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fc f83b 	bl	800185c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80057fc:	f023 030f 	bic.w	r3, r3, #15
 8005800:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2202      	movs	r2, #2
 8005808:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d060      	beq.n	80058d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d102      	bne.n	8005820 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800581a:	2310      	movs	r3, #16
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e001      	b.n	8005824 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005820:	2320      	movs	r3, #32
 8005822:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b20      	cmp	r3, #32
 800582a:	d802      	bhi.n	8005832 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005832:	2001      	movs	r0, #1
 8005834:	f001 f9d2 	bl	8006bdc <HAL_RCCEx_GetPeriphCLKFreq>
 8005838:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005842:	d125      	bne.n	8005890 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d010      	beq.n	800586e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	fbb2 f2f3 	udiv	r2, r2, r3
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	461a      	mov	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	3305      	adds	r3, #5
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	e01f      	b.n	80058ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	fbb2 f2f3 	udiv	r2, r2, r3
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	3305      	adds	r3, #5
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	e00e      	b.n	80058ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	fbb2 f2f3 	udiv	r2, r2, r3
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	461a      	mov	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058aa:	3305      	adds	r3, #5
 80058ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4a5c      	ldr	r2, [pc, #368]	@ (8005a24 <HAL_I2S_Init+0x270>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	08db      	lsrs	r3, r3, #3
 80058b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e003      	b.n	80058dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80058d4:	2302      	movs	r3, #2
 80058d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d902      	bls.n	80058e8 <HAL_I2S_Init+0x134>
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	2bff      	cmp	r3, #255	@ 0xff
 80058e6:	d907      	bls.n	80058f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ec:	f043 0210 	orr.w	r2, r3, #16
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e08f      	b.n	8005a18 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	ea42 0103 	orr.w	r1, r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	430a      	orrs	r2, r1
 800590a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005916:	f023 030f 	bic.w	r3, r3, #15
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6851      	ldr	r1, [r2, #4]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6892      	ldr	r2, [r2, #8]
 8005922:	4311      	orrs	r1, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68d2      	ldr	r2, [r2, #12]
 8005928:	4311      	orrs	r1, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6992      	ldr	r2, [r2, #24]
 800592e:	430a      	orrs	r2, r1
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800593a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d161      	bne.n	8005a08 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a38      	ldr	r2, [pc, #224]	@ (8005a28 <HAL_I2S_Init+0x274>)
 8005948:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a37      	ldr	r2, [pc, #220]	@ (8005a2c <HAL_I2S_Init+0x278>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d101      	bne.n	8005958 <HAL_I2S_Init+0x1a4>
 8005954:	4b36      	ldr	r3, [pc, #216]	@ (8005a30 <HAL_I2S_Init+0x27c>)
 8005956:	e001      	b.n	800595c <HAL_I2S_Init+0x1a8>
 8005958:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	4932      	ldr	r1, [pc, #200]	@ (8005a2c <HAL_I2S_Init+0x278>)
 8005964:	428a      	cmp	r2, r1
 8005966:	d101      	bne.n	800596c <HAL_I2S_Init+0x1b8>
 8005968:	4a31      	ldr	r2, [pc, #196]	@ (8005a30 <HAL_I2S_Init+0x27c>)
 800596a:	e001      	b.n	8005970 <HAL_I2S_Init+0x1bc>
 800596c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005970:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005974:	f023 030f 	bic.w	r3, r3, #15
 8005978:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a2c <HAL_I2S_Init+0x278>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d101      	bne.n	8005988 <HAL_I2S_Init+0x1d4>
 8005984:	4b2a      	ldr	r3, [pc, #168]	@ (8005a30 <HAL_I2S_Init+0x27c>)
 8005986:	e001      	b.n	800598c <HAL_I2S_Init+0x1d8>
 8005988:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800598c:	2202      	movs	r2, #2
 800598e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a25      	ldr	r2, [pc, #148]	@ (8005a2c <HAL_I2S_Init+0x278>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <HAL_I2S_Init+0x1ea>
 800599a:	4b25      	ldr	r3, [pc, #148]	@ (8005a30 <HAL_I2S_Init+0x27c>)
 800599c:	e001      	b.n	80059a2 <HAL_I2S_Init+0x1ee>
 800599e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ae:	d003      	beq.n	80059b8 <HAL_I2S_Init+0x204>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80059b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e001      	b.n	80059c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80059ce:	4313      	orrs	r3, r2
 80059d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80059d8:	4313      	orrs	r3, r2
 80059da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80059e2:	4313      	orrs	r3, r2
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	897b      	ldrh	r3, [r7, #10]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80059f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a0d      	ldr	r2, [pc, #52]	@ (8005a2c <HAL_I2S_Init+0x278>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <HAL_I2S_Init+0x24c>
 80059fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <HAL_I2S_Init+0x27c>)
 80059fe:	e001      	b.n	8005a04 <HAL_I2S_Init+0x250>
 8005a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a04:	897a      	ldrh	r2, [r7, #10]
 8005a06:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	08005b2b 	.word	0x08005b2b
 8005a24:	cccccccd 	.word	0xcccccccd
 8005a28:	08005c41 	.word	0x08005c41
 8005a2c:	40003800 	.word	0x40003800
 8005a30:	40003400 	.word	0x40003400

08005a34 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	1c9a      	adds	r2, r3, #2
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10e      	bne.n	8005ac4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ab4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff ffb8 	bl	8005a34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	1c9a      	adds	r2, r3, #2
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10e      	bne.n	8005b22 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b12:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ff93 	bl	8005a48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d13a      	bne.n	8005bbc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d109      	bne.n	8005b64 <I2S_IRQHandler+0x3a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5a:	2b40      	cmp	r3, #64	@ 0x40
 8005b5c:	d102      	bne.n	8005b64 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff ffb4 	bl	8005acc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6a:	2b40      	cmp	r3, #64	@ 0x40
 8005b6c:	d126      	bne.n	8005bbc <I2S_IRQHandler+0x92>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d11f      	bne.n	8005bbc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	f043 0202 	orr.w	r2, r3, #2
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff ff50 	bl	8005a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d136      	bne.n	8005c36 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d109      	bne.n	8005be6 <I2S_IRQHandler+0xbc>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bdc:	2b80      	cmp	r3, #128	@ 0x80
 8005bde:	d102      	bne.n	8005be6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff ff45 	bl	8005a70 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d122      	bne.n	8005c36 <I2S_IRQHandler+0x10c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d11b      	bne.n	8005c36 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c0c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c28:	f043 0204 	orr.w	r2, r3, #4
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ff13 	bl	8005a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c36:	bf00      	nop
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a92      	ldr	r2, [pc, #584]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005c5a:	4b92      	ldr	r3, [pc, #584]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c5c:	e001      	b.n	8005c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005c5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a8b      	ldr	r2, [pc, #556]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005c78:	4b8a      	ldr	r3, [pc, #552]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c7a:	e001      	b.n	8005c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c8c:	d004      	beq.n	8005c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f040 8099 	bne.w	8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d107      	bne.n	8005cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f925 	bl	8005efc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d107      	bne.n	8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f9c8 	bl	800605c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d13a      	bne.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d035      	beq.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a6e      	ldr	r2, [pc, #440]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d101      	bne.n	8005cee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005cea:	4b6e      	ldr	r3, [pc, #440]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cec:	e001      	b.n	8005cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005cee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4969      	ldr	r1, [pc, #420]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cfa:	428b      	cmp	r3, r1
 8005cfc:	d101      	bne.n	8005d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005cfe:	4b69      	ldr	r3, [pc, #420]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d00:	e001      	b.n	8005d06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005d02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3e:	f043 0202 	orr.w	r2, r3, #2
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fe88 	bl	8005a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	f040 80c3 	bne.w	8005ede <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80bd 	beq.w	8005ede <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a49      	ldr	r2, [pc, #292]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005d7e:	4b49      	ldr	r3, [pc, #292]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d80:	e001      	b.n	8005d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005d82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4944      	ldr	r1, [pc, #272]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d8e:	428b      	cmp	r3, r1
 8005d90:	d101      	bne.n	8005d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005d92:	4b44      	ldr	r3, [pc, #272]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d94:	e001      	b.n	8005d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005d96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005da0:	2300      	movs	r3, #0
 8005da2:	60bb      	str	r3, [r7, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	f043 0204 	orr.w	r2, r3, #4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fe4a 	bl	8005a5c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dc8:	e089      	b.n	8005ede <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d107      	bne.n	8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8be 	bl	8005f60 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d107      	bne.n	8005dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f8fd 	bl	8005ff8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d12f      	bne.n	8005e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d02a      	beq.n	8005e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d101      	bne.n	8005e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e2e:	e001      	b.n	8005e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4919      	ldr	r1, [pc, #100]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e3c:	428b      	cmp	r3, r1
 8005e3e:	d101      	bne.n	8005e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005e40:	4b18      	ldr	r3, [pc, #96]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e42:	e001      	b.n	8005e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005e44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5a:	f043 0202 	orr.w	r2, r3, #2
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff fdfa 	bl	8005a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d136      	bne.n	8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d031      	beq.n	8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a07      	ldr	r2, [pc, #28]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005e86:	4b07      	ldr	r3, [pc, #28]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e88:	e001      	b.n	8005e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4902      	ldr	r1, [pc, #8]	@ (8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e96:	428b      	cmp	r3, r1
 8005e98:	d106      	bne.n	8005ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005e9a:	4b02      	ldr	r3, [pc, #8]	@ (8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e9c:	e006      	b.n	8005eac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005e9e:	bf00      	nop
 8005ea0:	40003800 	.word	0x40003800
 8005ea4:	40003400 	.word	0x40003400
 8005ea8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005eac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005eb0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ec0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	f043 0204 	orr.w	r2, r3, #4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fdc0 	bl	8005a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005edc:	e000      	b.n	8005ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ede:	bf00      	nop
}
 8005ee0:	bf00      	nop
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	1c99      	adds	r1, r3, #2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005f0e:	881a      	ldrh	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d113      	bne.n	8005f56 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ffc9 	bl	8005ee8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6c:	1c99      	adds	r1, r3, #2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6251      	str	r1, [r2, #36]	@ 0x24
 8005f72:	8819      	ldrh	r1, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff0 <I2SEx_TxISR_I2SExt+0x90>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d101      	bne.n	8005f82 <I2SEx_TxISR_I2SExt+0x22>
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff4 <I2SEx_TxISR_I2SExt+0x94>)
 8005f80:	e001      	b.n	8005f86 <I2SEx_TxISR_I2SExt+0x26>
 8005f82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f86:	460a      	mov	r2, r1
 8005f88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d121      	bne.n	8005fe6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a12      	ldr	r2, [pc, #72]	@ (8005ff0 <I2SEx_TxISR_I2SExt+0x90>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d101      	bne.n	8005fb0 <I2SEx_TxISR_I2SExt+0x50>
 8005fac:	4b11      	ldr	r3, [pc, #68]	@ (8005ff4 <I2SEx_TxISR_I2SExt+0x94>)
 8005fae:	e001      	b.n	8005fb4 <I2SEx_TxISR_I2SExt+0x54>
 8005fb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	490d      	ldr	r1, [pc, #52]	@ (8005ff0 <I2SEx_TxISR_I2SExt+0x90>)
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	d101      	bne.n	8005fc4 <I2SEx_TxISR_I2SExt+0x64>
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <I2SEx_TxISR_I2SExt+0x94>)
 8005fc2:	e001      	b.n	8005fc8 <I2SEx_TxISR_I2SExt+0x68>
 8005fc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fc8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff81 	bl	8005ee8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40003800 	.word	0x40003800
 8005ff4:	40003400 	.word	0x40003400

08005ff8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68d8      	ldr	r0, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600a:	1c99      	adds	r1, r3, #2
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006010:	b282      	uxth	r2, r0
 8006012:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d113      	bne.n	8006054 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800603a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff4a 	bl	8005ee8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a20      	ldr	r2, [pc, #128]	@ (80060ec <I2SEx_RxISR_I2SExt+0x90>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <I2SEx_RxISR_I2SExt+0x16>
 800606e:	4b20      	ldr	r3, [pc, #128]	@ (80060f0 <I2SEx_RxISR_I2SExt+0x94>)
 8006070:	e001      	b.n	8006076 <I2SEx_RxISR_I2SExt+0x1a>
 8006072:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006076:	68d8      	ldr	r0, [r3, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607c:	1c99      	adds	r1, r3, #2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006082:	b282      	uxth	r2, r0
 8006084:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d121      	bne.n	80060e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a12      	ldr	r2, [pc, #72]	@ (80060ec <I2SEx_RxISR_I2SExt+0x90>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d101      	bne.n	80060ac <I2SEx_RxISR_I2SExt+0x50>
 80060a8:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <I2SEx_RxISR_I2SExt+0x94>)
 80060aa:	e001      	b.n	80060b0 <I2SEx_RxISR_I2SExt+0x54>
 80060ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	490d      	ldr	r1, [pc, #52]	@ (80060ec <I2SEx_RxISR_I2SExt+0x90>)
 80060b8:	428b      	cmp	r3, r1
 80060ba:	d101      	bne.n	80060c0 <I2SEx_RxISR_I2SExt+0x64>
 80060bc:	4b0c      	ldr	r3, [pc, #48]	@ (80060f0 <I2SEx_RxISR_I2SExt+0x94>)
 80060be:	e001      	b.n	80060c4 <I2SEx_RxISR_I2SExt+0x68>
 80060c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff ff03 	bl	8005ee8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40003800 	.word	0x40003800
 80060f0:	40003400 	.word	0x40003400

080060f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e267      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d075      	beq.n	80061fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006112:	4b88      	ldr	r3, [pc, #544]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b04      	cmp	r3, #4
 800611c:	d00c      	beq.n	8006138 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800611e:	4b85      	ldr	r3, [pc, #532]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006126:	2b08      	cmp	r3, #8
 8006128:	d112      	bne.n	8006150 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800612a:	4b82      	ldr	r3, [pc, #520]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006132:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006136:	d10b      	bne.n	8006150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006138:	4b7e      	ldr	r3, [pc, #504]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d05b      	beq.n	80061fc <HAL_RCC_OscConfig+0x108>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d157      	bne.n	80061fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e242      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006158:	d106      	bne.n	8006168 <HAL_RCC_OscConfig+0x74>
 800615a:	4b76      	ldr	r3, [pc, #472]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a75      	ldr	r2, [pc, #468]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e01d      	b.n	80061a4 <HAL_RCC_OscConfig+0xb0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006170:	d10c      	bne.n	800618c <HAL_RCC_OscConfig+0x98>
 8006172:	4b70      	ldr	r3, [pc, #448]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a6f      	ldr	r2, [pc, #444]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	4b6d      	ldr	r3, [pc, #436]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6c      	ldr	r2, [pc, #432]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	e00b      	b.n	80061a4 <HAL_RCC_OscConfig+0xb0>
 800618c:	4b69      	ldr	r3, [pc, #420]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a68      	ldr	r2, [pc, #416]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	4b66      	ldr	r3, [pc, #408]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a65      	ldr	r2, [pc, #404]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 800619e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d013      	beq.n	80061d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7fb fef4 	bl	8001f98 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b4:	f7fb fef0 	bl	8001f98 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b64      	cmp	r3, #100	@ 0x64
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e207      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f0      	beq.n	80061b4 <HAL_RCC_OscConfig+0xc0>
 80061d2:	e014      	b.n	80061fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d4:	f7fb fee0 	bl	8001f98 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061dc:	f7fb fedc 	bl	8001f98 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b64      	cmp	r3, #100	@ 0x64
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e1f3      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ee:	4b51      	ldr	r3, [pc, #324]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0xe8>
 80061fa:	e000      	b.n	80061fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d063      	beq.n	80062d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800620a:	4b4a      	ldr	r3, [pc, #296]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 030c 	and.w	r3, r3, #12
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006216:	4b47      	ldr	r3, [pc, #284]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800621e:	2b08      	cmp	r3, #8
 8006220:	d11c      	bne.n	800625c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006222:	4b44      	ldr	r3, [pc, #272]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d116      	bne.n	800625c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800622e:	4b41      	ldr	r3, [pc, #260]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_RCC_OscConfig+0x152>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d001      	beq.n	8006246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e1c7      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006246:	4b3b      	ldr	r3, [pc, #236]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	4937      	ldr	r1, [pc, #220]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800625a:	e03a      	b.n	80062d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d020      	beq.n	80062a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006264:	4b34      	ldr	r3, [pc, #208]	@ (8006338 <HAL_RCC_OscConfig+0x244>)
 8006266:	2201      	movs	r2, #1
 8006268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626a:	f7fb fe95 	bl	8001f98 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006272:	f7fb fe91 	bl	8001f98 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e1a8      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006284:	4b2b      	ldr	r3, [pc, #172]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006290:	4b28      	ldr	r3, [pc, #160]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4925      	ldr	r1, [pc, #148]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	600b      	str	r3, [r1, #0]
 80062a4:	e015      	b.n	80062d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062a6:	4b24      	ldr	r3, [pc, #144]	@ (8006338 <HAL_RCC_OscConfig+0x244>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fb fe74 	bl	8001f98 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062b4:	f7fb fe70 	bl	8001f98 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e187      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d036      	beq.n	800634c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d016      	beq.n	8006314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062e6:	4b15      	ldr	r3, [pc, #84]	@ (800633c <HAL_RCC_OscConfig+0x248>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ec:	f7fb fe54 	bl	8001f98 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f4:	f7fb fe50 	bl	8001f98 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e167      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006306:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <HAL_RCC_OscConfig+0x240>)
 8006308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f0      	beq.n	80062f4 <HAL_RCC_OscConfig+0x200>
 8006312:	e01b      	b.n	800634c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006314:	4b09      	ldr	r3, [pc, #36]	@ (800633c <HAL_RCC_OscConfig+0x248>)
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800631a:	f7fb fe3d 	bl	8001f98 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006320:	e00e      	b.n	8006340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006322:	f7fb fe39 	bl	8001f98 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d907      	bls.n	8006340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e150      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
 8006334:	40023800 	.word	0x40023800
 8006338:	42470000 	.word	0x42470000
 800633c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006340:	4b88      	ldr	r3, [pc, #544]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1ea      	bne.n	8006322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8097 	beq.w	8006488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800635a:	2300      	movs	r3, #0
 800635c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800635e:	4b81      	ldr	r3, [pc, #516]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	4b7d      	ldr	r3, [pc, #500]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006372:	4a7c      	ldr	r2, [pc, #496]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006378:	6413      	str	r3, [r2, #64]	@ 0x40
 800637a:	4b7a      	ldr	r3, [pc, #488]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006382:	60bb      	str	r3, [r7, #8]
 8006384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006386:	2301      	movs	r3, #1
 8006388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638a:	4b77      	ldr	r3, [pc, #476]	@ (8006568 <HAL_RCC_OscConfig+0x474>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006392:	2b00      	cmp	r3, #0
 8006394:	d118      	bne.n	80063c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006396:	4b74      	ldr	r3, [pc, #464]	@ (8006568 <HAL_RCC_OscConfig+0x474>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a73      	ldr	r2, [pc, #460]	@ (8006568 <HAL_RCC_OscConfig+0x474>)
 800639c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063a2:	f7fb fdf9 	bl	8001f98 <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063aa:	f7fb fdf5 	bl	8001f98 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e10c      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006568 <HAL_RCC_OscConfig+0x474>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0f0      	beq.n	80063aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d106      	bne.n	80063de <HAL_RCC_OscConfig+0x2ea>
 80063d0:	4b64      	ldr	r3, [pc, #400]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d4:	4a63      	ldr	r2, [pc, #396]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	6713      	str	r3, [r2, #112]	@ 0x70
 80063dc:	e01c      	b.n	8006418 <HAL_RCC_OscConfig+0x324>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d10c      	bne.n	8006400 <HAL_RCC_OscConfig+0x30c>
 80063e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 80063ec:	f043 0304 	orr.w	r3, r3, #4
 80063f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 80063f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80063fe:	e00b      	b.n	8006418 <HAL_RCC_OscConfig+0x324>
 8006400:	4b58      	ldr	r3, [pc, #352]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006404:	4a57      	ldr	r2, [pc, #348]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	6713      	str	r3, [r2, #112]	@ 0x70
 800640c:	4b55      	ldr	r3, [pc, #340]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	4a54      	ldr	r2, [pc, #336]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006412:	f023 0304 	bic.w	r3, r3, #4
 8006416:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d015      	beq.n	800644c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006420:	f7fb fdba 	bl	8001f98 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006426:	e00a      	b.n	800643e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006428:	f7fb fdb6 	bl	8001f98 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e0cb      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800643e:	4b49      	ldr	r3, [pc, #292]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0ee      	beq.n	8006428 <HAL_RCC_OscConfig+0x334>
 800644a:	e014      	b.n	8006476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800644c:	f7fb fda4 	bl	8001f98 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006452:	e00a      	b.n	800646a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006454:	f7fb fda0 	bl	8001f98 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006462:	4293      	cmp	r3, r2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e0b5      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800646a:	4b3e      	ldr	r3, [pc, #248]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1ee      	bne.n	8006454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d105      	bne.n	8006488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800647c:	4b39      	ldr	r3, [pc, #228]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	4a38      	ldr	r2, [pc, #224]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006486:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80a1 	beq.w	80065d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006492:	4b34      	ldr	r3, [pc, #208]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	2b08      	cmp	r3, #8
 800649c:	d05c      	beq.n	8006558 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d141      	bne.n	800652a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a6:	4b31      	ldr	r3, [pc, #196]	@ (800656c <HAL_RCC_OscConfig+0x478>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7fb fd74 	bl	8001f98 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b4:	f7fb fd70 	bl	8001f98 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e087      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c6:	4b27      	ldr	r3, [pc, #156]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e0:	019b      	lsls	r3, r3, #6
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	3b01      	subs	r3, #1
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	061b      	lsls	r3, r3, #24
 80064f6:	491b      	ldr	r1, [pc, #108]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064fc:	4b1b      	ldr	r3, [pc, #108]	@ (800656c <HAL_RCC_OscConfig+0x478>)
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006502:	f7fb fd49 	bl	8001f98 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800650a:	f7fb fd45 	bl	8001f98 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e05c      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651c:	4b11      	ldr	r3, [pc, #68]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x416>
 8006528:	e054      	b.n	80065d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800652a:	4b10      	ldr	r3, [pc, #64]	@ (800656c <HAL_RCC_OscConfig+0x478>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006530:	f7fb fd32 	bl	8001f98 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006538:	f7fb fd2e 	bl	8001f98 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e045      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800654a:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <HAL_RCC_OscConfig+0x470>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f0      	bne.n	8006538 <HAL_RCC_OscConfig+0x444>
 8006556:	e03d      	b.n	80065d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e038      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
 8006564:	40023800 	.word	0x40023800
 8006568:	40007000 	.word	0x40007000
 800656c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006570:	4b1b      	ldr	r3, [pc, #108]	@ (80065e0 <HAL_RCC_OscConfig+0x4ec>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d028      	beq.n	80065d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d121      	bne.n	80065d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d11a      	bne.n	80065d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d111      	bne.n	80065d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	3b01      	subs	r3, #1
 80065ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d107      	bne.n	80065d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40023800 	.word	0x40023800

080065e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0cc      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065f8:	4b68      	ldr	r3, [pc, #416]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d90c      	bls.n	8006620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b65      	ldr	r3, [pc, #404]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b63      	ldr	r3, [pc, #396]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e0b8      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d020      	beq.n	800666e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006638:	4b59      	ldr	r3, [pc, #356]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4a58      	ldr	r2, [pc, #352]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006642:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006650:	4b53      	ldr	r3, [pc, #332]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4a52      	ldr	r2, [pc, #328]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006656:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800665a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800665c:	4b50      	ldr	r3, [pc, #320]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	494d      	ldr	r1, [pc, #308]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	4313      	orrs	r3, r2
 800666c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d044      	beq.n	8006704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d107      	bne.n	8006692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006682:	4b47      	ldr	r3, [pc, #284]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d119      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e07f      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d003      	beq.n	80066a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d107      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a2:	4b3f      	ldr	r3, [pc, #252]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e06f      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b2:	4b3b      	ldr	r3, [pc, #236]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e067      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066c2:	4b37      	ldr	r3, [pc, #220]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f023 0203 	bic.w	r2, r3, #3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4934      	ldr	r1, [pc, #208]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066d4:	f7fb fc60 	bl	8001f98 <HAL_GetTick>
 80066d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066da:	e00a      	b.n	80066f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066dc:	f7fb fc5c 	bl	8001f98 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e04f      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f2:	4b2b      	ldr	r3, [pc, #172]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 020c 	and.w	r2, r3, #12
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	429a      	cmp	r2, r3
 8006702:	d1eb      	bne.n	80066dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006704:	4b25      	ldr	r3, [pc, #148]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d20c      	bcs.n	800672c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b22      	ldr	r3, [pc, #136]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b20      	ldr	r3, [pc, #128]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e032      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d008      	beq.n	800674a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006738:	4b19      	ldr	r3, [pc, #100]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4916      	ldr	r1, [pc, #88]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	4313      	orrs	r3, r2
 8006748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006756:	4b12      	ldr	r3, [pc, #72]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	490e      	ldr	r1, [pc, #56]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	4313      	orrs	r3, r2
 8006768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800676a:	f000 f821 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 800676e:	4602      	mov	r2, r0
 8006770:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	490a      	ldr	r1, [pc, #40]	@ (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 800677c:	5ccb      	ldrb	r3, [r1, r3]
 800677e:	fa22 f303 	lsr.w	r3, r2, r3
 8006782:	4a09      	ldr	r2, [pc, #36]	@ (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006786:	4b09      	ldr	r3, [pc, #36]	@ (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7fb fbc0 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40023c00 	.word	0x40023c00
 80067a0:	40023800 	.word	0x40023800
 80067a4:	08011238 	.word	0x08011238
 80067a8:	20000004 	.word	0x20000004
 80067ac:	20000008 	.word	0x20000008

080067b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b4:	b094      	sub	sp, #80	@ 0x50
 80067b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067c8:	4b79      	ldr	r3, [pc, #484]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 030c 	and.w	r3, r3, #12
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d00d      	beq.n	80067f0 <HAL_RCC_GetSysClockFreq+0x40>
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	f200 80e1 	bhi.w	800699c <HAL_RCC_GetSysClockFreq+0x1ec>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x34>
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d003      	beq.n	80067ea <HAL_RCC_GetSysClockFreq+0x3a>
 80067e2:	e0db      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067e4:	4b73      	ldr	r3, [pc, #460]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067e8:	e0db      	b.n	80069a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067ea:	4b73      	ldr	r3, [pc, #460]	@ (80069b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80067ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067ee:	e0d8      	b.n	80069a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067f0:	4b6f      	ldr	r3, [pc, #444]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067fa:	4b6d      	ldr	r3, [pc, #436]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d063      	beq.n	80068ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006806:	4b6a      	ldr	r3, [pc, #424]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	099b      	lsrs	r3, r3, #6
 800680c:	2200      	movs	r2, #0
 800680e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006810:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006818:	633b      	str	r3, [r7, #48]	@ 0x30
 800681a:	2300      	movs	r3, #0
 800681c:	637b      	str	r3, [r7, #52]	@ 0x34
 800681e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006822:	4622      	mov	r2, r4
 8006824:	462b      	mov	r3, r5
 8006826:	f04f 0000 	mov.w	r0, #0
 800682a:	f04f 0100 	mov.w	r1, #0
 800682e:	0159      	lsls	r1, r3, #5
 8006830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006834:	0150      	lsls	r0, r2, #5
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4621      	mov	r1, r4
 800683c:	1a51      	subs	r1, r2, r1
 800683e:	6139      	str	r1, [r7, #16]
 8006840:	4629      	mov	r1, r5
 8006842:	eb63 0301 	sbc.w	r3, r3, r1
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006854:	4659      	mov	r1, fp
 8006856:	018b      	lsls	r3, r1, #6
 8006858:	4651      	mov	r1, sl
 800685a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800685e:	4651      	mov	r1, sl
 8006860:	018a      	lsls	r2, r1, #6
 8006862:	4651      	mov	r1, sl
 8006864:	ebb2 0801 	subs.w	r8, r2, r1
 8006868:	4659      	mov	r1, fp
 800686a:	eb63 0901 	sbc.w	r9, r3, r1
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800687a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800687e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006882:	4690      	mov	r8, r2
 8006884:	4699      	mov	r9, r3
 8006886:	4623      	mov	r3, r4
 8006888:	eb18 0303 	adds.w	r3, r8, r3
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	462b      	mov	r3, r5
 8006890:	eb49 0303 	adc.w	r3, r9, r3
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80068a2:	4629      	mov	r1, r5
 80068a4:	024b      	lsls	r3, r1, #9
 80068a6:	4621      	mov	r1, r4
 80068a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068ac:	4621      	mov	r1, r4
 80068ae:	024a      	lsls	r2, r1, #9
 80068b0:	4610      	mov	r0, r2
 80068b2:	4619      	mov	r1, r3
 80068b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b6:	2200      	movs	r2, #0
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068c0:	f7fa f9ca 	bl	8000c58 <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4613      	mov	r3, r2
 80068ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068cc:	e058      	b.n	8006980 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ce:	4b38      	ldr	r3, [pc, #224]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	099b      	lsrs	r3, r3, #6
 80068d4:	2200      	movs	r2, #0
 80068d6:	4618      	mov	r0, r3
 80068d8:	4611      	mov	r1, r2
 80068da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	2300      	movs	r3, #0
 80068e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068e8:	4642      	mov	r2, r8
 80068ea:	464b      	mov	r3, r9
 80068ec:	f04f 0000 	mov.w	r0, #0
 80068f0:	f04f 0100 	mov.w	r1, #0
 80068f4:	0159      	lsls	r1, r3, #5
 80068f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068fa:	0150      	lsls	r0, r2, #5
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4641      	mov	r1, r8
 8006902:	ebb2 0a01 	subs.w	sl, r2, r1
 8006906:	4649      	mov	r1, r9
 8006908:	eb63 0b01 	sbc.w	fp, r3, r1
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800691c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006920:	ebb2 040a 	subs.w	r4, r2, sl
 8006924:	eb63 050b 	sbc.w	r5, r3, fp
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	00eb      	lsls	r3, r5, #3
 8006932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006936:	00e2      	lsls	r2, r4, #3
 8006938:	4614      	mov	r4, r2
 800693a:	461d      	mov	r5, r3
 800693c:	4643      	mov	r3, r8
 800693e:	18e3      	adds	r3, r4, r3
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	464b      	mov	r3, r9
 8006944:	eb45 0303 	adc.w	r3, r5, r3
 8006948:	607b      	str	r3, [r7, #4]
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006956:	4629      	mov	r1, r5
 8006958:	028b      	lsls	r3, r1, #10
 800695a:	4621      	mov	r1, r4
 800695c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006960:	4621      	mov	r1, r4
 8006962:	028a      	lsls	r2, r1, #10
 8006964:	4610      	mov	r0, r2
 8006966:	4619      	mov	r1, r3
 8006968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800696a:	2200      	movs	r2, #0
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	61fa      	str	r2, [r7, #28]
 8006970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006974:	f7fa f970 	bl	8000c58 <__aeabi_uldivmod>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4613      	mov	r3, r2
 800697e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006980:	4b0b      	ldr	r3, [pc, #44]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	3301      	adds	r3, #1
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006994:	fbb2 f3f3 	udiv	r3, r2, r3
 8006998:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800699a:	e002      	b.n	80069a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800699e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3750      	adds	r7, #80	@ 0x50
 80069a8:	46bd      	mov	sp, r7
 80069aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	007a1200 	.word	0x007a1200

080069bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069c0:	4b03      	ldr	r3, [pc, #12]	@ (80069d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069c2:	681b      	ldr	r3, [r3, #0]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20000004 	.word	0x20000004

080069d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069d8:	f7ff fff0 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b05      	ldr	r3, [pc, #20]	@ (80069f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	0a9b      	lsrs	r3, r3, #10
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	4903      	ldr	r1, [pc, #12]	@ (80069f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40023800 	.word	0x40023800
 80069f8:	08011248 	.word	0x08011248

080069fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d038      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a24:	4b68      	ldr	r3, [pc, #416]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a2a:	f7fb fab5 	bl	8001f98 <HAL_GetTick>
 8006a2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a32:	f7fb fab1 	bl	8001f98 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e0bd      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a44:	4b61      	ldr	r3, [pc, #388]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f0      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	071b      	lsls	r3, r3, #28
 8006a62:	495a      	ldr	r1, [pc, #360]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a6a:	4b57      	ldr	r3, [pc, #348]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a70:	f7fb fa92 	bl	8001f98 <HAL_GetTick>
 8006a74:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a76:	e008      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a78:	f7fb fa8e 	bl	8001f98 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e09a      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a8a:	4b50      	ldr	r3, [pc, #320]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f0      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8083 	beq.w	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	4b48      	ldr	r3, [pc, #288]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aac:	4a47      	ldr	r2, [pc, #284]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ab4:	4b45      	ldr	r3, [pc, #276]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ac0:	4b43      	ldr	r3, [pc, #268]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a42      	ldr	r2, [pc, #264]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006acc:	f7fb fa64 	bl	8001f98 <HAL_GetTick>
 8006ad0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad4:	f7fb fa60 	bl	8001f98 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e06c      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f0      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006af2:	4b36      	ldr	r3, [pc, #216]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006afa:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02f      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d028      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b10:	4b2e      	ldr	r3, [pc, #184]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b18:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b20:	4b2c      	ldr	r3, [pc, #176]	@ (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b26:	4a29      	ldr	r2, [pc, #164]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b2c:	4b27      	ldr	r3, [pc, #156]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d114      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b38:	f7fb fa2e 	bl	8001f98 <HAL_GetTick>
 8006b3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b40:	f7fb fa2a 	bl	8001f98 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e034      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b56:	4b1d      	ldr	r3, [pc, #116]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0ee      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b6e:	d10d      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006b70:	4b16      	ldr	r3, [pc, #88]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b84:	4911      	ldr	r1, [pc, #68]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
 8006b8a:	e005      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4a0e      	ldr	r2, [pc, #56]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b92:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006b96:	6093      	str	r3, [r2, #8]
 8006b98:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba4:	4909      	ldr	r1, [pc, #36]	@ (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7d1a      	ldrb	r2, [r3, #20]
 8006bba:	4b07      	ldr	r3, [pc, #28]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006bbc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	42470068 	.word	0x42470068
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	40007000 	.word	0x40007000
 8006bd4:	42470e40 	.word	0x42470e40
 8006bd8:	424711e0 	.word	0x424711e0

08006bdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d141      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006bfa:	4b25      	ldr	r3, [pc, #148]	@ (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d006      	beq.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c10:	d131      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c12:	4b20      	ldr	r3, [pc, #128]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006c14:	617b      	str	r3, [r7, #20]
          break;
 8006c16:	e031      	b.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c18:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c24:	d109      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006c26:	4b1a      	ldr	r3, [pc, #104]	@ (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c30:	4a19      	ldr	r2, [pc, #100]	@ (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	e008      	b.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006c3a:	4b15      	ldr	r3, [pc, #84]	@ (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c44:	4a15      	ldr	r2, [pc, #84]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006c4c:	4b10      	ldr	r3, [pc, #64]	@ (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c52:	099b      	lsrs	r3, r3, #6
 8006c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006c60:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c66:	0f1b      	lsrs	r3, r3, #28
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	617b      	str	r3, [r7, #20]
          break;
 8006c74:	e002      	b.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]
          break;
 8006c7a:	bf00      	nop
        }
      }
      break;
 8006c7c:	e000      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8006c7e:	bf00      	nop
    }
  }
  return frequency;
 8006c80:	697b      	ldr	r3, [r7, #20]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40023800 	.word	0x40023800
 8006c94:	00bb8000 	.word	0x00bb8000
 8006c98:	007a1200 	.word	0x007a1200
 8006c9c:	00f42400 	.word	0x00f42400

08006ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e07b      	b.n	8006daa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d108      	bne.n	8006ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc2:	d009      	beq.n	8006cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	61da      	str	r2, [r3, #28]
 8006cca:	e005      	b.n	8006cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fa fe80 	bl	80019f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5c:	ea42 0103 	orr.w	r1, r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	0c1b      	lsrs	r3, r3, #16
 8006d76:	f003 0104 	and.w	r1, r3, #4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	f003 0210 	and.w	r2, r3, #16
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006db2:	b084      	sub	sp, #16
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	f107 001c 	add.w	r0, r7, #28
 8006dc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dc4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d123      	bne.n	8006e14 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006df4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d105      	bne.n	8006e08 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9dc 	bl	80071c6 <USB_CoreReset>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73fb      	strb	r3, [r7, #15]
 8006e12:	e01b      	b.n	8006e4c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9d0 	bl	80071c6 <USB_CoreReset>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e2a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e3e:	e005      	b.n	8006e4c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e4c:	7fbb      	ldrb	r3, [r7, #30]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d10b      	bne.n	8006e6a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f043 0206 	orr.w	r2, r3, #6
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f043 0220 	orr.w	r2, r3, #32
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e76:	b004      	add	sp, #16
 8006e78:	4770      	bx	lr

08006e7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f043 0201 	orr.w	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f023 0201 	bic.w	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d115      	bne.n	8006f0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006eec:	200a      	movs	r0, #10
 8006eee:	f7fb f85f 	bl	8001fb0 <HAL_Delay>
      ms += 10U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	330a      	adds	r3, #10
 8006ef6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f956 	bl	80071aa <USB_GetMode>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d01e      	beq.n	8006f42 <USB_SetCurrentMode+0x84>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f08:	d9f0      	bls.n	8006eec <USB_SetCurrentMode+0x2e>
 8006f0a:	e01a      	b.n	8006f42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d115      	bne.n	8006f3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f1e:	200a      	movs	r0, #10
 8006f20:	f7fb f846 	bl	8001fb0 <HAL_Delay>
      ms += 10U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	330a      	adds	r3, #10
 8006f28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f93d 	bl	80071aa <USB_GetMode>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <USB_SetCurrentMode+0x84>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f3a:	d9f0      	bls.n	8006f1e <USB_SetCurrentMode+0x60>
 8006f3c:	e001      	b.n	8006f42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e005      	b.n	8006f4e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f46:	d101      	bne.n	8006f4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f70:	d901      	bls.n	8006f76 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e01b      	b.n	8006fae <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	daf2      	bge.n	8006f64 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	019b      	lsls	r3, r3, #6
 8006f86:	f043 0220 	orr.w	r2, r3, #32
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3301      	adds	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f9a:	d901      	bls.n	8006fa0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e006      	b.n	8006fae <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b20      	cmp	r3, #32
 8006faa:	d0f0      	beq.n	8006f8e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fd2:	d901      	bls.n	8006fd8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e018      	b.n	800700a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	daf2      	bge.n	8006fc6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2210      	movs	r2, #16
 8006fe8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ff6:	d901      	bls.n	8006ffc <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e006      	b.n	800700a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b10      	cmp	r3, #16
 8007006:	d0f0      	beq.n	8006fea <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007016:	b480      	push	{r7}
 8007018:	b089      	sub	sp, #36	@ 0x24
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	4611      	mov	r1, r2
 8007022:	461a      	mov	r2, r3
 8007024:	460b      	mov	r3, r1
 8007026:	71fb      	strb	r3, [r7, #7]
 8007028:	4613      	mov	r3, r2
 800702a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007034:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d123      	bne.n	8007084 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800703c:	88bb      	ldrh	r3, [r7, #4]
 800703e:	3303      	adds	r3, #3
 8007040:	089b      	lsrs	r3, r3, #2
 8007042:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007044:	2300      	movs	r3, #0
 8007046:	61bb      	str	r3, [r7, #24]
 8007048:	e018      	b.n	800707c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	031a      	lsls	r2, r3, #12
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	4413      	add	r3, r2
 8007052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007056:	461a      	mov	r2, r3
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	3301      	adds	r3, #1
 8007062:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	3301      	adds	r3, #1
 800706e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	3301      	adds	r3, #1
 8007074:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	3301      	adds	r3, #1
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	429a      	cmp	r2, r3
 8007082:	d3e2      	bcc.n	800704a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3724      	adds	r7, #36	@ 0x24
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007092:	b480      	push	{r7}
 8007094:	b08b      	sub	sp, #44	@ 0x2c
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	4613      	mov	r3, r2
 800709e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	089b      	lsrs	r3, r3, #2
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070b8:	2300      	movs	r3, #0
 80070ba:	623b      	str	r3, [r7, #32]
 80070bc:	e014      	b.n	80070e8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	601a      	str	r2, [r3, #0]
    pDest++;
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	3301      	adds	r3, #1
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	3301      	adds	r3, #1
 80070d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	3301      	adds	r3, #1
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	3301      	adds	r3, #1
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	3301      	adds	r3, #1
 80070e6:	623b      	str	r3, [r7, #32]
 80070e8:	6a3a      	ldr	r2, [r7, #32]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d3e6      	bcc.n	80070be <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070f0:	8bfb      	ldrh	r3, [r7, #30]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01e      	beq.n	8007134 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007100:	461a      	mov	r2, r3
 8007102:	f107 0310 	add.w	r3, r7, #16
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	b2da      	uxtb	r2, r3
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	701a      	strb	r2, [r3, #0]
      i++;
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	3301      	adds	r3, #1
 8007120:	623b      	str	r3, [r7, #32]
      pDest++;
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	3301      	adds	r3, #1
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007128:	8bfb      	ldrh	r3, [r7, #30]
 800712a:	3b01      	subs	r3, #1
 800712c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800712e:	8bfb      	ldrh	r3, [r7, #30]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1ea      	bne.n	800710a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007136:	4618      	mov	r0, r3
 8007138:	372c      	adds	r7, #44	@ 0x2c
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007142:	b480      	push	{r7}
 8007144:	b085      	sub	sp, #20
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4013      	ands	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800715a:	68fb      	ldr	r3, [r7, #12]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007178:	78fb      	ldrb	r3, [r7, #3]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4013      	ands	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800719c:	68bb      	ldr	r3, [r7, #8]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f003 0301 	and.w	r3, r3, #1
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3301      	adds	r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071de:	d901      	bls.n	80071e4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e01b      	b.n	800721c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	daf2      	bge.n	80071d2 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f043 0201 	orr.w	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3301      	adds	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007208:	d901      	bls.n	800720e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e006      	b.n	800721c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b01      	cmp	r3, #1
 8007218:	d0f0      	beq.n	80071fc <USB_CoreReset+0x36>

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007228:	b084      	sub	sp, #16
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007248:	461a      	mov	r2, r3
 800724a:	2300      	movs	r3, #0
 800724c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d119      	bne.n	80072b2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800727e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007282:	2b01      	cmp	r3, #1
 8007284:	d10a      	bne.n	800729c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007294:	f043 0304 	orr.w	r3, r3, #4
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	e014      	b.n	80072c6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072aa:	f023 0304 	bic.w	r3, r3, #4
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	e009      	b.n	80072c6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072c0:	f023 0304 	bic.w	r3, r3, #4
 80072c4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072c6:	2110      	movs	r1, #16
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff fe44 	bl	8006f56 <USB_FlushTxFifo>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fe6e 	bl	8006fba <USB_FlushRxFifo>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	e015      	b.n	800731a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fa:	461a      	mov	r2, r3
 80072fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007300:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730e:	461a      	mov	r2, r3
 8007310:	2300      	movs	r3, #0
 8007312:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3301      	adds	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800731e:	461a      	mov	r2, r3
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4293      	cmp	r3, r2
 8007324:	d3e3      	bcc.n	80072ee <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f04f 32ff 	mov.w	r2, #4294967295
 8007332:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2280      	movs	r2, #128	@ 0x80
 8007338:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a0e      	ldr	r2, [pc, #56]	@ (8007378 <USB_HostInit+0x150>)
 800733e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a0e      	ldr	r2, [pc, #56]	@ (800737c <USB_HostInit+0x154>)
 8007344:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007348:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f043 0210 	orr.w	r2, r3, #16
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699a      	ldr	r2, [r3, #24]
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <USB_HostInit+0x158>)
 8007362:	4313      	orrs	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007368:	7dfb      	ldrb	r3, [r7, #23]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007374:	b004      	add	sp, #16
 8007376:	4770      	bx	lr
 8007378:	00600080 	.word	0x00600080
 800737c:	004000e0 	.word	0x004000e0
 8007380:	a3200008 	.word	0xa3200008

08007384 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073a2:	f023 0303 	bic.w	r3, r3, #3
 80073a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80073bc:	4313      	orrs	r3, r2
 80073be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d107      	bne.n	80073d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073cc:	461a      	mov	r2, r3
 80073ce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073d2:	6053      	str	r3, [r2, #4]
 80073d4:	e00c      	b.n	80073f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80073d6:	78fb      	ldrb	r3, [r7, #3]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d107      	bne.n	80073ec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073e2:	461a      	mov	r2, r3
 80073e4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80073e8:	6053      	str	r3, [r2, #4]
 80073ea:	e001      	b.n	80073f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e000      	b.n	80073f2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800741e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800742c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800742e:	2064      	movs	r0, #100	@ 0x64
 8007430:	f7fa fdbe 	bl	8001fb0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800743c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007440:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007442:	200a      	movs	r0, #10
 8007444:	f7fa fdb4 	bl	8001fb0 <HAL_Delay>

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	460b      	mov	r3, r1
 800745c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007476:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <USB_DriveVbus+0x44>
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d106      	bne.n	8007496 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007490:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007494:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800749c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a0:	d109      	bne.n	80074b6 <USB_DriveVbus+0x64>
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80074b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074b4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	0c5b      	lsrs	r3, r3, #17
 80074e2:	f003 0303 	and.w	r3, r3, #3
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	b29b      	uxth	r3, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	461a      	mov	r2, r3
 8007522:	4603      	mov	r3, r0
 8007524:	70fb      	strb	r3, [r7, #3]
 8007526:	460b      	mov	r3, r1
 8007528:	70bb      	strb	r3, [r7, #2]
 800752a:	4613      	mov	r3, r2
 800752c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007542:	461a      	mov	r2, r3
 8007544:	f04f 33ff 	mov.w	r3, #4294967295
 8007548:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800754a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800754e:	2b03      	cmp	r3, #3
 8007550:	d867      	bhi.n	8007622 <USB_HC_Init+0x10e>
 8007552:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <USB_HC_Init+0x44>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007569 	.word	0x08007569
 800755c:	080075e5 	.word	0x080075e5
 8007560:	08007569 	.word	0x08007569
 8007564:	080075a7 	.word	0x080075a7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	4413      	add	r3, r2
 8007570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007574:	461a      	mov	r2, r3
 8007576:	f240 439d 	movw	r3, #1181	@ 0x49d
 800757a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800757c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007580:	2b00      	cmp	r3, #0
 8007582:	da51      	bge.n	8007628 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	4413      	add	r3, r2
 800758c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	78fa      	ldrb	r2, [r7, #3]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	440a      	add	r2, r1
 800759a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800759e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075a2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80075a4:	e040      	b.n	8007628 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075b2:	461a      	mov	r2, r3
 80075b4:	f240 639d 	movw	r3, #1693	@ 0x69d
 80075b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da34      	bge.n	800762c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	78fa      	ldrb	r2, [r7, #3]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e0:	60d3      	str	r3, [r2, #12]
      }

      break;
 80075e2:	e023      	b.n	800762c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f0:	461a      	mov	r2, r3
 80075f2:	f240 2325 	movw	r3, #549	@ 0x225
 80075f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da17      	bge.n	8007630 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	440a      	add	r2, r1
 8007616:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800761a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800761e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007620:	e006      	b.n	8007630 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	77fb      	strb	r3, [r7, #31]
      break;
 8007626:	e004      	b.n	8007632 <USB_HC_Init+0x11e>
      break;
 8007628:	bf00      	nop
 800762a:	e002      	b.n	8007632 <USB_HC_Init+0x11e>
      break;
 800762c:	bf00      	nop
 800762e:	e000      	b.n	8007632 <USB_HC_Init+0x11e>
      break;
 8007630:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007632:	78fb      	ldrb	r3, [r7, #3]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763e:	461a      	mov	r2, r3
 8007640:	2300      	movs	r3, #0
 8007642:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	4413      	add	r3, r2
 800764c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	440a      	add	r2, r1
 800765a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800765e:	f043 0302 	orr.w	r3, r3, #2
 8007662:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	2101      	movs	r1, #1
 8007674:	fa01 f303 	lsl.w	r3, r1, r3
 8007678:	6939      	ldr	r1, [r7, #16]
 800767a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800767e:	4313      	orrs	r3, r2
 8007680:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800768e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da03      	bge.n	800769e <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e001      	b.n	80076a2 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff ff0e 	bl	80074c4 <USB_GetHostSpeed>
 80076a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80076aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d106      	bne.n	80076c0 <USB_HC_Init+0x1ac>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d003      	beq.n	80076c0 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80076b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e001      	b.n	80076c4 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076c4:	787b      	ldrb	r3, [r7, #1]
 80076c6:	059b      	lsls	r3, r3, #22
 80076c8:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076cc:	78bb      	ldrb	r3, [r7, #2]
 80076ce:	02db      	lsls	r3, r3, #11
 80076d0:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076da:	049b      	lsls	r3, r3, #18
 80076dc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80076e2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80076e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076e8:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	0151      	lsls	r1, r2, #5
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	440a      	add	r2, r1
 80076fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80076fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007702:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007704:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007708:	2b03      	cmp	r3, #3
 800770a:	d003      	beq.n	8007714 <USB_HC_Init+0x200>
 800770c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d10f      	bne.n	8007734 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	440a      	add	r2, r1
 800772a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800772e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007732:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007734:	7ffb      	ldrb	r3, [r7, #31]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop

08007740 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08c      	sub	sp, #48	@ 0x30
 8007744:	af02      	add	r7, sp, #8
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800775c:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	799b      	ldrb	r3, [r3, #6]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d158      	bne.n	8007818 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007766:	2301      	movs	r3, #1
 8007768:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	78db      	ldrb	r3, [r3, #3]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007772:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	8a92      	ldrh	r2, [r2, #20]
 8007778:	fb03 f202 	mul.w	r2, r3, r2
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	61da      	str	r2, [r3, #28]
 8007780:	e079      	b.n	8007876 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	7c9b      	ldrb	r3, [r3, #18]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d130      	bne.n	80077ec <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	2bbc      	cmp	r3, #188	@ 0xbc
 8007790:	d918      	bls.n	80077c4 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	8a9b      	ldrh	r3, [r3, #20]
 8007796:	461a      	mov	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d003      	beq.n	80077b4 <USB_HC_StartXfer+0x74>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d103      	bne.n	80077bc <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2202      	movs	r2, #2
 80077b8:	60da      	str	r2, [r3, #12]
 80077ba:	e05c      	b.n	8007876 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2201      	movs	r2, #1
 80077c0:	60da      	str	r2, [r3, #12]
 80077c2:	e058      	b.n	8007876 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6a1a      	ldr	r2, [r3, #32]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d007      	beq.n	80077e4 <USB_HC_StartXfer+0xa4>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d003      	beq.n	80077e4 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2204      	movs	r2, #4
 80077e0:	60da      	str	r2, [r3, #12]
 80077e2:	e048      	b.n	8007876 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2203      	movs	r2, #3
 80077e8:	60da      	str	r2, [r3, #12]
 80077ea:	e044      	b.n	8007876 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d10d      	bne.n	800780e <USB_HC_StartXfer+0xce>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	8a92      	ldrh	r2, [r2, #20]
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d907      	bls.n	800780e <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	8a92      	ldrh	r2, [r2, #20]
 8007804:	fb03 f202 	mul.w	r2, r3, r2
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	61da      	str	r2, [r3, #28]
 800780c:	e033      	b.n	8007876 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6a1a      	ldr	r2, [r3, #32]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	61da      	str	r2, [r3, #28]
 8007816:	e02e      	b.n	8007876 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d018      	beq.n	8007852 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	8a92      	ldrh	r2, [r2, #20]
 8007828:	4413      	add	r3, r2
 800782a:	3b01      	subs	r3, #1
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	8a92      	ldrh	r2, [r2, #20]
 8007830:	fbb3 f3f2 	udiv	r3, r3, r2
 8007834:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007836:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007838:	8b7b      	ldrh	r3, [r7, #26]
 800783a:	429a      	cmp	r2, r3
 800783c:	d90b      	bls.n	8007856 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800783e:	8b7b      	ldrh	r3, [r7, #26]
 8007840:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007842:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	8a92      	ldrh	r2, [r2, #20]
 8007848:	fb03 f202 	mul.w	r2, r3, r2
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	61da      	str	r2, [r3, #28]
 8007850:	e001      	b.n	8007856 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8007852:	2301      	movs	r3, #1
 8007854:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	78db      	ldrb	r3, [r3, #3]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d007      	beq.n	800786e <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800785e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	8a92      	ldrh	r2, [r2, #20]
 8007864:	fb03 f202 	mul.w	r2, r3, r2
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	61da      	str	r2, [r3, #28]
 800786c:	e003      	b.n	8007876 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6a1a      	ldr	r2, [r3, #32]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800787e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007880:	04d9      	lsls	r1, r3, #19
 8007882:	4ba4      	ldr	r3, [pc, #656]	@ (8007b14 <USB_HC_StartXfer+0x3d4>)
 8007884:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007886:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	7d9b      	ldrb	r3, [r3, #22]
 800788c:	075b      	lsls	r3, r3, #29
 800788e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007892:	69f9      	ldr	r1, [r7, #28]
 8007894:	0148      	lsls	r0, r1, #5
 8007896:	6a39      	ldr	r1, [r7, #32]
 8007898:	4401      	add	r1, r0
 800789a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800789e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078a0:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d009      	beq.n	80078bc <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	6999      	ldr	r1, [r3, #24]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b8:	460a      	mov	r2, r1
 80078ba:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bf0c      	ite	eq
 80078cc:	2301      	moveq	r3, #1
 80078ce:	2300      	movne	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	6a3a      	ldr	r2, [r7, #32]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078f2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	7e7b      	ldrb	r3, [r7, #25]
 8007904:	075b      	lsls	r3, r3, #29
 8007906:	69f9      	ldr	r1, [r7, #28]
 8007908:	0148      	lsls	r0, r1, #5
 800790a:	6a39      	ldr	r1, [r7, #32]
 800790c:	4401      	add	r1, r0
 800790e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007912:	4313      	orrs	r3, r2
 8007914:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	799b      	ldrb	r3, [r3, #6]
 800791a:	2b01      	cmp	r3, #1
 800791c:	f040 80c4 	bne.w	8007aa8 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	7c5b      	ldrb	r3, [r3, #17]
 8007924:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800792a:	4313      	orrs	r3, r2
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	6a3a      	ldr	r2, [r7, #32]
 8007932:	440a      	add	r2, r1
 8007934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007938:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800793c:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	6a3a      	ldr	r2, [r7, #32]
 8007952:	440a      	add	r2, r1
 8007954:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007958:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800795c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	79db      	ldrb	r3, [r3, #7]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d123      	bne.n	80079ae <USB_HC_StartXfer+0x26e>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	78db      	ldrb	r3, [r3, #3]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d11f      	bne.n	80079ae <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	0151      	lsls	r1, r2, #5
 8007980:	6a3a      	ldr	r2, [r7, #32]
 8007982:	440a      	add	r2, r1
 8007984:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800798c:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	4413      	add	r3, r2
 8007996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	6a3a      	ldr	r2, [r7, #32]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ac:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	7c9b      	ldrb	r3, [r3, #18]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d003      	beq.n	80079be <USB_HC_StartXfer+0x27e>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	7c9b      	ldrb	r3, [r3, #18]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d117      	bne.n	80079ee <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d113      	bne.n	80079ee <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	78db      	ldrb	r3, [r3, #3]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d10f      	bne.n	80079ee <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	6a3a      	ldr	r2, [r7, #32]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ec:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	7c9b      	ldrb	r3, [r3, #18]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d163      	bne.n	8007abe <USB_HC_StartXfer+0x37e>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	78db      	ldrb	r3, [r3, #3]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d15f      	bne.n	8007abe <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d859      	bhi.n	8007abc <USB_HC_StartXfer+0x37c>
 8007a08:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <USB_HC_StartXfer+0x2d0>)
 8007a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0e:	bf00      	nop
 8007a10:	08007a21 	.word	0x08007a21
 8007a14:	08007a43 	.word	0x08007a43
 8007a18:	08007a65 	.word	0x08007a65
 8007a1c:	08007a87 	.word	0x08007a87
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	6a3a      	ldr	r2, [r7, #32]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a3e:	6053      	str	r3, [r2, #4]
          break;
 8007a40:	e03d      	b.n	8007abe <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a5c:	f043 030e 	orr.w	r3, r3, #14
 8007a60:	6053      	str	r3, [r2, #4]
          break;
 8007a62:	e02c      	b.n	8007abe <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a82:	6053      	str	r3, [r2, #4]
          break;
 8007a84:	e01b      	b.n	8007abe <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	6a3a      	ldr	r2, [r7, #32]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007aa4:	6053      	str	r3, [r2, #4]
          break;
 8007aa6:	e00a      	b.n	8007abe <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6053      	str	r3, [r2, #4]
 8007aba:	e000      	b.n	8007abe <USB_HC_StartXfer+0x37e>
          break;
 8007abc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ad4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	78db      	ldrb	r3, [r3, #3]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	e003      	b.n	8007af0 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007aee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007af6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b04:	461a      	mov	r2, r3
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e055      	b.n	8007bc0 <USB_HC_StartXfer+0x480>
 8007b14:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	78db      	ldrb	r3, [r3, #3]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d14e      	bne.n	8007bbe <USB_HC_StartXfer+0x47e>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d04a      	beq.n	8007bbe <USB_HC_StartXfer+0x47e>
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	79db      	ldrb	r3, [r3, #7]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d146      	bne.n	8007bbe <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	7c9b      	ldrb	r3, [r3, #18]
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d831      	bhi.n	8007b9c <USB_HC_StartXfer+0x45c>
 8007b38:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <USB_HC_StartXfer+0x400>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007b51 	.word	0x08007b51
 8007b4c:	08007b75 	.word	0x08007b75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	3303      	adds	r3, #3
 8007b56:	089b      	lsrs	r3, r3, #2
 8007b58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007b5a:	8afa      	ldrh	r2, [r7, #22]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d91c      	bls.n	8007ba0 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f043 0220 	orr.w	r2, r3, #32
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b72:	e015      	b.n	8007ba0 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	3303      	adds	r3, #3
 8007b7a:	089b      	lsrs	r3, r3, #2
 8007b7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007b7e:	8afa      	ldrh	r2, [r7, #22]
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d90a      	bls.n	8007ba4 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b9a:	e003      	b.n	8007ba4 <USB_HC_StartXfer+0x464>

      default:
        break;
 8007b9c:	bf00      	nop
 8007b9e:	e002      	b.n	8007ba6 <USB_HC_StartXfer+0x466>
        break;
 8007ba0:	bf00      	nop
 8007ba2:	e000      	b.n	8007ba6 <USB_HC_StartXfer+0x466>
        break;
 8007ba4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6999      	ldr	r1, [r3, #24]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	785a      	ldrb	r2, [r3, #1]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	9000      	str	r0, [sp, #0]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7ff fa2c 	bl	8007016 <USB_WritePacket>
  }

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3728      	adds	r7, #40	@ 0x28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	b29b      	uxth	r3, r3
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b089      	sub	sp, #36	@ 0x24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	0c9b      	lsrs	r3, r3, #18
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	0fdb      	lsrs	r3, r3, #31
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	0fdb      	lsrs	r3, r3, #31
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d10d      	bne.n	8007c6c <USB_HC_Halt+0x82>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <USB_HC_Halt+0x82>
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d002      	beq.n	8007c68 <USB_HC_Halt+0x7e>
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d101      	bne.n	8007c6c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e0d8      	b.n	8007e1e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <USB_HC_Halt+0x8e>
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d173      	bne.n	8007d60 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d14a      	bne.n	8007d3a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d133      	bne.n	8007d18 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	0151      	lsls	r1, r2, #5
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	440a      	add	r2, r1
 8007cc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	0151      	lsls	r1, r2, #5
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cfc:	d82e      	bhi.n	8007d5c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d14:	d0ec      	beq.n	8007cf0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d16:	e081      	b.n	8007e1c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	0151      	lsls	r1, r2, #5
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	440a      	add	r2, r1
 8007d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d38:	e070      	b.n	8007e1c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	0151      	lsls	r1, r2, #5
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	440a      	add	r2, r1
 8007d50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d5a:	e05f      	b.n	8007e1c <USB_HC_Halt+0x232>
            break;
 8007d5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d5e:	e05d      	b.n	8007e1c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	69fa      	ldr	r2, [r7, #28]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d133      	bne.n	8007df8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	69fa      	ldr	r2, [r7, #28]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007daa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007dae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ddc:	d81d      	bhi.n	8007e1a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007df4:	d0ec      	beq.n	8007dd0 <USB_HC_Halt+0x1e6>
 8007df6:	e011      	b.n	8007e1c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	69fa      	ldr	r2, [r7, #28]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e000      	b.n	8007e1c <USB_HC_Halt+0x232>
          break;
 8007e1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3724      	adds	r7, #36	@ 0x24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b088      	sub	sp, #32
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff f82c 	bl	8006e9c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e44:	2110      	movs	r1, #16
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff f885 	bl	8006f56 <USB_FlushTxFifo>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff f8af 	bl	8006fba <USB_FlushRxFifo>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e01f      	b.n	8007eac <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e82:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e8a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e92:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	61bb      	str	r3, [r7, #24]
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b0f      	cmp	r3, #15
 8007eb0:	d9dc      	bls.n	8007e6c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	e034      	b.n	8007f22 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ece:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ed6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ede:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eec:	461a      	mov	r2, r3
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007efe:	d80c      	bhi.n	8007f1a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f16:	d0ec      	beq.n	8007ef2 <USB_StopHost+0xc8>
 8007f18:	e000      	b.n	8007f1c <USB_StopHost+0xf2>
        break;
 8007f1a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b0f      	cmp	r3, #15
 8007f26:	d9c7      	bls.n	8007eb8 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295
 8007f34:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fe ff9b 	bl	8006e7a <USB_EnableGlobalInt>

  return ret;
 8007f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007f54:	4904      	ldr	r1, [pc, #16]	@ (8007f68 <MX_FATFS_Init+0x18>)
 8007f56:	4805      	ldr	r0, [pc, #20]	@ (8007f6c <MX_FATFS_Init+0x1c>)
 8007f58:	f005 fda6 	bl	800daa8 <FATFS_LinkDriver>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4b03      	ldr	r3, [pc, #12]	@ (8007f70 <MX_FATFS_Init+0x20>)
 8007f62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f64:	bf00      	nop
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	200005b0 	.word	0x200005b0
 8007f6c:	08011250 	.word	0x08011250
 8007f70:	200005ac 	.word	0x200005ac

08007f74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f74:	b480      	push	{r7}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	4619      	mov	r1, r3
 8007fae:	4808      	ldr	r0, [pc, #32]	@ (8007fd0 <USBH_status+0x34>)
 8007fb0:	f000 fe79 	bl	8008ca6 <USBH_MSC_UnitIsReady>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <USBH_status+0x24>
  {
    res = RES_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
 8007fbe:	e001      	b.n	8007fc4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	200005e8 	.word	0x200005e8

08007fd4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b094      	sub	sp, #80	@ 0x50
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	603b      	str	r3, [r7, #0]
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007fea:	7bf9      	ldrb	r1, [r7, #15]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4813      	ldr	r0, [pc, #76]	@ (8008044 <USBH_read+0x70>)
 8007ff6:	f000 feaa 	bl	8008d4e <USBH_MSC_Read>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d103      	bne.n	8008008 <USBH_read+0x34>
  {
    res = RES_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008006:	e017      	b.n	8008038 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008008:	f107 0210 	add.w	r2, r7, #16
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	4619      	mov	r1, r3
 8008010:	480c      	ldr	r0, [pc, #48]	@ (8008044 <USBH_read+0x70>)
 8008012:	f000 fe73 	bl	8008cfc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008016:	7f7b      	ldrb	r3, [r7, #29]
 8008018:	2b3a      	cmp	r3, #58	@ 0x3a
 800801a:	d005      	beq.n	8008028 <USBH_read+0x54>
 800801c:	2b3a      	cmp	r3, #58	@ 0x3a
 800801e:	dc07      	bgt.n	8008030 <USBH_read+0x5c>
 8008020:	2b04      	cmp	r3, #4
 8008022:	d001      	beq.n	8008028 <USBH_read+0x54>
 8008024:	2b28      	cmp	r3, #40	@ 0x28
 8008026:	d103      	bne.n	8008030 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008028:	2303      	movs	r3, #3
 800802a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800802e:	e003      	b.n	8008038 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8008036:	bf00      	nop
    }
  }

  return res;
 8008038:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800803c:	4618      	mov	r0, r3
 800803e:	3748      	adds	r7, #72	@ 0x48
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	200005e8 	.word	0x200005e8

08008048 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b094      	sub	sp, #80	@ 0x50
 800804c:	af02      	add	r7, sp, #8
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800805e:	7bf9      	ldrb	r1, [r7, #15]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	4817      	ldr	r0, [pc, #92]	@ (80080c8 <USBH_write+0x80>)
 800806a:	f000 fed0 	bl	8008e0e <USBH_MSC_Write>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <USBH_write+0x34>
  {
    res = RES_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800807a:	e01f      	b.n	80080bc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800807c:	f107 0210 	add.w	r2, r7, #16
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	4619      	mov	r1, r3
 8008084:	4810      	ldr	r0, [pc, #64]	@ (80080c8 <USBH_write+0x80>)
 8008086:	f000 fe39 	bl	8008cfc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800808a:	7f7b      	ldrb	r3, [r7, #29]
 800808c:	2b3a      	cmp	r3, #58	@ 0x3a
 800808e:	d00d      	beq.n	80080ac <USBH_write+0x64>
 8008090:	2b3a      	cmp	r3, #58	@ 0x3a
 8008092:	dc0f      	bgt.n	80080b4 <USBH_write+0x6c>
 8008094:	2b28      	cmp	r3, #40	@ 0x28
 8008096:	d009      	beq.n	80080ac <USBH_write+0x64>
 8008098:	2b28      	cmp	r3, #40	@ 0x28
 800809a:	dc0b      	bgt.n	80080b4 <USBH_write+0x6c>
 800809c:	2b04      	cmp	r3, #4
 800809e:	d005      	beq.n	80080ac <USBH_write+0x64>
 80080a0:	2b27      	cmp	r3, #39	@ 0x27
 80080a2:	d107      	bne.n	80080b4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80080a4:	2302      	movs	r3, #2
 80080a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80080aa:	e007      	b.n	80080bc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80080ac:	2303      	movs	r3, #3
 80080ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80080b2:	e003      	b.n	80080bc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80080ba:	bf00      	nop
    }
  }

  return res;
 80080bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3748      	adds	r7, #72	@ 0x48
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200005e8 	.word	0x200005e8

080080cc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b090      	sub	sp, #64	@ 0x40
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	603a      	str	r2, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
 80080d8:	460b      	mov	r3, r1
 80080da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80080e2:	79bb      	ldrb	r3, [r7, #6]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d852      	bhi.n	800818e <USBH_ioctl+0xc2>
 80080e8:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <USBH_ioctl+0x24>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008101 	.word	0x08008101
 80080f4:	08008109 	.word	0x08008109
 80080f8:	08008133 	.word	0x08008133
 80080fc:	0800815f 	.word	0x0800815f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8008106:	e045      	b.n	8008194 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008108:	f107 0208 	add.w	r2, r7, #8
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	4619      	mov	r1, r3
 8008110:	4823      	ldr	r0, [pc, #140]	@ (80081a0 <USBH_ioctl+0xd4>)
 8008112:	f000 fdf3 	bl	8008cfc <USBH_MSC_GetLUNInfo>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d106      	bne.n	800812a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008128:	e034      	b.n	8008194 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8008130:	e030      	b.n	8008194 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008132:	f107 0208 	add.w	r2, r7, #8
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	4619      	mov	r1, r3
 800813a:	4819      	ldr	r0, [pc, #100]	@ (80081a0 <USBH_ioctl+0xd4>)
 800813c:	f000 fdde 	bl	8008cfc <USBH_MSC_GetLUNInfo>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008146:	8a3b      	ldrh	r3, [r7, #16]
 8008148:	461a      	mov	r2, r3
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008154:	e01e      	b.n	8008194 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800815c:	e01a      	b.n	8008194 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800815e:	f107 0208 	add.w	r2, r7, #8
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	4619      	mov	r1, r3
 8008166:	480e      	ldr	r0, [pc, #56]	@ (80081a0 <USBH_ioctl+0xd4>)
 8008168:	f000 fdc8 	bl	8008cfc <USBH_MSC_GetLUNInfo>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008172:	8a3b      	ldrh	r3, [r7, #16]
 8008174:	0a5b      	lsrs	r3, r3, #9
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008184:	e006      	b.n	8008194 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800818c:	e002      	b.n	8008194 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800818e:	2304      	movs	r3, #4
 8008190:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8008194:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008198:	4618      	mov	r0, r3
 800819a:	3740      	adds	r7, #64	@ 0x40
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	200005e8 	.word	0x200005e8

080081a4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80081a4:	b590      	push	{r4, r7, lr}
 80081a6:	b089      	sub	sp, #36	@ 0x24
 80081a8:	af04      	add	r7, sp, #16
 80081aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081b2:	7919      	ldrb	r1, [r3, #4]
 80081b4:	2350      	movs	r3, #80	@ 0x50
 80081b6:	2206      	movs	r2, #6
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 fcd7 	bl	8009b6c <USBH_FindInterface>
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	2bff      	cmp	r3, #255	@ 0xff
 80081c6:	d002      	beq.n	80081ce <USBH_MSC_InterfaceInit+0x2a>
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d901      	bls.n	80081d2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80081ce:	2302      	movs	r3, #2
 80081d0:	e106      	b.n	80083e0 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 fcac 	bl	8009b34 <USBH_SelectInterface>
 80081dc:	4603      	mov	r3, r0
 80081de:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80081e6:	2302      	movs	r3, #2
 80081e8:	e0fa      	b.n	80083e0 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80081f0:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80081f4:	f005 ffa8 	bl	800e148 <malloc>
 80081f8:	4603      	mov	r3, r0
 80081fa:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800820c:	2302      	movs	r3, #2
 800820e:	e0e7      	b.n	80083e0 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008214:	2100      	movs	r1, #0
 8008216:	68b8      	ldr	r0, [r7, #8]
 8008218:	f006 feea 	bl	800eff0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	211a      	movs	r1, #26
 8008222:	fb01 f303 	mul.w	r3, r1, r3
 8008226:	4413      	add	r3, r2
 8008228:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b25b      	sxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	da16      	bge.n	8008262 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	211a      	movs	r1, #26
 800823a:	fb01 f303 	mul.w	r3, r1, r3
 800823e:	4413      	add	r3, r2
 8008240:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	211a      	movs	r1, #26
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	4413      	add	r3, r2
 8008256:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	815a      	strh	r2, [r3, #10]
 8008260:	e015      	b.n	800828e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	211a      	movs	r1, #26
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	4413      	add	r3, r2
 800826e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008272:	781a      	ldrb	r2, [r3, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	211a      	movs	r1, #26
 800827e:	fb01 f303 	mul.w	r3, r1, r3
 8008282:	4413      	add	r3, r2
 8008284:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008288:	881a      	ldrh	r2, [r3, #0]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	211a      	movs	r1, #26
 8008294:	fb01 f303 	mul.w	r3, r1, r3
 8008298:	4413      	add	r3, r2
 800829a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	b25b      	sxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da16      	bge.n	80082d4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	211a      	movs	r1, #26
 80082ac:	fb01 f303 	mul.w	r3, r1, r3
 80082b0:	4413      	add	r3, r2
 80082b2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	211a      	movs	r1, #26
 80082c2:	fb01 f303 	mul.w	r3, r1, r3
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80082cc:	881a      	ldrh	r2, [r3, #0]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	815a      	strh	r2, [r3, #10]
 80082d2:	e015      	b.n	8008300 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	211a      	movs	r1, #26
 80082da:	fb01 f303 	mul.w	r3, r1, r3
 80082de:	4413      	add	r3, r2
 80082e0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	211a      	movs	r1, #26
 80082f0:	fb01 f303 	mul.w	r3, r1, r3
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80082fa:	881a      	ldrh	r2, [r3, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2200      	movs	r2, #0
 8008304:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2200      	movs	r2, #0
 800830a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	799b      	ldrb	r3, [r3, #6]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f002 ffb4 	bl	800b286 <USBH_AllocPipe>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	79db      	ldrb	r3, [r3, #7]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f002 ffaa 	bl	800b286 <USBH_AllocPipe>
 8008332:	4603      	mov	r3, r0
 8008334:	461a      	mov	r2, r3
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fe02 	bl	8008f44 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	799b      	ldrb	r3, [r3, #6]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01e      	beq.n	8008386 <USBH_MSC_InterfaceInit+0x1e2>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	891b      	ldrh	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01a      	beq.n	8008386 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	7959      	ldrb	r1, [r3, #5]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	7998      	ldrb	r0, [r3, #6]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	8912      	ldrh	r2, [r2, #8]
 8008368:	9202      	str	r2, [sp, #8]
 800836a:	2202      	movs	r2, #2
 800836c:	9201      	str	r2, [sp, #4]
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	4623      	mov	r3, r4
 8008372:	4602      	mov	r2, r0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f002 ff57 	bl	800b228 <USBH_OpenPipe>
 800837a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	79db      	ldrb	r3, [r3, #7]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d02c      	beq.n	80083de <USBH_MSC_InterfaceInit+0x23a>
 8008384:	e001      	b.n	800838a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8008386:	2303      	movs	r3, #3
 8008388:	e02a      	b.n	80083e0 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	895b      	ldrh	r3, [r3, #10]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d025      	beq.n	80083de <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	7919      	ldrb	r1, [r3, #4]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	79d8      	ldrb	r0, [r3, #7]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	8952      	ldrh	r2, [r2, #10]
 80083aa:	9202      	str	r2, [sp, #8]
 80083ac:	2202      	movs	r2, #2
 80083ae:	9201      	str	r2, [sp, #4]
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	4623      	mov	r3, r4
 80083b4:	4602      	mov	r2, r0
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f002 ff36 	bl	800b228 <USBH_OpenPipe>
 80083bc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	791b      	ldrb	r3, [r3, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f005 fe04 	bl	800dfd4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	795b      	ldrb	r3, [r3, #5]
 80083d0:	2200      	movs	r2, #0
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f005 fdfd 	bl	800dfd4 <USBH_LL_SetToggle>

  return USBH_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	e000      	b.n	80083e0 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80083de:	2303      	movs	r3, #3
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd90      	pop	{r4, r7, pc}

080083e8 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	795b      	ldrb	r3, [r3, #5]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00e      	beq.n	8008420 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	795b      	ldrb	r3, [r3, #5]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f002 ff2c 	bl	800b266 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	795b      	ldrb	r3, [r3, #5]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f002 ff57 	bl	800b2c8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	791b      	ldrb	r3, [r3, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00e      	beq.n	8008446 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	791b      	ldrb	r3, [r3, #4]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f002 ff19 	bl	800b266 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	791b      	ldrb	r3, [r3, #4]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f002 ff44 	bl	800b2c8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	4618      	mov	r0, r3
 800845c:	f005 fe7c 	bl	800e158 <free>
    phost->pActiveClass->pData = 0U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008466:	2200      	movs	r2, #0
 8008468:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008486:	2301      	movs	r3, #1
 8008488:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	7b9b      	ldrb	r3, [r3, #14]
 800848e:	2b03      	cmp	r3, #3
 8008490:	d041      	beq.n	8008516 <USBH_MSC_ClassRequest+0xa2>
 8008492:	2b03      	cmp	r3, #3
 8008494:	dc4b      	bgt.n	800852e <USBH_MSC_ClassRequest+0xba>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <USBH_MSC_ClassRequest+0x2a>
 800849a:	2b02      	cmp	r3, #2
 800849c:	d147      	bne.n	800852e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fd30 	bl	8008f08 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d104      	bne.n	80084bc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2200      	movs	r2, #0
 80084b6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d137      	bne.n	8008532 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d804      	bhi.n	80084d4 <USBH_MSC_ClassRequest+0x60>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	e000      	b.n	80084d6 <USBH_MSC_ClassRequest+0x62>
 80084d4:	2202      	movs	r2, #2
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 80084da:	2300      	movs	r3, #0
 80084dc:	73bb      	strb	r3, [r7, #14]
 80084de:	e014      	b.n	800850a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	2134      	movs	r1, #52	@ 0x34
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	3392      	adds	r3, #146	@ 0x92
 80084ee:	2202      	movs	r2, #2
 80084f0:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	2134      	movs	r1, #52	@ 0x34
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	4413      	add	r3, r2
 80084fe:	33c1      	adds	r3, #193	@ 0xc1
 8008500:	2200      	movs	r2, #0
 8008502:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	3301      	adds	r3, #1
 8008508:	73bb      	strb	r3, [r7, #14]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	7bba      	ldrb	r2, [r7, #14]
 8008510:	429a      	cmp	r2, r3
 8008512:	d3e5      	bcc.n	80084e0 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008514:	e00d      	b.n	8008532 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008516:	2100      	movs	r1, #0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f002 f8ff 	bl	800a71c <USBH_ClrFeature>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d108      	bne.n	8008536 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	7bda      	ldrb	r2, [r3, #15]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800852c:	e003      	b.n	8008536 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800852e:	bf00      	nop
 8008530:	e002      	b.n	8008538 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008536:	bf00      	nop
  }

  return status;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008556:	2301      	movs	r3, #1
 8008558:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800855a:	2301      	movs	r3, #1
 800855c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800855e:	2301      	movs	r3, #1
 8008560:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	7b1b      	ldrb	r3, [r3, #12]
 8008566:	2b0a      	cmp	r3, #10
 8008568:	f000 8280 	beq.w	8008a6c <USBH_MSC_Process+0x528>
 800856c:	2b0a      	cmp	r3, #10
 800856e:	f300 82b8 	bgt.w	8008ae2 <USBH_MSC_Process+0x59e>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <USBH_MSC_Process+0x3a>
 8008576:	2b01      	cmp	r3, #1
 8008578:	f000 82b0 	beq.w	8008adc <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800857c:	e2b1      	b.n	8008ae2 <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	7812      	ldrb	r2, [r2, #0]
 8008588:	4293      	cmp	r3, r2
 800858a:	f080 825d 	bcs.w	8008a48 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008594:	4619      	mov	r1, r3
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	2334      	movs	r3, #52	@ 0x34
 800859a:	fb01 f303 	mul.w	r3, r1, r3
 800859e:	4413      	add	r3, r2
 80085a0:	3391      	adds	r3, #145	@ 0x91
 80085a2:	2201      	movs	r2, #1
 80085a4:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80085ac:	4619      	mov	r1, r3
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	2334      	movs	r3, #52	@ 0x34
 80085b2:	fb01 f303 	mul.w	r3, r1, r3
 80085b6:	4413      	add	r3, r2
 80085b8:	3390      	adds	r3, #144	@ 0x90
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	f200 824b 	bhi.w	8008a58 <USBH_MSC_Process+0x514>
 80085c2:	a201      	add	r2, pc, #4	@ (adr r2, 80085c8 <USBH_MSC_Process+0x84>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	080085ed 	.word	0x080085ed
 80085cc:	08008a59 	.word	0x08008a59
 80085d0:	080086b7 	.word	0x080086b7
 80085d4:	0800883d 	.word	0x0800883d
 80085d8:	08008613 	.word	0x08008613
 80085dc:	08008909 	.word	0x08008909
 80085e0:	08008a59 	.word	0x08008a59
 80085e4:	08008a59 	.word	0x08008a59
 80085e8:	08008a37 	.word	0x08008a37
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80085f2:	4619      	mov	r1, r3
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	2334      	movs	r3, #52	@ 0x34
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	3390      	adds	r3, #144	@ 0x90
 8008600:	2204      	movs	r2, #4
 8008602:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8008610:	e22b      	b.n	8008a6a <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008618:	b2d9      	uxtb	r1, r3
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008620:	461a      	mov	r2, r3
 8008622:	2334      	movs	r3, #52	@ 0x34
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	3398      	adds	r3, #152	@ 0x98
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4413      	add	r3, r2
 800862e:	3307      	adds	r3, #7
 8008630:	461a      	mov	r2, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 ffa3 	bl	800957e <USBH_MSC_SCSI_Inquiry>
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10c      	bne.n	800865c <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008648:	4619      	mov	r1, r3
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	2334      	movs	r3, #52	@ 0x34
 800864e:	fb01 f303 	mul.w	r3, r1, r3
 8008652:	4413      	add	r3, r2
 8008654:	3390      	adds	r3, #144	@ 0x90
 8008656:	2202      	movs	r2, #2
 8008658:	701a      	strb	r2, [r3, #0]
            break;
 800865a:	e1ff      	b.n	8008a5c <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	2b02      	cmp	r3, #2
 8008660:	d10c      	bne.n	800867c <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008668:	4619      	mov	r1, r3
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	2334      	movs	r3, #52	@ 0x34
 800866e:	fb01 f303 	mul.w	r3, r1, r3
 8008672:	4413      	add	r3, r2
 8008674:	3390      	adds	r3, #144	@ 0x90
 8008676:	2205      	movs	r2, #5
 8008678:	701a      	strb	r2, [r3, #0]
            break;
 800867a:	e1ef      	b.n	8008a5c <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	2b04      	cmp	r3, #4
 8008680:	f040 81ec 	bne.w	8008a5c <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800868a:	4619      	mov	r1, r3
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	2334      	movs	r3, #52	@ 0x34
 8008690:	fb01 f303 	mul.w	r3, r1, r3
 8008694:	4413      	add	r3, r2
 8008696:	3390      	adds	r3, #144	@ 0x90
 8008698:	2208      	movs	r2, #8
 800869a:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80086a2:	4619      	mov	r1, r3
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	2334      	movs	r3, #52	@ 0x34
 80086a8:	fb01 f303 	mul.w	r3, r1, r3
 80086ac:	4413      	add	r3, r2
 80086ae:	3391      	adds	r3, #145	@ 0x91
 80086b0:	2202      	movs	r2, #2
 80086b2:	701a      	strb	r2, [r3, #0]
            break;
 80086b4:	e1d2      	b.n	8008a5c <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fe9f 	bl	8009404 <USBH_MSC_SCSI_TestUnitReady>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d14a      	bne.n	8008766 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80086d6:	4619      	mov	r1, r3
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	2334      	movs	r3, #52	@ 0x34
 80086dc:	fb01 f303 	mul.w	r3, r1, r3
 80086e0:	4413      	add	r3, r2
 80086e2:	3392      	adds	r3, #146	@ 0x92
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00c      	beq.n	8008704 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80086f0:	4619      	mov	r1, r3
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	2334      	movs	r3, #52	@ 0x34
 80086f6:	fb01 f303 	mul.w	r3, r1, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	33c1      	adds	r3, #193	@ 0xc1
 80086fe:	2201      	movs	r2, #1
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	e00b      	b.n	800871c <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800870a:	4619      	mov	r1, r3
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	2334      	movs	r3, #52	@ 0x34
 8008710:	fb01 f303 	mul.w	r3, r1, r3
 8008714:	4413      	add	r3, r2
 8008716:	33c1      	adds	r3, #193	@ 0xc1
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008722:	4619      	mov	r1, r3
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	2334      	movs	r3, #52	@ 0x34
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	4413      	add	r3, r2
 800872e:	3390      	adds	r3, #144	@ 0x90
 8008730:	2203      	movs	r2, #3
 8008732:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800873a:	4619      	mov	r1, r3
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	2334      	movs	r3, #52	@ 0x34
 8008740:	fb01 f303 	mul.w	r3, r1, r3
 8008744:	4413      	add	r3, r2
 8008746:	3391      	adds	r3, #145	@ 0x91
 8008748:	2200      	movs	r2, #0
 800874a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008752:	4619      	mov	r1, r3
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	2334      	movs	r3, #52	@ 0x34
 8008758:	fb01 f303 	mul.w	r3, r1, r3
 800875c:	4413      	add	r3, r2
 800875e:	3392      	adds	r3, #146	@ 0x92
 8008760:	2200      	movs	r2, #0
 8008762:	701a      	strb	r2, [r3, #0]
            break;
 8008764:	e17c      	b.n	8008a60 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d14a      	bne.n	8008802 <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008772:	4619      	mov	r1, r3
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	2334      	movs	r3, #52	@ 0x34
 8008778:	fb01 f303 	mul.w	r3, r1, r3
 800877c:	4413      	add	r3, r2
 800877e:	3392      	adds	r3, #146	@ 0x92
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d00c      	beq.n	80087a0 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800878c:	4619      	mov	r1, r3
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	2334      	movs	r3, #52	@ 0x34
 8008792:	fb01 f303 	mul.w	r3, r1, r3
 8008796:	4413      	add	r3, r2
 8008798:	33c1      	adds	r3, #193	@ 0xc1
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	e00b      	b.n	80087b8 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80087a6:	4619      	mov	r1, r3
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	2334      	movs	r3, #52	@ 0x34
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
 80087b0:	4413      	add	r3, r2
 80087b2:	33c1      	adds	r3, #193	@ 0xc1
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80087be:	4619      	mov	r1, r3
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	2334      	movs	r3, #52	@ 0x34
 80087c4:	fb01 f303 	mul.w	r3, r1, r3
 80087c8:	4413      	add	r3, r2
 80087ca:	3390      	adds	r3, #144	@ 0x90
 80087cc:	2205      	movs	r2, #5
 80087ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80087d6:	4619      	mov	r1, r3
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	2334      	movs	r3, #52	@ 0x34
 80087dc:	fb01 f303 	mul.w	r3, r1, r3
 80087e0:	4413      	add	r3, r2
 80087e2:	3391      	adds	r3, #145	@ 0x91
 80087e4:	2201      	movs	r2, #1
 80087e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80087ee:	4619      	mov	r1, r3
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	2334      	movs	r3, #52	@ 0x34
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	4413      	add	r3, r2
 80087fa:	3392      	adds	r3, #146	@ 0x92
 80087fc:	2202      	movs	r2, #2
 80087fe:	701a      	strb	r2, [r3, #0]
            break;
 8008800:	e12e      	b.n	8008a60 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b04      	cmp	r3, #4
 8008806:	f040 812b 	bne.w	8008a60 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008810:	4619      	mov	r1, r3
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	2334      	movs	r3, #52	@ 0x34
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	4413      	add	r3, r2
 800881c:	3390      	adds	r3, #144	@ 0x90
 800881e:	2208      	movs	r2, #8
 8008820:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008828:	4619      	mov	r1, r3
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	2334      	movs	r3, #52	@ 0x34
 800882e:	fb01 f303 	mul.w	r3, r1, r3
 8008832:	4413      	add	r3, r2
 8008834:	3391      	adds	r3, #145	@ 0x91
 8008836:	2202      	movs	r2, #2
 8008838:	701a      	strb	r2, [r3, #0]
            break;
 800883a:	e111      	b.n	8008a60 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008842:	b2d9      	uxtb	r1, r3
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800884a:	461a      	mov	r2, r3
 800884c:	2334      	movs	r3, #52	@ 0x34
 800884e:	fb02 f303 	mul.w	r3, r2, r3
 8008852:	3390      	adds	r3, #144	@ 0x90
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	4413      	add	r3, r2
 8008858:	3304      	adds	r3, #4
 800885a:	461a      	mov	r2, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fe14 	bl	800948a <USBH_MSC_SCSI_ReadCapacity>
 8008862:	4603      	mov	r3, r0
 8008864:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d120      	bne.n	80088ae <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008872:	4619      	mov	r1, r3
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	2334      	movs	r3, #52	@ 0x34
 8008878:	fb01 f303 	mul.w	r3, r1, r3
 800887c:	4413      	add	r3, r2
 800887e:	3390      	adds	r3, #144	@ 0x90
 8008880:	2201      	movs	r2, #1
 8008882:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800888a:	4619      	mov	r1, r3
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	2334      	movs	r3, #52	@ 0x34
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	4413      	add	r3, r2
 8008896:	3391      	adds	r3, #145	@ 0x91
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80088a2:	3301      	adds	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80088ac:	e0da      	b.n	8008a64 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d10c      	bne.n	80088ce <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80088ba:	4619      	mov	r1, r3
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	2334      	movs	r3, #52	@ 0x34
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	4413      	add	r3, r2
 80088c6:	3390      	adds	r3, #144	@ 0x90
 80088c8:	2205      	movs	r2, #5
 80088ca:	701a      	strb	r2, [r3, #0]
            break;
 80088cc:	e0ca      	b.n	8008a64 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	f040 80c7 	bne.w	8008a64 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80088dc:	4619      	mov	r1, r3
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	2334      	movs	r3, #52	@ 0x34
 80088e2:	fb01 f303 	mul.w	r3, r1, r3
 80088e6:	4413      	add	r3, r2
 80088e8:	3390      	adds	r3, #144	@ 0x90
 80088ea:	2208      	movs	r2, #8
 80088ec:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80088f4:	4619      	mov	r1, r3
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	2334      	movs	r3, #52	@ 0x34
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	3391      	adds	r3, #145	@ 0x91
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
            break;
 8008906:	e0ad      	b.n	8008a64 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800890e:	b2d9      	uxtb	r1, r3
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008916:	461a      	mov	r2, r3
 8008918:	2334      	movs	r3, #52	@ 0x34
 800891a:	fb02 f303 	mul.w	r3, r2, r3
 800891e:	3398      	adds	r3, #152	@ 0x98
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	4413      	add	r3, r2
 8008924:	3304      	adds	r3, #4
 8008926:	461a      	mov	r2, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fecd 	bl	80096c8 <USBH_MSC_SCSI_RequestSense>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d146      	bne.n	80089c6 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800893e:	4619      	mov	r1, r3
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	2334      	movs	r3, #52	@ 0x34
 8008944:	fb01 f303 	mul.w	r3, r1, r3
 8008948:	4413      	add	r3, r2
 800894a:	339c      	adds	r3, #156	@ 0x9c
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b06      	cmp	r3, #6
 8008950:	d00c      	beq.n	800896c <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008958:	4619      	mov	r1, r3
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	2334      	movs	r3, #52	@ 0x34
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	4413      	add	r3, r2
 8008964:	339c      	adds	r3, #156	@ 0x9c
 8008966:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008968:	2b02      	cmp	r3, #2
 800896a:	d117      	bne.n	800899c <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800897e:	4293      	cmp	r3, r2
 8008980:	d80c      	bhi.n	800899c <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008988:	4619      	mov	r1, r3
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	2334      	movs	r3, #52	@ 0x34
 800898e:	fb01 f303 	mul.w	r3, r1, r3
 8008992:	4413      	add	r3, r2
 8008994:	3390      	adds	r3, #144	@ 0x90
 8008996:	2202      	movs	r2, #2
 8008998:	701a      	strb	r2, [r3, #0]
                  break;
 800899a:	e066      	b.n	8008a6a <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80089a2:	4619      	mov	r1, r3
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	2334      	movs	r3, #52	@ 0x34
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	4413      	add	r3, r2
 80089ae:	3390      	adds	r3, #144	@ 0x90
 80089b0:	2201      	movs	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80089ba:	3301      	adds	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80089c4:	e050      	b.n	8008a68 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d118      	bne.n	80089fe <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80089d2:	4619      	mov	r1, r3
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	2334      	movs	r3, #52	@ 0x34
 80089d8:	fb01 f303 	mul.w	r3, r1, r3
 80089dc:	4413      	add	r3, r2
 80089de:	3390      	adds	r3, #144	@ 0x90
 80089e0:	2208      	movs	r2, #8
 80089e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80089ea:	4619      	mov	r1, r3
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	2334      	movs	r3, #52	@ 0x34
 80089f0:	fb01 f303 	mul.w	r3, r1, r3
 80089f4:	4413      	add	r3, r2
 80089f6:	3391      	adds	r3, #145	@ 0x91
 80089f8:	2202      	movs	r2, #2
 80089fa:	701a      	strb	r2, [r3, #0]
            break;
 80089fc:	e034      	b.n	8008a68 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d131      	bne.n	8008a68 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	2334      	movs	r3, #52	@ 0x34
 8008a10:	fb01 f303 	mul.w	r3, r1, r3
 8008a14:	4413      	add	r3, r2
 8008a16:	3390      	adds	r3, #144	@ 0x90
 8008a18:	2208      	movs	r2, #8
 8008a1a:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008a22:	4619      	mov	r1, r3
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	2334      	movs	r3, #52	@ 0x34
 8008a28:	fb01 f303 	mul.w	r3, r1, r3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3391      	adds	r3, #145	@ 0x91
 8008a30:	2202      	movs	r2, #2
 8008a32:	701a      	strb	r2, [r3, #0]
            break;
 8008a34:	e018      	b.n	8008a68 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8008a46:	e010      	b.n	8008a6a <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	220a      	movs	r2, #10
 8008a54:	731a      	strb	r2, [r3, #12]
      break;
 8008a56:	e045      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
            break;
 8008a58:	bf00      	nop
 8008a5a:	e043      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
            break;
 8008a5c:	bf00      	nop
 8008a5e:	e041      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
            break;
 8008a60:	bf00      	nop
 8008a62:	e03f      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
            break;
 8008a64:	bf00      	nop
 8008a66:	e03d      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
            break;
 8008a68:	bf00      	nop
      break;
 8008a6a:	e03b      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	7812      	ldrb	r2, [r2, #0]
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d228      	bcs.n	8008acc <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	2334      	movs	r3, #52	@ 0x34
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	4413      	add	r3, r2
 8008a98:	3391      	adds	r3, #145	@ 0x91
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d106      	bne.n	8008aae <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008aa6:	2102      	movs	r1, #2
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	4798      	blx	r3
 8008aac:	e005      	b.n	8008aba <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ab4:	2106      	movs	r1, #6
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
        MSC_Handle->lun++;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8008aca:	e00b      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	731a      	strb	r2, [r3, #12]
      break;
 8008ada:	e003      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae0:	e000      	b.n	8008ae4 <USBH_MSC_Process+0x5a0>
      break;
 8008ae2:	bf00      	nop
  }
  return error;
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop

08008af0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b088      	sub	sp, #32
 8008b0a:	af02      	add	r7, sp, #8
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008b20:	2301      	movs	r3, #1
 8008b22:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	2134      	movs	r1, #52	@ 0x34
 8008b2a:	fb01 f303 	mul.w	r3, r1, r3
 8008b2e:	4413      	add	r3, r2
 8008b30:	3390      	adds	r3, #144	@ 0x90
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b07      	cmp	r3, #7
 8008b36:	d03c      	beq.n	8008bb2 <USBH_MSC_RdWrProcess+0xac>
 8008b38:	2b07      	cmp	r3, #7
 8008b3a:	f300 80a8 	bgt.w	8008c8e <USBH_MSC_RdWrProcess+0x188>
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	d06c      	beq.n	8008c1c <USBH_MSC_RdWrProcess+0x116>
 8008b42:	2b06      	cmp	r3, #6
 8008b44:	f040 80a3 	bne.w	8008c8e <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008b48:	78f9      	ldrb	r1, [r7, #3]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2200      	movs	r2, #0
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fea7 	bl	80098a6 <USBH_MSC_SCSI_Read>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10b      	bne.n	8008b7a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	2134      	movs	r1, #52	@ 0x34
 8008b68:	fb01 f303 	mul.w	r3, r1, r3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3390      	adds	r3, #144	@ 0x90
 8008b70:	2201      	movs	r2, #1
 8008b72:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b78:	e08b      	b.n	8008c92 <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d109      	bne.n	8008b94 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	2134      	movs	r1, #52	@ 0x34
 8008b86:	fb01 f303 	mul.w	r3, r1, r3
 8008b8a:	4413      	add	r3, r2
 8008b8c:	3390      	adds	r3, #144	@ 0x90
 8008b8e:	2205      	movs	r2, #5
 8008b90:	701a      	strb	r2, [r3, #0]
      break;
 8008b92:	e07e      	b.n	8008c92 <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d17b      	bne.n	8008c92 <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	2134      	movs	r1, #52	@ 0x34
 8008ba0:	fb01 f303 	mul.w	r3, r1, r3
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3390      	adds	r3, #144	@ 0x90
 8008ba8:	2208      	movs	r2, #8
 8008baa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb0:	e06f      	b.n	8008c92 <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008bb2:	78f9      	ldrb	r1, [r7, #3]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	2200      	movs	r2, #0
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fe02 	bl	80097c6 <USBH_MSC_SCSI_Write>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10b      	bne.n	8008be4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	2134      	movs	r1, #52	@ 0x34
 8008bd2:	fb01 f303 	mul.w	r3, r1, r3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3390      	adds	r3, #144	@ 0x90
 8008bda:	2201      	movs	r2, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008be2:	e058      	b.n	8008c96 <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d109      	bne.n	8008bfe <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	2134      	movs	r1, #52	@ 0x34
 8008bf0:	fb01 f303 	mul.w	r3, r1, r3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	3390      	adds	r3, #144	@ 0x90
 8008bf8:	2205      	movs	r2, #5
 8008bfa:	701a      	strb	r2, [r3, #0]
      break;
 8008bfc:	e04b      	b.n	8008c96 <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d148      	bne.n	8008c96 <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	2134      	movs	r1, #52	@ 0x34
 8008c0a:	fb01 f303 	mul.w	r3, r1, r3
 8008c0e:	4413      	add	r3, r2
 8008c10:	3390      	adds	r3, #144	@ 0x90
 8008c12:	2208      	movs	r2, #8
 8008c14:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008c16:	2302      	movs	r3, #2
 8008c18:	75fb      	strb	r3, [r7, #23]
      break;
 8008c1a:	e03c      	b.n	8008c96 <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	2234      	movs	r2, #52	@ 0x34
 8008c20:	fb02 f303 	mul.w	r3, r2, r3
 8008c24:	3398      	adds	r3, #152	@ 0x98
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	4413      	add	r3, r2
 8008c2a:	1d1a      	adds	r2, r3, #4
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fd49 	bl	80096c8 <USBH_MSC_SCSI_RequestSense>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d114      	bne.n	8008c6a <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	2134      	movs	r1, #52	@ 0x34
 8008c46:	fb01 f303 	mul.w	r3, r1, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	3390      	adds	r3, #144	@ 0x90
 8008c4e:	2201      	movs	r2, #1
 8008c50:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	2134      	movs	r1, #52	@ 0x34
 8008c58:	fb01 f303 	mul.w	r3, r1, r3
 8008c5c:	4413      	add	r3, r2
 8008c5e:	3391      	adds	r3, #145	@ 0x91
 8008c60:	2202      	movs	r2, #2
 8008c62:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008c64:	2302      	movs	r3, #2
 8008c66:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c68:	e017      	b.n	8008c9a <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d014      	beq.n	8008c9a <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d111      	bne.n	8008c9a <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	2134      	movs	r1, #52	@ 0x34
 8008c7c:	fb01 f303 	mul.w	r3, r1, r3
 8008c80:	4413      	add	r3, r2
 8008c82:	3390      	adds	r3, #144	@ 0x90
 8008c84:	2208      	movs	r2, #8
 8008c86:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c8c:	e005      	b.n	8008c9a <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 8008c8e:	bf00      	nop
 8008c90:	e004      	b.n	8008c9c <USBH_MSC_RdWrProcess+0x196>
      break;
 8008c92:	bf00      	nop
 8008c94:	e002      	b.n	8008c9c <USBH_MSC_RdWrProcess+0x196>
      break;
 8008c96:	bf00      	nop
 8008c98:	e000      	b.n	8008c9c <USBH_MSC_RdWrProcess+0x196>
      break;
 8008c9a:	bf00      	nop

  }
  return error;
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b085      	sub	sp, #20
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b0b      	cmp	r3, #11
 8008cce:	d10c      	bne.n	8008cea <USBH_MSC_UnitIsReady+0x44>
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	2134      	movs	r1, #52	@ 0x34
 8008cd6:	fb01 f303 	mul.w	r3, r1, r3
 8008cda:	4413      	add	r3, r2
 8008cdc:	3391      	adds	r3, #145	@ 0x91
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d102      	bne.n	8008cea <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
 8008ce8:	e001      	b.n	8008cee <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	460b      	mov	r3, r1
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008d14:	7afb      	ldrb	r3, [r7, #11]
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b0b      	cmp	r3, #11
 8008d26:	d10d      	bne.n	8008d44 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	2234      	movs	r2, #52	@ 0x34
 8008d2c:	fb02 f303 	mul.w	r3, r2, r3
 8008d30:	3390      	adds	r3, #144	@ 0x90
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	4413      	add	r3, r2
 8008d36:	2234      	movs	r2, #52	@ 0x34
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f006 f9e7 	bl	800f10e <memcpy>
    return USBH_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e000      	b.n	8008d46 <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 8008d44:	2302      	movs	r3, #2
  }
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b088      	sub	sp, #32
 8008d52:	af02      	add	r7, sp, #8
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008d68:	7afb      	ldrb	r3, [r7, #11]
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00e      	beq.n	8008d9c <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008d84:	2b0b      	cmp	r3, #11
 8008d86:	d109      	bne.n	8008d9c <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	2134      	movs	r1, #52	@ 0x34
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	3390      	adds	r3, #144	@ 0x90
 8008d96:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d001      	beq.n	8008da0 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e032      	b.n	8008e06 <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	2134      	movs	r1, #52	@ 0x34
 8008da6:	fb01 f303 	mul.w	r3, r1, r3
 8008daa:	4413      	add	r3, r2
 8008dac:	3390      	adds	r3, #144	@ 0x90
 8008dae:	2206      	movs	r2, #6
 8008db0:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008db2:	7af9      	ldrb	r1, [r7, #11]
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fd72 	bl	80098a6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008dc8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008dca:	e013      	b.n	8008df4 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8008ddc:	fb01 f303 	mul.w	r3, r1, r3
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d805      	bhi.n	8008df0 <USBH_MSC_Read+0xa2>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 8008df0:	2302      	movs	r3, #2
 8008df2:	e008      	b.n	8008e06 <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008df4:	7afb      	ldrb	r3, [r7, #11]
 8008df6:	4619      	mov	r1, r3
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff fe84 	bl	8008b06 <USBH_MSC_RdWrProcess>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d0e3      	beq.n	8008dcc <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b088      	sub	sp, #32
 8008e12:	af02      	add	r7, sp, #8
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	603b      	str	r3, [r7, #0]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8008e28:	7afb      	ldrb	r3, [r7, #11]
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00e      	beq.n	8008e5c <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008e44:	2b0b      	cmp	r3, #11
 8008e46:	d109      	bne.n	8008e5c <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	2134      	movs	r1, #52	@ 0x34
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	4413      	add	r3, r2
 8008e54:	3390      	adds	r3, #144	@ 0x90
 8008e56:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d001      	beq.n	8008e60 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	e032      	b.n	8008ec6 <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008e60:	7afb      	ldrb	r3, [r7, #11]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	2134      	movs	r1, #52	@ 0x34
 8008e66:	fb01 f303 	mul.w	r3, r1, r3
 8008e6a:	4413      	add	r3, r2
 8008e6c:	3390      	adds	r3, #144	@ 0x90
 8008e6e:	2207      	movs	r2, #7
 8008e70:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008e72:	7af9      	ldrb	r1, [r7, #11]
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fca2 	bl	80097c6 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e88:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008e8a:	e013      	b.n	8008eb4 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	1ad2      	subs	r2, r2, r3
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	f242 7110 	movw	r1, #10000	@ 0x2710
 8008e9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d805      	bhi.n	8008eb0 <USBH_MSC_Write+0xa2>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e008      	b.n	8008ec6 <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008eb4:	7afb      	ldrb	r3, [r7, #11]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fe24 	bl	8008b06 <USBH_MSC_RdWrProcess>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d0e3      	beq.n	8008e8c <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2221      	movs	r2, #33	@ 0x21
 8008eda:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	22ff      	movs	r2, #255	@ 0xff
 8008ee0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 ff44 	bl	800ad86 <USBH_CtlReq>
 8008efe:	4603      	mov	r3, r0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	22a1      	movs	r2, #161	@ 0xa1
 8008f16:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	22fe      	movs	r2, #254	@ 0xfe
 8008f1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008f30:	2201      	movs	r2, #1
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 ff26 	bl	800ad86 <USBH_CtlReq>
 8008f3a:	4603      	mov	r3, r0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4a09      	ldr	r2, [pc, #36]	@ (8008f80 <USBH_MSC_BOT_Init+0x3c>)
 8008f5a:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4a09      	ldr	r2, [pc, #36]	@ (8008f84 <USBH_MSC_BOT_Init+0x40>)
 8008f60:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	43425355 	.word	0x43425355
 8008f84:	20304050 	.word	0x20304050

08008f88 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af02      	add	r7, sp, #8
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008f94:	2301      	movs	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	2b0a      	cmp	r3, #10
 8008fbc:	f200 819e 	bhi.w	80092fc <USBH_MSC_BOT_Process+0x374>
 8008fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <USBH_MSC_BOT_Process+0x40>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08008ff5 	.word	0x08008ff5
 8008fcc:	0800901d 	.word	0x0800901d
 8008fd0:	08009087 	.word	0x08009087
 8008fd4:	080090a5 	.word	0x080090a5
 8008fd8:	08009129 	.word	0x08009129
 8008fdc:	0800914b 	.word	0x0800914b
 8008fe0:	080091e3 	.word	0x080091e3
 8008fe4:	080091ff 	.word	0x080091ff
 8008fe8:	08009251 	.word	0x08009251
 8008fec:	08009281 	.word	0x08009281
 8008ff0:	080092e3 	.word	0x080092e3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	795b      	ldrb	r3, [r3, #5]
 800900e:	2201      	movs	r2, #1
 8009010:	9200      	str	r2, [sp, #0]
 8009012:	221f      	movs	r2, #31
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f002 f8c4 	bl	800b1a2 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800901a:	e17e      	b.n	800931a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	795b      	ldrb	r3, [r3, #5]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f004 ffac 	bl	800df80 <USBH_LL_GetURBState>
 8009028:	4603      	mov	r3, r0
 800902a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800902c:	7d3b      	ldrb	r3, [r7, #20]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d118      	bne.n	8009064 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00f      	beq.n	800905a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8009040:	b25b      	sxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	da04      	bge.n	8009050 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	2203      	movs	r2, #3
 800904a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800904e:	e157      	b.n	8009300 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	2205      	movs	r2, #5
 8009054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009058:	e152      	b.n	8009300 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2207      	movs	r2, #7
 800905e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009062:	e14d      	b.n	8009300 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009064:	7d3b      	ldrb	r3, [r7, #20]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d104      	bne.n	8009074 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009072:	e145      	b.n	8009300 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009074:	7d3b      	ldrb	r3, [r7, #20]
 8009076:	2b05      	cmp	r3, #5
 8009078:	f040 8142 	bne.w	8009300 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	220a      	movs	r2, #10
 8009080:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009084:	e13c      	b.n	8009300 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	895a      	ldrh	r2, [r3, #10]
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	791b      	ldrb	r3, [r3, #4]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f002 f8a9 	bl	800b1ec <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	2204      	movs	r2, #4
 800909e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 80090a2:	e13a      	b.n	800931a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	791b      	ldrb	r3, [r3, #4]
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f004 ff68 	bl	800df80 <USBH_LL_GetURBState>
 80090b0:	4603      	mov	r3, r0
 80090b2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80090b4:	7d3b      	ldrb	r3, [r7, #20]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d12d      	bne.n	8009116 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	8952      	ldrh	r2, [r2, #10]
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d910      	bls.n	80090e8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	8952      	ldrh	r2, [r2, #10]
 80090d0:	441a      	add	r2, r3
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	8952      	ldrh	r2, [r2, #10]
 80090e0:	1a9a      	subs	r2, r3, r2
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80090e6:	e002      	b.n	80090ee <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2200      	movs	r2, #0
 80090ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	895a      	ldrh	r2, [r3, #10]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	791b      	ldrb	r3, [r3, #4]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f002 f871 	bl	800b1ec <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800910a:	e0fb      	b.n	8009304 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	2207      	movs	r2, #7
 8009110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009114:	e0f6      	b.n	8009304 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009116:	7d3b      	ldrb	r3, [r7, #20]
 8009118:	2b05      	cmp	r3, #5
 800911a:	f040 80f3 	bne.w	8009304 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2209      	movs	r2, #9
 8009122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009126:	e0ed      	b.n	8009304 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	891a      	ldrh	r2, [r3, #8]
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	795b      	ldrb	r3, [r3, #5]
 8009136:	2001      	movs	r0, #1
 8009138:	9000      	str	r0, [sp, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f002 f831 	bl	800b1a2 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2206      	movs	r2, #6
 8009144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009148:	e0e7      	b.n	800931a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	795b      	ldrb	r3, [r3, #5]
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f004 ff15 	bl	800df80 <USBH_LL_GetURBState>
 8009156:	4603      	mov	r3, r0
 8009158:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800915a:	7d3b      	ldrb	r3, [r7, #20]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d12f      	bne.n	80091c0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	8912      	ldrh	r2, [r2, #8]
 8009168:	4293      	cmp	r3, r2
 800916a:	d910      	bls.n	800918e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	8912      	ldrh	r2, [r2, #8]
 8009176:	441a      	add	r2, r3
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	8912      	ldrh	r2, [r2, #8]
 8009186:	1a9a      	subs	r2, r3, r2
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800918c:	e002      	b.n	8009194 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2200      	movs	r2, #0
 8009192:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00c      	beq.n	80091b6 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	891a      	ldrh	r2, [r3, #8]
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	795b      	ldrb	r3, [r3, #5]
 80091aa:	2001      	movs	r0, #1
 80091ac:	9000      	str	r0, [sp, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 fff7 	bl	800b1a2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80091b4:	e0a8      	b.n	8009308 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2207      	movs	r2, #7
 80091ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80091be:	e0a3      	b.n	8009308 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091c0:	7d3b      	ldrb	r3, [r7, #20]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d104      	bne.n	80091d0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2205      	movs	r2, #5
 80091ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80091ce:	e09b      	b.n	8009308 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80091d0:	7d3b      	ldrb	r3, [r7, #20]
 80091d2:	2b05      	cmp	r3, #5
 80091d4:	f040 8098 	bne.w	8009308 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	220a      	movs	r2, #10
 80091dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80091e0:	e092      	b.n	8009308 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	791b      	ldrb	r3, [r3, #4]
 80091ec:	220d      	movs	r2, #13
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 fffc 	bl	800b1ec <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2208      	movs	r2, #8
 80091f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80091fc:	e08d      	b.n	800931a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	791b      	ldrb	r3, [r3, #4]
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f004 febb 	bl	800df80 <USBH_LL_GetURBState>
 800920a:	4603      	mov	r3, r0
 800920c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800920e:	7d3b      	ldrb	r3, [r7, #20]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d115      	bne.n	8009240 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f8a9 	bl	800937c <USBH_MSC_DecodeCSW>
 800922a:	4603      	mov	r3, r0
 800922c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800922e:	7d7b      	ldrb	r3, [r7, #21]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009238:	e068      	b.n	800930c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800923a:	2302      	movs	r3, #2
 800923c:	75fb      	strb	r3, [r7, #23]
      break;
 800923e:	e065      	b.n	800930c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009240:	7d3b      	ldrb	r3, [r7, #20]
 8009242:	2b05      	cmp	r3, #5
 8009244:	d162      	bne.n	800930c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2209      	movs	r2, #9
 800924a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800924e:	e05d      	b.n	800930c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	2200      	movs	r2, #0
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f864 	bl	8009324 <USBH_MSC_BOT_Abort>
 800925c:	4603      	mov	r3, r0
 800925e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009260:	7dbb      	ldrb	r3, [r7, #22]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d104      	bne.n	8009270 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2207      	movs	r2, #7
 800926a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800926e:	e04f      	b.n	8009310 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009270:	7dbb      	ldrb	r3, [r7, #22]
 8009272:	2b04      	cmp	r3, #4
 8009274:	d14c      	bne.n	8009310 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	220b      	movs	r2, #11
 800927a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800927e:	e047      	b.n	8009310 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	2201      	movs	r2, #1
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f84c 	bl	8009324 <USBH_MSC_BOT_Abort>
 800928c:	4603      	mov	r3, r0
 800928e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009290:	7dbb      	ldrb	r3, [r7, #22]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d11d      	bne.n	80092d2 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	795b      	ldrb	r3, [r3, #5]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f004 fecc 	bl	800e03a <USBH_LL_GetToggle>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	7959      	ldrb	r1, [r3, #5]
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	f1c3 0301 	rsb	r3, r3, #1
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	461a      	mov	r2, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f004 fe8d 	bl	800dfd4 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	791b      	ldrb	r3, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f004 fe86 	bl	800dfd4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	2209      	movs	r2, #9
 80092cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80092d0:	e020      	b.n	8009314 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80092d2:	7dbb      	ldrb	r3, [r7, #22]
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d11d      	bne.n	8009314 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	220b      	movs	r2, #11
 80092dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80092e0:	e018      	b.n	8009314 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fdf3 	bl	8008ece <USBH_MSC_BOT_REQ_Reset>
 80092e8:	4603      	mov	r3, r0
 80092ea:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d112      	bne.n	8009318 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 80092fa:	e00d      	b.n	8009318 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80092fc:	bf00      	nop
 80092fe:	e00c      	b.n	800931a <USBH_MSC_BOT_Process+0x392>
      break;
 8009300:	bf00      	nop
 8009302:	e00a      	b.n	800931a <USBH_MSC_BOT_Process+0x392>
      break;
 8009304:	bf00      	nop
 8009306:	e008      	b.n	800931a <USBH_MSC_BOT_Process+0x392>
      break;
 8009308:	bf00      	nop
 800930a:	e006      	b.n	800931a <USBH_MSC_BOT_Process+0x392>
      break;
 800930c:	bf00      	nop
 800930e:	e004      	b.n	800931a <USBH_MSC_BOT_Process+0x392>
      break;
 8009310:	bf00      	nop
 8009312:	e002      	b.n	800931a <USBH_MSC_BOT_Process+0x392>
      break;
 8009314:	bf00      	nop
 8009316:	e000      	b.n	800931a <USBH_MSC_BOT_Process+0x392>
      break;
 8009318:	bf00      	nop
  }
  return status;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
 8009330:	4613      	mov	r3, r2
 8009332:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009334:	2302      	movs	r3, #2
 8009336:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009342:	78bb      	ldrb	r3, [r7, #2]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <USBH_MSC_BOT_Abort+0x2a>
 8009348:	2b01      	cmp	r3, #1
 800934a:	d009      	beq.n	8009360 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800934c:	e011      	b.n	8009372 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	79db      	ldrb	r3, [r3, #7]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 f9e1 	bl	800a71c <USBH_ClrFeature>
 800935a:	4603      	mov	r3, r0
 800935c:	73fb      	strb	r3, [r7, #15]
      break;
 800935e:	e008      	b.n	8009372 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	799b      	ldrb	r3, [r3, #6]
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 f9d8 	bl	800a71c <USBH_ClrFeature>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]
      break;
 8009370:	bf00      	nop
  }
  return status;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800938e:	2301      	movs	r3, #1
 8009390:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	791b      	ldrb	r3, [r3, #4]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f004 fd5f 	bl	800de5c <USBH_LL_GetLastXferSize>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b0d      	cmp	r3, #13
 80093a2:	d002      	beq.n	80093aa <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 80093a4:	2302      	movs	r3, #2
 80093a6:	73fb      	strb	r3, [r7, #15]
 80093a8:	e024      	b.n	80093f4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093ae:	4a14      	ldr	r2, [pc, #80]	@ (8009400 <USBH_MSC_DecodeCSW+0x84>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d11d      	bne.n	80093f0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093bc:	429a      	cmp	r2, r3
 80093be:	d119      	bne.n	80093f4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
 80093ce:	e011      	b.n	80093f4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d102      	bne.n	80093e0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80093da:	2301      	movs	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
 80093de:	e009      	b.n	80093f4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d104      	bne.n	80093f4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80093ea:	2302      	movs	r3, #2
 80093ec:	73fb      	strb	r3, [r7, #15]
 80093ee:	e001      	b.n	80093f4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80093f0:	2302      	movs	r3, #2
 80093f2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	53425355 	.word	0x53425355

08009404 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009410:	2302      	movs	r3, #2
 8009412:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009424:	2b01      	cmp	r3, #1
 8009426:	d002      	beq.n	800942e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009428:	2b02      	cmp	r3, #2
 800942a:	d021      	beq.n	8009470 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800942c:	e028      	b.n	8009480 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2200      	movs	r2, #0
 8009432:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	220a      	movs	r2, #10
 8009440:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	3363      	adds	r3, #99	@ 0x63
 8009448:	2210      	movs	r2, #16
 800944a:	2100      	movs	r1, #0
 800944c:	4618      	mov	r0, r3
 800944e:	f005 fdcf 	bl	800eff0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2202      	movs	r2, #2
 8009466:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800946a:	2301      	movs	r3, #1
 800946c:	73fb      	strb	r3, [r7, #15]
      break;
 800946e:	e007      	b.n	8009480 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff fd87 	bl	8008f88 <USBH_MSC_BOT_Process>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]
      break;
 800947e:	bf00      	nop
  }

  return error;
 8009480:	7bfb      	ldrb	r3, [r7, #15]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b086      	sub	sp, #24
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	460b      	mov	r3, r1
 8009494:	607a      	str	r2, [r7, #4]
 8009496:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009498:	2301      	movs	r3, #1
 800949a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d002      	beq.n	80094b6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d027      	beq.n	8009504 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80094b4:	e05e      	b.n	8009574 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	2208      	movs	r2, #8
 80094ba:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2280      	movs	r2, #128	@ 0x80
 80094c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	220a      	movs	r2, #10
 80094c8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	3363      	adds	r3, #99	@ 0x63
 80094d0:	2210      	movs	r2, #16
 80094d2:	2100      	movs	r1, #0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f005 fd8b 	bl	800eff0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2225      	movs	r2, #37	@ 0x25
 80094de:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	2202      	movs	r2, #2
 80094ee:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f103 0210 	add.w	r2, r3, #16
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80094fe:	2301      	movs	r3, #1
 8009500:	75fb      	strb	r3, [r7, #23]
      break;
 8009502:	e037      	b.n	8009574 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009504:	7afb      	ldrb	r3, [r7, #11]
 8009506:	4619      	mov	r1, r3
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff fd3d 	bl	8008f88 <USBH_MSC_BOT_Process>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d12c      	bne.n	8009572 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800951e:	3303      	adds	r3, #3
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800952a:	3302      	adds	r3, #2
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009538:	3301      	adds	r3, #1
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800953e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	061b      	lsls	r3, r3, #24
 800954a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009556:	3307      	adds	r3, #7
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009562:	3306      	adds	r3, #6
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	b29b      	uxth	r3, r3
 800956a:	4313      	orrs	r3, r2
 800956c:	b29a      	uxth	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	809a      	strh	r2, [r3, #4]
      break;
 8009572:	bf00      	nop
  }

  return error;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b086      	sub	sp, #24
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	460b      	mov	r3, r1
 8009588:	607a      	str	r2, [r7, #4]
 800958a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800958c:	2302      	movs	r3, #2
 800958e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d002      	beq.n	80095aa <USBH_MSC_SCSI_Inquiry+0x2c>
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d03d      	beq.n	8009624 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80095a8:	e089      	b.n	80096be <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2224      	movs	r2, #36	@ 0x24
 80095ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2280      	movs	r2, #128	@ 0x80
 80095b4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	220a      	movs	r2, #10
 80095bc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	3363      	adds	r3, #99	@ 0x63
 80095c4:	220a      	movs	r2, #10
 80095c6:	2100      	movs	r1, #0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f005 fd11 	bl	800eff0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2212      	movs	r2, #18
 80095d2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	015b      	lsls	r3, r3, #5
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2224      	movs	r2, #36	@ 0x24
 80095f6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2202      	movs	r2, #2
 800960e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f103 0210 	add.w	r2, r3, #16
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800961e:	2301      	movs	r3, #1
 8009620:	75fb      	strb	r3, [r7, #23]
      break;
 8009622:	e04c      	b.n	80096be <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009624:	7afb      	ldrb	r3, [r7, #11]
 8009626:	4619      	mov	r1, r3
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7ff fcad 	bl	8008f88 <USBH_MSC_BOT_Process>
 800962e:	4603      	mov	r3, r0
 8009630:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d141      	bne.n	80096bc <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009638:	2222      	movs	r2, #34	@ 0x22
 800963a:	2100      	movs	r1, #0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f005 fcd7 	bl	800eff0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 031f 	and.w	r3, r3, #31
 800964e:	b2da      	uxtb	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	095b      	lsrs	r3, r3, #5
 800965e:	b2da      	uxtb	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800966a:	3301      	adds	r3, #1
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	b25b      	sxtb	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	da03      	bge.n	800967c <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	709a      	strb	r2, [r3, #2]
 800967a:	e002      	b.n	8009682 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	1cd8      	adds	r0, r3, #3
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800968c:	3308      	adds	r3, #8
 800968e:	2208      	movs	r2, #8
 8009690:	4619      	mov	r1, r3
 8009692:	f005 fd3c 	bl	800f10e <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f103 000c 	add.w	r0, r3, #12
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096a2:	3310      	adds	r3, #16
 80096a4:	2210      	movs	r2, #16
 80096a6:	4619      	mov	r1, r3
 80096a8:	f005 fd31 	bl	800f10e <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	331d      	adds	r3, #29
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 80096b6:	3220      	adds	r2, #32
 80096b8:	6812      	ldr	r2, [r2, #0]
 80096ba:	601a      	str	r2, [r3, #0]
      break;
 80096bc:	bf00      	nop
  }

  return error;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	460b      	mov	r3, r1
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80096d6:	2302      	movs	r3, #2
 80096d8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d002      	beq.n	80096f4 <USBH_MSC_SCSI_RequestSense+0x2c>
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d03d      	beq.n	800976e <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 80096f2:	e063      	b.n	80097bc <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	220e      	movs	r2, #14
 80096f8:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2280      	movs	r2, #128	@ 0x80
 80096fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	220a      	movs	r2, #10
 8009706:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	3363      	adds	r3, #99	@ 0x63
 800970e:	2210      	movs	r2, #16
 8009710:	2100      	movs	r1, #0
 8009712:	4618      	mov	r0, r3
 8009714:	f005 fc6c 	bl	800eff0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	2203      	movs	r2, #3
 800971c:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	015b      	lsls	r3, r3, #5
 8009724:	b2da      	uxtb	r2, r3
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	220e      	movs	r2, #14
 8009740:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	2202      	movs	r2, #2
 8009758:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f103 0210 	add.w	r2, r3, #16
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009768:	2301      	movs	r3, #1
 800976a:	75fb      	strb	r3, [r7, #23]
      break;
 800976c:	e026      	b.n	80097bc <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800976e:	7afb      	ldrb	r3, [r7, #11]
 8009770:	4619      	mov	r1, r3
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f7ff fc08 	bl	8008f88 <USBH_MSC_BOT_Process>
 8009778:	4603      	mov	r3, r0
 800977a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800977c:	7dfb      	ldrb	r3, [r7, #23]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d11b      	bne.n	80097ba <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009788:	3302      	adds	r3, #2
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f003 030f 	and.w	r3, r3, #15
 8009790:	b2da      	uxtb	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800979c:	7b1a      	ldrb	r2, [r3, #12]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097a8:	7b5a      	ldrb	r2, [r3, #13]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	2b3a      	cmp	r3, #58	@ 0x3a
 80097b4:	d101      	bne.n	80097ba <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 80097b6:	2304      	movs	r3, #4
 80097b8:	75fb      	strb	r3, [r7, #23]
      break;
 80097ba:	bf00      	nop
  }

  return error;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b086      	sub	sp, #24
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
 80097d2:	460b      	mov	r3, r1
 80097d4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80097d6:	2302      	movs	r3, #2
 80097d8:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d002      	beq.n	80097f4 <USBH_MSC_SCSI_Write+0x2e>
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d04c      	beq.n	800988c <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80097f2:	e053      	b.n	800989c <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	2134      	movs	r1, #52	@ 0x34
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	4413      	add	r3, r2
 8009800:	3398      	adds	r3, #152	@ 0x98
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	fb03 f202 	mul.w	r2, r3, r2
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	220a      	movs	r2, #10
 800981c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	3363      	adds	r3, #99	@ 0x63
 8009824:	2210      	movs	r2, #16
 8009826:	2100      	movs	r1, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f005 fbe1 	bl	800eff0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	222a      	movs	r2, #42	@ 0x2a
 8009832:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8009836:	79fa      	ldrb	r2, [r7, #7]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800983e:	79ba      	ldrb	r2, [r7, #6]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8009846:	797a      	ldrb	r2, [r7, #5]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800984e:	1d3b      	adds	r3, r7, #4
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8009858:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8009862:	f107 0320 	add.w	r3, r7, #32
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2202      	movs	r2, #2
 800987a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009886:	2301      	movs	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]
      break;
 800988a:	e007      	b.n	800989c <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800988c:	7afb      	ldrb	r3, [r7, #11]
 800988e:	4619      	mov	r1, r3
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff fb79 	bl	8008f88 <USBH_MSC_BOT_Process>
 8009896:	4603      	mov	r3, r0
 8009898:	75fb      	strb	r3, [r7, #23]
      break;
 800989a:	bf00      	nop
  }

  return error;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b086      	sub	sp, #24
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]
 80098b2:	460b      	mov	r3, r1
 80098b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80098b6:	2302      	movs	r3, #2
 80098b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d002      	beq.n	80098d4 <USBH_MSC_SCSI_Read+0x2e>
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d04c      	beq.n	800996c <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80098d2:	e053      	b.n	800997c <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 80098d4:	7afb      	ldrb	r3, [r7, #11]
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	2134      	movs	r1, #52	@ 0x34
 80098da:	fb01 f303 	mul.w	r3, r1, r3
 80098de:	4413      	add	r3, r2
 80098e0:	3398      	adds	r3, #152	@ 0x98
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	fb03 f202 	mul.w	r2, r3, r2
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2280      	movs	r2, #128	@ 0x80
 80098f4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	220a      	movs	r2, #10
 80098fc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3363      	adds	r3, #99	@ 0x63
 8009904:	2210      	movs	r2, #16
 8009906:	2100      	movs	r1, #0
 8009908:	4618      	mov	r0, r3
 800990a:	f005 fb71 	bl	800eff0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2228      	movs	r2, #40	@ 0x28
 8009912:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8009916:	79fa      	ldrb	r2, [r7, #7]
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800991e:	79ba      	ldrb	r2, [r7, #6]
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8009926:	797a      	ldrb	r2, [r7, #5]
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800992e:	1d3b      	adds	r3, r7, #4
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8009938:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8009942:	f107 0320 	add.w	r3, r7, #32
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2202      	movs	r2, #2
 800995a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009966:	2301      	movs	r3, #1
 8009968:	75fb      	strb	r3, [r7, #23]
      break;
 800996a:	e007      	b.n	800997c <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	4619      	mov	r1, r3
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f7ff fb09 	bl	8008f88 <USBH_MSC_BOT_Process>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]
      break;
 800997a:	bf00      	nop
  }

  return error;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800999a:	2302      	movs	r3, #2
 800999c:	e029      	b.n	80099f2 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	79fa      	ldrb	r2, [r7, #7]
 80099a2:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 f81f 	bl	80099fa <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f004 f982 	bl	800dcf4 <USBH_LL_Init>

  return USBH_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a06:	2300      	movs	r3, #0
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	e009      	b.n	8009a20 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	33e0      	adds	r3, #224	@ 0xe0
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	2200      	movs	r2, #0
 8009a18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b0f      	cmp	r3, #15
 8009a24:	d9f2      	bls.n	8009a0c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e009      	b.n	8009a40 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a46:	d3f1      	bcc.n	8009a2c <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2240      	movs	r2, #64	@ 0x40
 8009a6c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	331c      	adds	r3, #28
 8009a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f005 faa6 	bl	800eff0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009aae:	2100      	movs	r1, #0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f005 fa9d 	bl	800eff0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009abc:	2212      	movs	r2, #18
 8009abe:	2100      	movs	r1, #0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f005 fa95 	bl	800eff0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009acc:	223e      	movs	r2, #62	@ 0x3e
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f005 fa8d 	bl	800eff0 <memset>

  return USBH_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d016      	beq.n	8009b22 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10e      	bne.n	8009b1c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009b04:	1c59      	adds	r1, r3, #1
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	33de      	adds	r3, #222	@ 0xde
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
 8009b1a:	e004      	b.n	8009b26 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	73fb      	strb	r3, [r7, #15]
 8009b20:	e001      	b.n	8009b26 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009b22:	2302      	movs	r3, #2
 8009b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d204      	bcs.n	8009b5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	78fa      	ldrb	r2, [r7, #3]
 8009b54:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009b58:	e001      	b.n	8009b5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	4608      	mov	r0, r1
 8009b76:	4611      	mov	r1, r2
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	70fb      	strb	r3, [r7, #3]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	70bb      	strb	r3, [r7, #2]
 8009b82:	4613      	mov	r3, r2
 8009b84:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009b94:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009b96:	e025      	b.n	8009be4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	221a      	movs	r2, #26
 8009b9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	795b      	ldrb	r3, [r3, #5]
 8009bae:	78fa      	ldrb	r2, [r7, #3]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d002      	beq.n	8009bba <USBH_FindInterface+0x4e>
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	2bff      	cmp	r3, #255	@ 0xff
 8009bb8:	d111      	bne.n	8009bde <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009bbe:	78ba      	ldrb	r2, [r7, #2]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d002      	beq.n	8009bca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bc4:	78bb      	ldrb	r3, [r7, #2]
 8009bc6:	2bff      	cmp	r3, #255	@ 0xff
 8009bc8:	d109      	bne.n	8009bde <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bce:	787a      	ldrb	r2, [r7, #1]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d002      	beq.n	8009bda <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009bd4:	787b      	ldrb	r3, [r7, #1]
 8009bd6:	2bff      	cmp	r3, #255	@ 0xff
 8009bd8:	d101      	bne.n	8009bde <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	e006      	b.n	8009bec <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	3301      	adds	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d9d6      	bls.n	8009b98 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009bea:	23ff      	movs	r3, #255	@ 0xff
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	371c      	adds	r7, #28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f004 f8b3 	bl	800dd6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009c06:	2101      	movs	r1, #1
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f004 f9cc 	bl	800dfa6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af04      	add	r7, sp, #16
 8009c1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009c20:	2302      	movs	r3, #2
 8009c22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d102      	bne.n	8009c3a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2203      	movs	r2, #3
 8009c38:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b0b      	cmp	r3, #11
 8009c42:	f200 81bb 	bhi.w	8009fbc <USBH_Process+0x3a4>
 8009c46:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <USBH_Process+0x34>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c7d 	.word	0x08009c7d
 8009c50:	08009caf 	.word	0x08009caf
 8009c54:	08009d17 	.word	0x08009d17
 8009c58:	08009f57 	.word	0x08009f57
 8009c5c:	08009fbd 	.word	0x08009fbd
 8009c60:	08009db7 	.word	0x08009db7
 8009c64:	08009efd 	.word	0x08009efd
 8009c68:	08009ded 	.word	0x08009ded
 8009c6c:	08009e0d 	.word	0x08009e0d
 8009c70:	08009e2b 	.word	0x08009e2b
 8009c74:	08009e6f 	.word	0x08009e6f
 8009c78:	08009f3f 	.word	0x08009f3f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 819b 	beq.w	8009fc0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009c90:	20c8      	movs	r0, #200	@ 0xc8
 8009c92:	f004 fa05 	bl	800e0a0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f004 f8c5 	bl	800de26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009cac:	e188      	b.n	8009fc0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d107      	bne.n	8009cc8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cc6:	e18a      	b.n	8009fde <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009cce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009cd2:	d914      	bls.n	8009cfe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009cda:	3301      	adds	r3, #1
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d903      	bls.n	8009cf6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	220d      	movs	r2, #13
 8009cf2:	701a      	strb	r2, [r3, #0]
      break;
 8009cf4:	e173      	b.n	8009fde <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	701a      	strb	r2, [r3, #0]
      break;
 8009cfc:	e16f      	b.n	8009fde <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009d04:	f103 020a 	add.w	r2, r3, #10
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009d0e:	200a      	movs	r0, #10
 8009d10:	f004 f9c6 	bl	800e0a0 <USBH_Delay>
      break;
 8009d14:	e163      	b.n	8009fde <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d005      	beq.n	8009d2c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d26:	2104      	movs	r1, #4
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009d2c:	2064      	movs	r0, #100	@ 0x64
 8009d2e:	f004 f9b7 	bl	800e0a0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f004 f850 	bl	800ddd8 <USBH_LL_GetSpeed>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2205      	movs	r2, #5
 8009d46:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009d48:	2100      	movs	r1, #0
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 fa9b 	bl	800b286 <USBH_AllocPipe>
 8009d50:	4603      	mov	r3, r0
 8009d52:	461a      	mov	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009d58:	2180      	movs	r1, #128	@ 0x80
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 fa93 	bl	800b286 <USBH_AllocPipe>
 8009d60:	4603      	mov	r3, r0
 8009d62:	461a      	mov	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	7919      	ldrb	r1, [r3, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d7c:	9202      	str	r2, [sp, #8]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	9201      	str	r2, [sp, #4]
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	4603      	mov	r3, r0
 8009d86:	2280      	movs	r2, #128	@ 0x80
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 fa4d 	bl	800b228 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7959      	ldrb	r1, [r3, #5]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009da2:	9202      	str	r2, [sp, #8]
 8009da4:	2200      	movs	r2, #0
 8009da6:	9201      	str	r2, [sp, #4]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	4603      	mov	r3, r0
 8009dac:	2200      	movs	r2, #0
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f001 fa3a 	bl	800b228 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009db4:	e113      	b.n	8009fde <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f916 	bl	8009fe8 <USBH_HandleEnum>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f040 80fd 	bne.w	8009fc4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d103      	bne.n	8009de4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2208      	movs	r2, #8
 8009de0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009de2:	e0ef      	b.n	8009fc4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2207      	movs	r2, #7
 8009de8:	701a      	strb	r2, [r3, #0]
      break;
 8009dea:	e0eb      	b.n	8009fc4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 80e8 	beq.w	8009fc8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dfe:	2101      	movs	r1, #1
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2208      	movs	r2, #8
 8009e08:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009e0a:	e0dd      	b.n	8009fc8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fc3a 	bl	800a68e <USBH_SetCfg>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f040 80d5 	bne.w	8009fcc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2209      	movs	r2, #9
 8009e26:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e28:	e0d0      	b.n	8009fcc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009e30:	f003 0320 	and.w	r3, r3, #32
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d016      	beq.n	8009e66 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009e38:	2101      	movs	r1, #1
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fc4a 	bl	800a6d4 <USBH_SetFeature>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d103      	bne.n	8009e54 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	220a      	movs	r2, #10
 8009e50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e52:	e0bd      	b.n	8009fd0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	f040 80b9 	bne.w	8009fd0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	220a      	movs	r2, #10
 8009e62:	701a      	strb	r2, [r3, #0]
      break;
 8009e64:	e0b4      	b.n	8009fd0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	220a      	movs	r2, #10
 8009e6a:	701a      	strb	r2, [r3, #0]
      break;
 8009e6c:	e0b0      	b.n	8009fd0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 80ad 	beq.w	8009fd4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]
 8009e86:	e016      	b.n	8009eb6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009e88:	7bfa      	ldrb	r2, [r7, #15]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	32de      	adds	r2, #222	@ 0xde
 8009e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e92:	791a      	ldrb	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d108      	bne.n	8009eb0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009e9e:	7bfa      	ldrb	r2, [r7, #15]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	32de      	adds	r2, #222	@ 0xde
 8009ea4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009eae:	e005      	b.n	8009ebc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	73fb      	strb	r3, [r7, #15]
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0e5      	beq.n	8009e88 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d016      	beq.n	8009ef4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	4798      	blx	r3
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d109      	bne.n	8009eec <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2206      	movs	r2, #6
 8009edc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ee4:	2103      	movs	r1, #3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009eea:	e073      	b.n	8009fd4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	220d      	movs	r2, #13
 8009ef0:	701a      	strb	r2, [r3, #0]
      break;
 8009ef2:	e06f      	b.n	8009fd4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	220d      	movs	r2, #13
 8009ef8:	701a      	strb	r2, [r3, #0]
      break;
 8009efa:	e06b      	b.n	8009fd4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d017      	beq.n	8009f36 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	4798      	blx	r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d103      	bne.n	8009f26 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	220b      	movs	r2, #11
 8009f22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f24:	e058      	b.n	8009fd8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d154      	bne.n	8009fd8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	220d      	movs	r2, #13
 8009f32:	701a      	strb	r2, [r3, #0]
      break;
 8009f34:	e050      	b.n	8009fd8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	220d      	movs	r2, #13
 8009f3a:	701a      	strb	r2, [r3, #0]
      break;
 8009f3c:	e04c      	b.n	8009fd8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d049      	beq.n	8009fdc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	4798      	blx	r3
      }
      break;
 8009f54:	e042      	b.n	8009fdc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff fd4b 	bl	80099fa <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d009      	beq.n	8009f82 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f92:	2105      	movs	r1, #5
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d107      	bne.n	8009fb4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff fe23 	bl	8009bf8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fb2:	e014      	b.n	8009fde <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f003 fed9 	bl	800dd6c <USBH_LL_Start>
      break;
 8009fba:	e010      	b.n	8009fde <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009fbc:	bf00      	nop
 8009fbe:	e00e      	b.n	8009fde <USBH_Process+0x3c6>
      break;
 8009fc0:	bf00      	nop
 8009fc2:	e00c      	b.n	8009fde <USBH_Process+0x3c6>
      break;
 8009fc4:	bf00      	nop
 8009fc6:	e00a      	b.n	8009fde <USBH_Process+0x3c6>
    break;
 8009fc8:	bf00      	nop
 8009fca:	e008      	b.n	8009fde <USBH_Process+0x3c6>
      break;
 8009fcc:	bf00      	nop
 8009fce:	e006      	b.n	8009fde <USBH_Process+0x3c6>
      break;
 8009fd0:	bf00      	nop
 8009fd2:	e004      	b.n	8009fde <USBH_Process+0x3c6>
      break;
 8009fd4:	bf00      	nop
 8009fd6:	e002      	b.n	8009fde <USBH_Process+0x3c6>
      break;
 8009fd8:	bf00      	nop
 8009fda:	e000      	b.n	8009fde <USBH_Process+0x3c6>
      break;
 8009fdc:	bf00      	nop
  }
  return USBH_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af04      	add	r7, sp, #16
 8009fee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	785b      	ldrb	r3, [r3, #1]
 8009ffc:	2b07      	cmp	r3, #7
 8009ffe:	f200 81bd 	bhi.w	800a37c <USBH_HandleEnum+0x394>
 800a002:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <USBH_HandleEnum+0x20>)
 800a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a008:	0800a029 	.word	0x0800a029
 800a00c:	0800a0e3 	.word	0x0800a0e3
 800a010:	0800a14d 	.word	0x0800a14d
 800a014:	0800a1d7 	.word	0x0800a1d7
 800a018:	0800a241 	.word	0x0800a241
 800a01c:	0800a2b1 	.word	0x0800a2b1
 800a020:	0800a2f7 	.word	0x0800a2f7
 800a024:	0800a33d 	.word	0x0800a33d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a028:	2108      	movs	r1, #8
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa4c 	bl	800a4c8 <USBH_Get_DevDesc>
 800a030:	4603      	mov	r3, r0
 800a032:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d12e      	bne.n	800a098 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	7919      	ldrb	r1, [r3, #4]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a05e:	9202      	str	r2, [sp, #8]
 800a060:	2200      	movs	r2, #0
 800a062:	9201      	str	r2, [sp, #4]
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	4603      	mov	r3, r0
 800a068:	2280      	movs	r2, #128	@ 0x80
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f001 f8dc 	bl	800b228 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	7959      	ldrb	r1, [r3, #5]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a084:	9202      	str	r2, [sp, #8]
 800a086:	2200      	movs	r2, #0
 800a088:	9201      	str	r2, [sp, #4]
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	4603      	mov	r3, r0
 800a08e:	2200      	movs	r2, #0
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 f8c9 	bl	800b228 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a096:	e173      	b.n	800a380 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	f040 8170 	bne.w	800a380 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d903      	bls.n	800a0c2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	220d      	movs	r2, #13
 800a0be:	701a      	strb	r2, [r3, #0]
      break;
 800a0c0:	e15e      	b.n	800a380 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	795b      	ldrb	r3, [r3, #5]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 f8fd 	bl	800b2c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	791b      	ldrb	r3, [r3, #4]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f001 f8f7 	bl	800b2c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	701a      	strb	r2, [r3, #0]
      break;
 800a0e0:	e14e      	b.n	800a380 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a0e2:	2112      	movs	r1, #18
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f9ef 	bl	800a4c8 <USBH_Get_DevDesc>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0fa:	e143      	b.n	800a384 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	f040 8140 	bne.w	800a384 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a10a:	3301      	adds	r3, #1
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d903      	bls.n	800a126 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	220d      	movs	r2, #13
 800a122:	701a      	strb	r2, [r3, #0]
      break;
 800a124:	e12e      	b.n	800a384 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	795b      	ldrb	r3, [r3, #5]
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 f8cb 	bl	800b2c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	791b      	ldrb	r3, [r3, #4]
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 f8c5 	bl	800b2c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	701a      	strb	r2, [r3, #0]
      break;
 800a14a:	e11b      	b.n	800a384 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a14c:	2101      	movs	r1, #1
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa79 	bl	800a646 <USBH_SetAddress>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a158:	7bbb      	ldrb	r3, [r7, #14]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d130      	bne.n	800a1c0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a15e:	2002      	movs	r0, #2
 800a160:	f003 ff9e 	bl	800e0a0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2203      	movs	r2, #3
 800a170:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7919      	ldrb	r1, [r3, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a186:	9202      	str	r2, [sp, #8]
 800a188:	2200      	movs	r2, #0
 800a18a:	9201      	str	r2, [sp, #4]
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4603      	mov	r3, r0
 800a190:	2280      	movs	r2, #128	@ 0x80
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 f848 	bl	800b228 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7959      	ldrb	r1, [r3, #5]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1ac:	9202      	str	r2, [sp, #8]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	9201      	str	r2, [sp, #4]
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 f835 	bl	800b228 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a1be:	e0e3      	b.n	800a388 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	f040 80e0 	bne.w	800a388 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	220d      	movs	r2, #13
 800a1cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	705a      	strb	r2, [r3, #1]
      break;
 800a1d4:	e0d8      	b.n	800a388 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a1d6:	2109      	movs	r1, #9
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f9a1 	bl	800a520 <USBH_Get_CfgDesc>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d103      	bne.n	800a1f0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2204      	movs	r2, #4
 800a1ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a1ee:	e0cd      	b.n	800a38c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	f040 80ca 	bne.w	800a38c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a1fe:	3301      	adds	r3, #1
 800a200:	b2da      	uxtb	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d903      	bls.n	800a21a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	220d      	movs	r2, #13
 800a216:	701a      	strb	r2, [r3, #0]
      break;
 800a218:	e0b8      	b.n	800a38c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	795b      	ldrb	r3, [r3, #5]
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f001 f851 	bl	800b2c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	791b      	ldrb	r3, [r3, #4]
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f001 f84b 	bl	800b2c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
      break;
 800a23e:	e0a5      	b.n	800a38c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f969 	bl	800a520 <USBH_Get_CfgDesc>
 800a24e:	4603      	mov	r3, r0
 800a250:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d103      	bne.n	800a260 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2205      	movs	r2, #5
 800a25c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a25e:	e097      	b.n	800a390 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a260:	7bbb      	ldrb	r3, [r7, #14]
 800a262:	2b03      	cmp	r3, #3
 800a264:	f040 8094 	bne.w	800a390 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a26e:	3301      	adds	r3, #1
 800a270:	b2da      	uxtb	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d903      	bls.n	800a28a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	220d      	movs	r2, #13
 800a286:	701a      	strb	r2, [r3, #0]
      break;
 800a288:	e082      	b.n	800a390 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	795b      	ldrb	r3, [r3, #5]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 f819 	bl	800b2c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	791b      	ldrb	r3, [r3, #4]
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f001 f813 	bl	800b2c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	701a      	strb	r2, [r3, #0]
      break;
 800a2ae:	e06f      	b.n	800a390 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d019      	beq.n	800a2ee <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a2c6:	23ff      	movs	r3, #255	@ 0xff
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f953 	bl	800a574 <USBH_Get_StringDesc>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2206      	movs	r2, #6
 800a2dc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a2de:	e059      	b.n	800a394 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d156      	bne.n	800a394 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2206      	movs	r2, #6
 800a2ea:	705a      	strb	r2, [r3, #1]
      break;
 800a2ec:	e052      	b.n	800a394 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2206      	movs	r2, #6
 800a2f2:	705a      	strb	r2, [r3, #1]
      break;
 800a2f4:	e04e      	b.n	800a394 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d019      	beq.n	800a334 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a30c:	23ff      	movs	r3, #255	@ 0xff
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f930 	bl	800a574 <USBH_Get_StringDesc>
 800a314:	4603      	mov	r3, r0
 800a316:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d103      	bne.n	800a326 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2207      	movs	r2, #7
 800a322:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a324:	e038      	b.n	800a398 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a326:	7bbb      	ldrb	r3, [r7, #14]
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d135      	bne.n	800a398 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2207      	movs	r2, #7
 800a330:	705a      	strb	r2, [r3, #1]
      break;
 800a332:	e031      	b.n	800a398 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2207      	movs	r2, #7
 800a338:	705a      	strb	r2, [r3, #1]
      break;
 800a33a:	e02d      	b.n	800a398 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a342:	2b00      	cmp	r3, #0
 800a344:	d017      	beq.n	800a376 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a352:	23ff      	movs	r3, #255	@ 0xff
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f90d 	bl	800a574 <USBH_Get_StringDesc>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a35e:	7bbb      	ldrb	r3, [r7, #14]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a368:	e018      	b.n	800a39c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d115      	bne.n	800a39c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
      break;
 800a374:	e012      	b.n	800a39c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	e00f      	b.n	800a39c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a37c:	bf00      	nop
 800a37e:	e00e      	b.n	800a39e <USBH_HandleEnum+0x3b6>
      break;
 800a380:	bf00      	nop
 800a382:	e00c      	b.n	800a39e <USBH_HandleEnum+0x3b6>
      break;
 800a384:	bf00      	nop
 800a386:	e00a      	b.n	800a39e <USBH_HandleEnum+0x3b6>
      break;
 800a388:	bf00      	nop
 800a38a:	e008      	b.n	800a39e <USBH_HandleEnum+0x3b6>
      break;
 800a38c:	bf00      	nop
 800a38e:	e006      	b.n	800a39e <USBH_HandleEnum+0x3b6>
      break;
 800a390:	bf00      	nop
 800a392:	e004      	b.n	800a39e <USBH_HandleEnum+0x3b6>
      break;
 800a394:	bf00      	nop
 800a396:	e002      	b.n	800a39e <USBH_HandleEnum+0x3b6>
      break;
 800a398:	bf00      	nop
 800a39a:	e000      	b.n	800a39e <USBH_HandleEnum+0x3b6>
      break;
 800a39c:	bf00      	nop
  }
  return Status;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f804 	bl	800a3ea <USBH_HandleSof>
}
 800a3e2:	bf00      	nop
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b0b      	cmp	r3, #11
 800a3fa:	d10a      	bne.n	800a412 <USBH_HandleSof+0x28>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d005      	beq.n	800a412 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	4798      	blx	r3
  }
}
 800a412:	bf00      	nop
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a42a:	bf00      	nop
}
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a446:	bf00      	nop
}
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f003 fc7e 	bl	800dda2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	791b      	ldrb	r3, [r3, #4]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 ff0b 	bl	800b2c8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	795b      	ldrb	r3, [r3, #5]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 ff05 	bl	800b2c8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a4d4:	887b      	ldrh	r3, [r7, #2]
 800a4d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4da:	d901      	bls.n	800a4e0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e01b      	b.n	800a518 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a4e6:	887b      	ldrh	r3, [r7, #2]
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f872 	bl	800a5dc <USBH_GetDescriptor>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a508:	887a      	ldrh	r2, [r7, #2]
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f929 	bl	800a764 <USBH_ParseDevDesc>
 800a512:	4603      	mov	r3, r0
 800a514:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a516:	7bfb      	ldrb	r3, [r7, #15]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af02      	add	r7, sp, #8
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	331c      	adds	r3, #28
 800a530:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a532:	887b      	ldrh	r3, [r7, #2]
 800a534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a538:	d901      	bls.n	800a53e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e016      	b.n	800a56c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a53e:	887b      	ldrh	r3, [r7, #2]
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a548:	2100      	movs	r1, #0
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f846 	bl	800a5dc <USBH_GetDescriptor>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a554:	7bfb      	ldrb	r3, [r7, #15]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d107      	bne.n	800a56a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a55a:	887b      	ldrh	r3, [r7, #2]
 800a55c:	461a      	mov	r2, r3
 800a55e:	68b9      	ldr	r1, [r7, #8]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f9af 	bl	800a8c4 <USBH_ParseCfgDesc>
 800a566:	4603      	mov	r3, r0
 800a568:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af02      	add	r7, sp, #8
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	461a      	mov	r2, r3
 800a580:	460b      	mov	r3, r1
 800a582:	72fb      	strb	r3, [r7, #11]
 800a584:	4613      	mov	r3, r2
 800a586:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a588:	893b      	ldrh	r3, [r7, #8]
 800a58a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a58e:	d802      	bhi.n	800a596 <USBH_Get_StringDesc+0x22>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a596:	2303      	movs	r3, #3
 800a598:	e01c      	b.n	800a5d4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a59a:	7afb      	ldrb	r3, [r7, #11]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a5a2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a5aa:	893b      	ldrh	r3, [r7, #8]
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 f812 	bl	800a5dc <USBH_GetDescriptor>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d107      	bne.n	800a5d2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a5c8:	893a      	ldrh	r2, [r7, #8]
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fb8d 	bl	800acec <USBH_ParseStringDesc>
  }

  return status;
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	607b      	str	r3, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	72fb      	strb	r3, [r7, #11]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	789b      	ldrb	r3, [r3, #2]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d11c      	bne.n	800a630 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a5f6:	7afb      	ldrb	r3, [r7, #11]
 800a5f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2206      	movs	r2, #6
 800a606:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	893a      	ldrh	r2, [r7, #8]
 800a60c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a60e:	893b      	ldrh	r3, [r7, #8]
 800a610:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a618:	d104      	bne.n	800a624 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a620:	829a      	strh	r2, [r3, #20]
 800a622:	e002      	b.n	800a62a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	8b3a      	ldrh	r2, [r7, #24]
 800a62e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a630:	8b3b      	ldrh	r3, [r7, #24]
 800a632:	461a      	mov	r2, r3
 800a634:	6879      	ldr	r1, [r7, #4]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f000 fba5 	bl	800ad86 <USBH_CtlReq>
 800a63c:	4603      	mov	r3, r0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	460b      	mov	r3, r1
 800a650:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	789b      	ldrb	r3, [r3, #2]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d10f      	bne.n	800a67a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2205      	movs	r2, #5
 800a664:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a666:	78fb      	ldrb	r3, [r7, #3]
 800a668:	b29a      	uxth	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a67a:	2200      	movs	r2, #0
 800a67c:	2100      	movs	r1, #0
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fb81 	bl	800ad86 <USBH_CtlReq>
 800a684:	4603      	mov	r3, r0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	460b      	mov	r3, r1
 800a698:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	789b      	ldrb	r3, [r3, #2]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d10e      	bne.n	800a6c0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2209      	movs	r2, #9
 800a6ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	887a      	ldrh	r2, [r7, #2]
 800a6b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fb5e 	bl	800ad86 <USBH_CtlReq>
 800a6ca:	4603      	mov	r3, r0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	789b      	ldrb	r3, [r3, #2]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d10f      	bne.n	800a708 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a708:	2200      	movs	r2, #0
 800a70a:	2100      	movs	r1, #0
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fb3a 	bl	800ad86 <USBH_CtlReq>
 800a712:	4603      	mov	r3, r0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	789b      	ldrb	r3, [r3, #2]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d10f      	bne.n	800a750 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	b29a      	uxth	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a750:	2200      	movs	r2, #0
 800a752:	2100      	movs	r1, #0
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fb16 	bl	800ad86 <USBH_CtlReq>
 800a75a:	4603      	mov	r3, r0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	4613      	mov	r3, r2
 800a770:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a778:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a784:	2302      	movs	r3, #2
 800a786:	e094      	b.n	800a8b2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	785a      	ldrb	r2, [r3, #1]
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	3302      	adds	r3, #2
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	3303      	adds	r3, #3
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	021b      	lsls	r3, r3, #8
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	791a      	ldrb	r2, [r3, #4]
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	795a      	ldrb	r2, [r3, #5]
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	799a      	ldrb	r2, [r3, #6]
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	79da      	ldrb	r2, [r3, #7]
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d004      	beq.n	800a7e6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d11b      	bne.n	800a81e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	79db      	ldrb	r3, [r3, #7]
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	dc0f      	bgt.n	800a80e <USBH_ParseDevDesc+0xaa>
 800a7ee:	2b08      	cmp	r3, #8
 800a7f0:	db0f      	blt.n	800a812 <USBH_ParseDevDesc+0xae>
 800a7f2:	3b08      	subs	r3, #8
 800a7f4:	4a32      	ldr	r2, [pc, #200]	@ (800a8c0 <USBH_ParseDevDesc+0x15c>)
 800a7f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bf14      	ite	ne
 800a802:	2301      	movne	r3, #1
 800a804:	2300      	moveq	r3, #0
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d106      	bne.n	800a81a <USBH_ParseDevDesc+0xb6>
 800a80c:	e001      	b.n	800a812 <USBH_ParseDevDesc+0xae>
 800a80e:	2b40      	cmp	r3, #64	@ 0x40
 800a810:	d003      	beq.n	800a81a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	2208      	movs	r2, #8
 800a816:	71da      	strb	r2, [r3, #7]
        break;
 800a818:	e000      	b.n	800a81c <USBH_ParseDevDesc+0xb8>
        break;
 800a81a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a81c:	e00e      	b.n	800a83c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a824:	2b02      	cmp	r3, #2
 800a826:	d107      	bne.n	800a838 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	79db      	ldrb	r3, [r3, #7]
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d005      	beq.n	800a83c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2208      	movs	r2, #8
 800a834:	71da      	strb	r2, [r3, #7]
 800a836:	e001      	b.n	800a83c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a838:	2303      	movs	r3, #3
 800a83a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a83c:	88fb      	ldrh	r3, [r7, #6]
 800a83e:	2b08      	cmp	r3, #8
 800a840:	d936      	bls.n	800a8b0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	3308      	adds	r3, #8
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	3309      	adds	r3, #9
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	021b      	lsls	r3, r3, #8
 800a852:	b29b      	uxth	r3, r3
 800a854:	4313      	orrs	r3, r2
 800a856:	b29a      	uxth	r2, r3
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	330a      	adds	r3, #10
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	330b      	adds	r3, #11
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	021b      	lsls	r3, r3, #8
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	4313      	orrs	r3, r2
 800a870:	b29a      	uxth	r2, r3
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	330c      	adds	r3, #12
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	461a      	mov	r2, r3
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	330d      	adds	r3, #13
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	021b      	lsls	r3, r3, #8
 800a886:	b29b      	uxth	r3, r3
 800a888:	4313      	orrs	r3, r2
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	7b9a      	ldrb	r2, [r3, #14]
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	7bda      	ldrb	r2, [r3, #15]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	7c1a      	ldrb	r2, [r3, #16]
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	7c5a      	ldrb	r2, [r3, #17]
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	01000101 	.word	0x01000101

0800a8c4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08c      	sub	sp, #48	@ 0x30
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a8d8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	e0da      	b.n	800aaac <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b09      	cmp	r3, #9
 800a900:	d002      	beq.n	800a908 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a904:	2209      	movs	r2, #9
 800a906:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	785a      	ldrb	r2, [r3, #1]
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	3302      	adds	r3, #2
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	3303      	adds	r3, #3
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	021b      	lsls	r3, r3, #8
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4313      	orrs	r3, r2
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a932:	bf28      	it	cs
 800a934:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a938:	b29a      	uxth	r2, r3
 800a93a:	6a3b      	ldr	r3, [r7, #32]
 800a93c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	791a      	ldrb	r2, [r3, #4]
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	795a      	ldrb	r2, [r3, #5]
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	799a      	ldrb	r2, [r3, #6]
 800a952:	6a3b      	ldr	r3, [r7, #32]
 800a954:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	79da      	ldrb	r2, [r3, #7]
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	7a1a      	ldrb	r2, [r3, #8]
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a966:	88fb      	ldrh	r3, [r7, #6]
 800a968:	2b09      	cmp	r3, #9
 800a96a:	f240 809d 	bls.w	800aaa8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a96e:	2309      	movs	r3, #9
 800a970:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a972:	2300      	movs	r3, #0
 800a974:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a976:	e081      	b.n	800aa7c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a978:	f107 0316 	add.w	r3, r7, #22
 800a97c:	4619      	mov	r1, r3
 800a97e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a980:	f000 f9e7 	bl	800ad52 <USBH_GetNextDesc>
 800a984:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	d176      	bne.n	800aa7c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	2b09      	cmp	r3, #9
 800a994:	d002      	beq.n	800a99c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a998:	2209      	movs	r2, #9
 800a99a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a99c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9a0:	221a      	movs	r2, #26
 800a9a2:	fb02 f303 	mul.w	r3, r2, r3
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	6a3a      	ldr	r2, [r7, #32]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3302      	adds	r3, #2
 800a9ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a9b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9b2:	69f8      	ldr	r0, [r7, #28]
 800a9b4:	f000 f87e 	bl	800aab4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a9c2:	e043      	b.n	800aa4c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a9c4:	f107 0316 	add.w	r3, r7, #22
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9cc:	f000 f9c1 	bl	800ad52 <USBH_GetNextDesc>
 800a9d0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d4:	785b      	ldrb	r3, [r3, #1]
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	d138      	bne.n	800aa4c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	795b      	ldrb	r3, [r3, #5]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d113      	bne.n	800aa0a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d003      	beq.n	800a9f2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	799b      	ldrb	r3, [r3, #6]
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d10b      	bne.n	800aa0a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	79db      	ldrb	r3, [r3, #7]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10b      	bne.n	800aa12 <USBH_ParseCfgDesc+0x14e>
 800a9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2b09      	cmp	r3, #9
 800aa00:	d007      	beq.n	800aa12 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800aa02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa04:	2209      	movs	r2, #9
 800aa06:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aa08:	e003      	b.n	800aa12 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800aa0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa0c:	2207      	movs	r2, #7
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	e000      	b.n	800aa14 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aa12:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aa14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa18:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa1c:	3201      	adds	r2, #1
 800aa1e:	00d2      	lsls	r2, r2, #3
 800aa20:	211a      	movs	r1, #26
 800aa22:	fb01 f303 	mul.w	r3, r1, r3
 800aa26:	4413      	add	r3, r2
 800aa28:	3308      	adds	r3, #8
 800aa2a:	6a3a      	ldr	r2, [r7, #32]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	3304      	adds	r3, #4
 800aa30:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800aa32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa34:	69b9      	ldr	r1, [r7, #24]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f000 f870 	bl	800ab1c <USBH_ParseEPDesc>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800aa42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa46:	3301      	adds	r3, #1
 800aa48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	791b      	ldrb	r3, [r3, #4]
 800aa50:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d204      	bcs.n	800aa62 <USBH_ParseCfgDesc+0x19e>
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	885a      	ldrh	r2, [r3, #2]
 800aa5c:	8afb      	ldrh	r3, [r7, #22]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d8b0      	bhi.n	800a9c4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	791b      	ldrb	r3, [r3, #4]
 800aa66:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d201      	bcs.n	800aa72 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e01c      	b.n	800aaac <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800aa72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa76:	3301      	adds	r3, #1
 800aa78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d805      	bhi.n	800aa90 <USBH_ParseCfgDesc+0x1cc>
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	885a      	ldrh	r2, [r3, #2]
 800aa88:	8afb      	ldrh	r3, [r7, #22]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	f63f af74 	bhi.w	800a978 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	791b      	ldrb	r3, [r3, #4]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	bf28      	it	cs
 800aa98:	2302      	movcs	r3, #2
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d201      	bcs.n	800aaa8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e001      	b.n	800aaac <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800aaa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3730      	adds	r7, #48	@ 0x30
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	781a      	ldrb	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	785a      	ldrb	r2, [r3, #1]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	789a      	ldrb	r2, [r3, #2]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	78da      	ldrb	r2, [r3, #3]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	3304      	adds	r3, #4
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	bf28      	it	cs
 800aae8:	2302      	movcs	r3, #2
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	795a      	ldrb	r2, [r3, #5]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	799a      	ldrb	r2, [r3, #6]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	79da      	ldrb	r2, [r3, #7]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	7a1a      	ldrb	r2, [r3, #8]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	721a      	strb	r2, [r3, #8]
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	781a      	ldrb	r2, [r3, #0]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	785a      	ldrb	r2, [r3, #1]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	789a      	ldrb	r2, [r3, #2]
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	78da      	ldrb	r2, [r3, #3]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	3305      	adds	r3, #5
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	021b      	lsls	r3, r3, #8
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	799a      	ldrb	r2, [r3, #6]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	889b      	ldrh	r3, [r3, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d009      	beq.n	800ab8a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ab7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab7e:	d804      	bhi.n	800ab8a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ab84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab88:	d901      	bls.n	800ab8e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d136      	bne.n	800ac06 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	78db      	ldrb	r3, [r3, #3]
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d108      	bne.n	800abb6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	889b      	ldrh	r3, [r3, #4]
 800aba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abac:	f240 8097 	bls.w	800acde <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800abb0:	2303      	movs	r3, #3
 800abb2:	75fb      	strb	r3, [r7, #23]
 800abb4:	e093      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	78db      	ldrb	r3, [r3, #3]
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d107      	bne.n	800abd2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	889b      	ldrh	r3, [r3, #4]
 800abc6:	2b40      	cmp	r3, #64	@ 0x40
 800abc8:	f240 8089 	bls.w	800acde <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800abcc:	2303      	movs	r3, #3
 800abce:	75fb      	strb	r3, [r7, #23]
 800abd0:	e085      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	78db      	ldrb	r3, [r3, #3]
 800abd6:	f003 0303 	and.w	r3, r3, #3
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d005      	beq.n	800abea <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	78db      	ldrb	r3, [r3, #3]
 800abe2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d10a      	bne.n	800ac00 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	799b      	ldrb	r3, [r3, #6]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <USBH_ParseEPDesc+0xde>
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	799b      	ldrb	r3, [r3, #6]
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	d970      	bls.n	800acdc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800abfa:	2303      	movs	r3, #3
 800abfc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800abfe:	e06d      	b.n	800acdc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ac00:	2303      	movs	r3, #3
 800ac02:	75fb      	strb	r3, [r7, #23]
 800ac04:	e06b      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d13c      	bne.n	800ac8a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	78db      	ldrb	r3, [r3, #3]
 800ac14:	f003 0303 	and.w	r3, r3, #3
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d005      	beq.n	800ac28 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	78db      	ldrb	r3, [r3, #3]
 800ac20:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d106      	bne.n	800ac36 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	889b      	ldrh	r3, [r3, #4]
 800ac2c:	2b40      	cmp	r3, #64	@ 0x40
 800ac2e:	d956      	bls.n	800acde <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac30:	2303      	movs	r3, #3
 800ac32:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac34:	e053      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	78db      	ldrb	r3, [r3, #3]
 800ac3a:	f003 0303 	and.w	r3, r3, #3
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d10e      	bne.n	800ac60 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	799b      	ldrb	r3, [r3, #6]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ac4e:	2b10      	cmp	r3, #16
 800ac50:	d803      	bhi.n	800ac5a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ac56:	2b40      	cmp	r3, #64	@ 0x40
 800ac58:	d941      	bls.n	800acde <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	75fb      	strb	r3, [r7, #23]
 800ac5e:	e03e      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	78db      	ldrb	r3, [r3, #3]
 800ac64:	f003 0303 	and.w	r3, r3, #3
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d10b      	bne.n	800ac84 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	799b      	ldrb	r3, [r3, #6]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d004      	beq.n	800ac7e <USBH_ParseEPDesc+0x162>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	889b      	ldrh	r3, [r3, #4]
 800ac78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac7c:	d32f      	bcc.n	800acde <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	75fb      	strb	r3, [r7, #23]
 800ac82:	e02c      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ac84:	2303      	movs	r3, #3
 800ac86:	75fb      	strb	r3, [r7, #23]
 800ac88:	e029      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d120      	bne.n	800acd6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	78db      	ldrb	r3, [r3, #3]
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d106      	bne.n	800acae <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	889b      	ldrh	r3, [r3, #4]
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d01a      	beq.n	800acde <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aca8:	2303      	movs	r3, #3
 800acaa:	75fb      	strb	r3, [r7, #23]
 800acac:	e017      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	78db      	ldrb	r3, [r3, #3]
 800acb2:	f003 0303 	and.w	r3, r3, #3
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d10a      	bne.n	800acd0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	799b      	ldrb	r3, [r3, #6]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d003      	beq.n	800acca <USBH_ParseEPDesc+0x1ae>
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	889b      	ldrh	r3, [r3, #4]
 800acc6:	2b08      	cmp	r3, #8
 800acc8:	d909      	bls.n	800acde <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800acca:	2303      	movs	r3, #3
 800accc:	75fb      	strb	r3, [r7, #23]
 800acce:	e006      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800acd0:	2303      	movs	r3, #3
 800acd2:	75fb      	strb	r3, [r7, #23]
 800acd4:	e003      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800acd6:	2303      	movs	r3, #3
 800acd8:	75fb      	strb	r3, [r7, #23]
 800acda:	e000      	b.n	800acde <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800acdc:	bf00      	nop
  }

  return status;
 800acde:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	371c      	adds	r7, #28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	4613      	mov	r3, r2
 800acf8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3301      	adds	r3, #1
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	2b03      	cmp	r3, #3
 800ad02:	d120      	bne.n	800ad46 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	1e9a      	subs	r2, r3, #2
 800ad0a:	88fb      	ldrh	r3, [r7, #6]
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	bf28      	it	cs
 800ad10:	4613      	movcs	r3, r2
 800ad12:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3302      	adds	r3, #2
 800ad18:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	82fb      	strh	r3, [r7, #22]
 800ad1e:	e00b      	b.n	800ad38 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ad20:	8afb      	ldrh	r3, [r7, #22]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	4413      	add	r3, r2
 800ad26:	781a      	ldrb	r2, [r3, #0]
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ad32:	8afb      	ldrh	r3, [r7, #22]
 800ad34:	3302      	adds	r3, #2
 800ad36:	82fb      	strh	r3, [r7, #22]
 800ad38:	8afa      	ldrh	r2, [r7, #22]
 800ad3a:	8abb      	ldrh	r3, [r7, #20]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d3ef      	bcc.n	800ad20 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2200      	movs	r2, #0
 800ad44:	701a      	strb	r2, [r3, #0]
  }
}
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b085      	sub	sp, #20
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	7812      	ldrb	r2, [r2, #0]
 800ad64:	4413      	add	r3, r2
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4413      	add	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad78:	68fb      	ldr	r3, [r7, #12]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b086      	sub	sp, #24
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	4613      	mov	r3, r2
 800ad92:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ad94:	2301      	movs	r3, #1
 800ad96:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	789b      	ldrb	r3, [r3, #2]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d002      	beq.n	800ada6 <USBH_CtlReq+0x20>
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d00f      	beq.n	800adc4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ada4:	e027      	b.n	800adf6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	88fa      	ldrh	r2, [r7, #6]
 800adb0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2202      	movs	r2, #2
 800adbc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800adbe:	2301      	movs	r3, #1
 800adc0:	75fb      	strb	r3, [r7, #23]
      break;
 800adc2:	e018      	b.n	800adf6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f81b 	bl	800ae00 <USBH_HandleControl>
 800adca:	4603      	mov	r3, r0
 800adcc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <USBH_CtlReq+0x54>
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	2b03      	cmp	r3, #3
 800add8:	d106      	bne.n	800ade8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	761a      	strb	r2, [r3, #24]
      break;
 800ade6:	e005      	b.n	800adf4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d102      	bne.n	800adf4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	709a      	strb	r2, [r3, #2]
      break;
 800adf4:	bf00      	nop
  }
  return status;
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af02      	add	r7, sp, #8
 800ae06:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	7e1b      	ldrb	r3, [r3, #24]
 800ae14:	3b01      	subs	r3, #1
 800ae16:	2b0a      	cmp	r3, #10
 800ae18:	f200 8156 	bhi.w	800b0c8 <USBH_HandleControl+0x2c8>
 800ae1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae24 <USBH_HandleControl+0x24>)
 800ae1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae22:	bf00      	nop
 800ae24:	0800ae51 	.word	0x0800ae51
 800ae28:	0800ae6b 	.word	0x0800ae6b
 800ae2c:	0800aed5 	.word	0x0800aed5
 800ae30:	0800aefb 	.word	0x0800aefb
 800ae34:	0800af33 	.word	0x0800af33
 800ae38:	0800af5d 	.word	0x0800af5d
 800ae3c:	0800afaf 	.word	0x0800afaf
 800ae40:	0800afd1 	.word	0x0800afd1
 800ae44:	0800b00d 	.word	0x0800b00d
 800ae48:	0800b033 	.word	0x0800b033
 800ae4c:	0800b071 	.word	0x0800b071
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f103 0110 	add.w	r1, r3, #16
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	795b      	ldrb	r3, [r3, #5]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f943 	bl	800b0e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2202      	movs	r2, #2
 800ae66:	761a      	strb	r2, [r3, #24]
      break;
 800ae68:	e139      	b.n	800b0de <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	795b      	ldrb	r3, [r3, #5]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f003 f885 	bl	800df80 <USBH_LL_GetURBState>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae7a:	7bbb      	ldrb	r3, [r7, #14]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d11e      	bne.n	800aebe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	7c1b      	ldrb	r3, [r3, #16]
 800ae84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ae88:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	8adb      	ldrh	r3, [r3, #22]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ae92:	7b7b      	ldrb	r3, [r7, #13]
 800ae94:	2b80      	cmp	r3, #128	@ 0x80
 800ae96:	d103      	bne.n	800aea0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2203      	movs	r2, #3
 800ae9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae9e:	e115      	b.n	800b0cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2205      	movs	r2, #5
 800aea4:	761a      	strb	r2, [r3, #24]
      break;
 800aea6:	e111      	b.n	800b0cc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800aea8:	7b7b      	ldrb	r3, [r7, #13]
 800aeaa:	2b80      	cmp	r3, #128	@ 0x80
 800aeac:	d103      	bne.n	800aeb6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2209      	movs	r2, #9
 800aeb2:	761a      	strb	r2, [r3, #24]
      break;
 800aeb4:	e10a      	b.n	800b0cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2207      	movs	r2, #7
 800aeba:	761a      	strb	r2, [r3, #24]
      break;
 800aebc:	e106      	b.n	800b0cc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	2b04      	cmp	r3, #4
 800aec2:	d003      	beq.n	800aecc <USBH_HandleControl+0xcc>
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	f040 8100 	bne.w	800b0cc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	220b      	movs	r2, #11
 800aed0:	761a      	strb	r2, [r3, #24]
      break;
 800aed2:	e0fb      	b.n	800b0cc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6899      	ldr	r1, [r3, #8]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	899a      	ldrh	r2, [r3, #12]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	791b      	ldrb	r3, [r3, #4]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f93a 	bl	800b166 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2204      	movs	r2, #4
 800aef6:	761a      	strb	r2, [r3, #24]
      break;
 800aef8:	e0f1      	b.n	800b0de <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	791b      	ldrb	r3, [r3, #4]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f003 f83d 	bl	800df80 <USBH_LL_GetURBState>
 800af06:	4603      	mov	r3, r0
 800af08:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800af0a:	7bbb      	ldrb	r3, [r7, #14]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d102      	bne.n	800af16 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2209      	movs	r2, #9
 800af14:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	2b05      	cmp	r3, #5
 800af1a:	d102      	bne.n	800af22 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800af1c:	2303      	movs	r3, #3
 800af1e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af20:	e0d6      	b.n	800b0d0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	2b04      	cmp	r3, #4
 800af26:	f040 80d3 	bne.w	800b0d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	220b      	movs	r2, #11
 800af2e:	761a      	strb	r2, [r3, #24]
      break;
 800af30:	e0ce      	b.n	800b0d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6899      	ldr	r1, [r3, #8]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	899a      	ldrh	r2, [r3, #12]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	795b      	ldrb	r3, [r3, #5]
 800af3e:	2001      	movs	r0, #1
 800af40:	9000      	str	r0, [sp, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f8ea 	bl	800b11c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800af4e:	b29a      	uxth	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2206      	movs	r2, #6
 800af58:	761a      	strb	r2, [r3, #24]
      break;
 800af5a:	e0c0      	b.n	800b0de <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	795b      	ldrb	r3, [r3, #5]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f003 f80c 	bl	800df80 <USBH_LL_GetURBState>
 800af68:	4603      	mov	r3, r0
 800af6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d103      	bne.n	800af7a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2207      	movs	r2, #7
 800af76:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af78:	e0ac      	b.n	800b0d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b05      	cmp	r3, #5
 800af7e:	d105      	bne.n	800af8c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	220c      	movs	r2, #12
 800af84:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800af86:	2303      	movs	r3, #3
 800af88:	73fb      	strb	r3, [r7, #15]
      break;
 800af8a:	e0a3      	b.n	800b0d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af8c:	7bbb      	ldrb	r3, [r7, #14]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d103      	bne.n	800af9a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2205      	movs	r2, #5
 800af96:	761a      	strb	r2, [r3, #24]
      break;
 800af98:	e09c      	b.n	800b0d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	f040 8099 	bne.w	800b0d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	220b      	movs	r2, #11
 800afa6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800afa8:	2302      	movs	r3, #2
 800afaa:	73fb      	strb	r3, [r7, #15]
      break;
 800afac:	e092      	b.n	800b0d4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	791b      	ldrb	r3, [r3, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	2100      	movs	r1, #0
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f8d5 	bl	800b166 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2208      	movs	r2, #8
 800afcc:	761a      	strb	r2, [r3, #24]

      break;
 800afce:	e086      	b.n	800b0de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	791b      	ldrb	r3, [r3, #4]
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f002 ffd2 	bl	800df80 <USBH_LL_GetURBState>
 800afdc:	4603      	mov	r3, r0
 800afde:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d105      	bne.n	800aff2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	220d      	movs	r2, #13
 800afea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aff0:	e072      	b.n	800b0d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d103      	bne.n	800b000 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	220b      	movs	r2, #11
 800affc:	761a      	strb	r2, [r3, #24]
      break;
 800affe:	e06b      	b.n	800b0d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	2b05      	cmp	r3, #5
 800b004:	d168      	bne.n	800b0d8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b006:	2303      	movs	r3, #3
 800b008:	73fb      	strb	r3, [r7, #15]
      break;
 800b00a:	e065      	b.n	800b0d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	795b      	ldrb	r3, [r3, #5]
 800b010:	2201      	movs	r2, #1
 800b012:	9200      	str	r2, [sp, #0]
 800b014:	2200      	movs	r2, #0
 800b016:	2100      	movs	r1, #0
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f87f 	bl	800b11c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b024:	b29a      	uxth	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	220a      	movs	r2, #10
 800b02e:	761a      	strb	r2, [r3, #24]
      break;
 800b030:	e055      	b.n	800b0de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	795b      	ldrb	r3, [r3, #5]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f002 ffa1 	bl	800df80 <USBH_LL_GetURBState>
 800b03e:	4603      	mov	r3, r0
 800b040:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d105      	bne.n	800b054 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	220d      	movs	r2, #13
 800b050:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b052:	e043      	b.n	800b0dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	2b02      	cmp	r3, #2
 800b058:	d103      	bne.n	800b062 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2209      	movs	r2, #9
 800b05e:	761a      	strb	r2, [r3, #24]
      break;
 800b060:	e03c      	b.n	800b0dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	2b04      	cmp	r3, #4
 800b066:	d139      	bne.n	800b0dc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	220b      	movs	r2, #11
 800b06c:	761a      	strb	r2, [r3, #24]
      break;
 800b06e:	e035      	b.n	800b0dc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	7e5b      	ldrb	r3, [r3, #25]
 800b074:	3301      	adds	r3, #1
 800b076:	b2da      	uxtb	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	765a      	strb	r2, [r3, #25]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7e5b      	ldrb	r3, [r3, #25]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d806      	bhi.n	800b092 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b090:	e025      	b.n	800b0de <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b098:	2106      	movs	r1, #6
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	795b      	ldrb	r3, [r3, #5]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f90c 	bl	800b2c8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	791b      	ldrb	r3, [r3, #4]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f906 	bl	800b2c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c6:	e00a      	b.n	800b0de <USBH_HandleControl+0x2de>

    default:
      break;
 800b0c8:	bf00      	nop
 800b0ca:	e008      	b.n	800b0de <USBH_HandleControl+0x2de>
      break;
 800b0cc:	bf00      	nop
 800b0ce:	e006      	b.n	800b0de <USBH_HandleControl+0x2de>
      break;
 800b0d0:	bf00      	nop
 800b0d2:	e004      	b.n	800b0de <USBH_HandleControl+0x2de>
      break;
 800b0d4:	bf00      	nop
 800b0d6:	e002      	b.n	800b0de <USBH_HandleControl+0x2de>
      break;
 800b0d8:	bf00      	nop
 800b0da:	e000      	b.n	800b0de <USBH_HandleControl+0x2de>
      break;
 800b0dc:	bf00      	nop
  }

  return status;
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af04      	add	r7, sp, #16
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0f6:	79f9      	ldrb	r1, [r7, #7]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	9303      	str	r3, [sp, #12]
 800b0fc:	2308      	movs	r3, #8
 800b0fe:	9302      	str	r3, [sp, #8]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	9301      	str	r3, [sp, #4]
 800b104:	2300      	movs	r3, #0
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	2300      	movs	r3, #0
 800b10a:	2200      	movs	r2, #0
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f002 ff06 	bl	800df1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b088      	sub	sp, #32
 800b120:	af04      	add	r7, sp, #16
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	4611      	mov	r1, r2
 800b128:	461a      	mov	r2, r3
 800b12a:	460b      	mov	r3, r1
 800b12c:	80fb      	strh	r3, [r7, #6]
 800b12e:	4613      	mov	r3, r2
 800b130:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b140:	7979      	ldrb	r1, [r7, #5]
 800b142:	7e3b      	ldrb	r3, [r7, #24]
 800b144:	9303      	str	r3, [sp, #12]
 800b146:	88fb      	ldrh	r3, [r7, #6]
 800b148:	9302      	str	r3, [sp, #8]
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	2301      	movs	r3, #1
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	2300      	movs	r3, #0
 800b154:	2200      	movs	r2, #0
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f002 fee1 	bl	800df1e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b088      	sub	sp, #32
 800b16a:	af04      	add	r7, sp, #16
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	4611      	mov	r1, r2
 800b172:	461a      	mov	r2, r3
 800b174:	460b      	mov	r3, r1
 800b176:	80fb      	strh	r3, [r7, #6]
 800b178:	4613      	mov	r3, r2
 800b17a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b17c:	7979      	ldrb	r1, [r7, #5]
 800b17e:	2300      	movs	r3, #0
 800b180:	9303      	str	r3, [sp, #12]
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	9302      	str	r3, [sp, #8]
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	9301      	str	r3, [sp, #4]
 800b18a:	2301      	movs	r3, #1
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	2300      	movs	r3, #0
 800b190:	2201      	movs	r2, #1
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f002 fec3 	bl	800df1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b198:	2300      	movs	r3, #0

}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b088      	sub	sp, #32
 800b1a6:	af04      	add	r7, sp, #16
 800b1a8:	60f8      	str	r0, [r7, #12]
 800b1aa:	60b9      	str	r1, [r7, #8]
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	80fb      	strh	r3, [r7, #6]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1c6:	7979      	ldrb	r1, [r7, #5]
 800b1c8:	7e3b      	ldrb	r3, [r7, #24]
 800b1ca:	9303      	str	r3, [sp, #12]
 800b1cc:	88fb      	ldrh	r3, [r7, #6]
 800b1ce:	9302      	str	r3, [sp, #8]
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	2302      	movs	r3, #2
 800b1da:	2200      	movs	r2, #0
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f002 fe9e 	bl	800df1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af04      	add	r7, sp, #16
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	80fb      	strh	r3, [r7, #6]
 800b1fe:	4613      	mov	r3, r2
 800b200:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b202:	7979      	ldrb	r1, [r7, #5]
 800b204:	2300      	movs	r3, #0
 800b206:	9303      	str	r3, [sp, #12]
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	9302      	str	r3, [sp, #8]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	9301      	str	r3, [sp, #4]
 800b210:	2301      	movs	r3, #1
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	2302      	movs	r3, #2
 800b216:	2201      	movs	r2, #1
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f002 fe80 	bl	800df1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af04      	add	r7, sp, #16
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	4608      	mov	r0, r1
 800b232:	4611      	mov	r1, r2
 800b234:	461a      	mov	r2, r3
 800b236:	4603      	mov	r3, r0
 800b238:	70fb      	strb	r3, [r7, #3]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70bb      	strb	r3, [r7, #2]
 800b23e:	4613      	mov	r3, r2
 800b240:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b242:	7878      	ldrb	r0, [r7, #1]
 800b244:	78ba      	ldrb	r2, [r7, #2]
 800b246:	78f9      	ldrb	r1, [r7, #3]
 800b248:	8b3b      	ldrh	r3, [r7, #24]
 800b24a:	9302      	str	r3, [sp, #8]
 800b24c:	7d3b      	ldrb	r3, [r7, #20]
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	7c3b      	ldrb	r3, [r7, #16]
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	4603      	mov	r3, r0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f002 fe13 	bl	800de82 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b272:	78fb      	ldrb	r3, [r7, #3]
 800b274:	4619      	mov	r1, r3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f002 fe32 	bl	800dee0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b084      	sub	sp, #16
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f836 	bl	800b304 <USBH_GetFreePipe>
 800b298:	4603      	mov	r3, r0
 800b29a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b29c:	89fb      	ldrh	r3, [r7, #14]
 800b29e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d00a      	beq.n	800b2bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b2a6:	78fa      	ldrb	r2, [r7, #3]
 800b2a8:	89fb      	ldrh	r3, [r7, #14]
 800b2aa:	f003 030f 	and.w	r3, r3, #15
 800b2ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b2b2:	6879      	ldr	r1, [r7, #4]
 800b2b4:	33e0      	adds	r3, #224	@ 0xe0
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	440b      	add	r3, r1
 800b2ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b2bc:	89fb      	ldrh	r3, [r7, #14]
 800b2be:	b2db      	uxtb	r3, r3
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b2d4:	78fb      	ldrb	r3, [r7, #3]
 800b2d6:	2b0f      	cmp	r3, #15
 800b2d8:	d80d      	bhi.n	800b2f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	33e0      	adds	r3, #224	@ 0xe0
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	78fb      	ldrb	r3, [r7, #3]
 800b2e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	33e0      	adds	r3, #224	@ 0xe0
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b30c:	2300      	movs	r3, #0
 800b30e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]
 800b314:	e00f      	b.n	800b336 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	33e0      	adds	r3, #224	@ 0xe0
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d102      	bne.n	800b330 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	e007      	b.n	800b340 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b330:	7bfb      	ldrb	r3, [r7, #15]
 800b332:	3301      	adds	r3, #1
 800b334:	73fb      	strb	r3, [r7, #15]
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	d9ec      	bls.n	800b316 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b33c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	4a08      	ldr	r2, [pc, #32]	@ (800b37c <disk_status+0x30>)
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	79fa      	ldrb	r2, [r7, #7]
 800b364:	4905      	ldr	r1, [pc, #20]	@ (800b37c <disk_status+0x30>)
 800b366:	440a      	add	r2, r1
 800b368:	7a12      	ldrb	r2, [r2, #8]
 800b36a:	4610      	mov	r0, r2
 800b36c:	4798      	blx	r3
 800b36e:	4603      	mov	r3, r0
 800b370:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	200005dc 	.word	0x200005dc

0800b380 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	4a0e      	ldr	r2, [pc, #56]	@ (800b3cc <disk_initialize+0x4c>)
 800b392:	5cd3      	ldrb	r3, [r2, r3]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d114      	bne.n	800b3c2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b398:	79fb      	ldrb	r3, [r7, #7]
 800b39a:	4a0c      	ldr	r2, [pc, #48]	@ (800b3cc <disk_initialize+0x4c>)
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	79fa      	ldrb	r2, [r7, #7]
 800b3a6:	4909      	ldr	r1, [pc, #36]	@ (800b3cc <disk_initialize+0x4c>)
 800b3a8:	440a      	add	r2, r1
 800b3aa:	7a12      	ldrb	r2, [r2, #8]
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4798      	blx	r3
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d103      	bne.n	800b3c2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	4a03      	ldr	r2, [pc, #12]	@ (800b3cc <disk_initialize+0x4c>)
 800b3be:	2101      	movs	r1, #1
 800b3c0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	200005dc 	.word	0x200005dc

0800b3d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	607a      	str	r2, [r7, #4]
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b40c <disk_read+0x3c>)
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	689c      	ldr	r4, [r3, #8]
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
 800b3ee:	4a07      	ldr	r2, [pc, #28]	@ (800b40c <disk_read+0x3c>)
 800b3f0:	4413      	add	r3, r2
 800b3f2:	7a18      	ldrb	r0, [r3, #8]
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	68b9      	ldr	r1, [r7, #8]
 800b3fa:	47a0      	blx	r4
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800b400:	7dfb      	ldrb	r3, [r7, #23]
}
 800b402:	4618      	mov	r0, r3
 800b404:	371c      	adds	r7, #28
 800b406:	46bd      	mov	sp, r7
 800b408:	bd90      	pop	{r4, r7, pc}
 800b40a:	bf00      	nop
 800b40c:	200005dc 	.word	0x200005dc

0800b410 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b410:	b590      	push	{r4, r7, lr}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60b9      	str	r1, [r7, #8]
 800b418:	607a      	str	r2, [r7, #4]
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	4603      	mov	r3, r0
 800b41e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	4a0a      	ldr	r2, [pc, #40]	@ (800b44c <disk_write+0x3c>)
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	68dc      	ldr	r4, [r3, #12]
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	4a07      	ldr	r2, [pc, #28]	@ (800b44c <disk_write+0x3c>)
 800b430:	4413      	add	r3, r2
 800b432:	7a18      	ldrb	r0, [r3, #8]
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	68b9      	ldr	r1, [r7, #8]
 800b43a:	47a0      	blx	r4
 800b43c:	4603      	mov	r3, r0
 800b43e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b440:	7dfb      	ldrb	r3, [r7, #23]
}
 800b442:	4618      	mov	r0, r3
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	bd90      	pop	{r4, r7, pc}
 800b44a:	bf00      	nop
 800b44c:	200005dc 	.word	0x200005dc

0800b450 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	603a      	str	r2, [r7, #0]
 800b45a:	71fb      	strb	r3, [r7, #7]
 800b45c:	460b      	mov	r3, r1
 800b45e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	4a09      	ldr	r2, [pc, #36]	@ (800b488 <disk_ioctl+0x38>)
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	79fa      	ldrb	r2, [r7, #7]
 800b46e:	4906      	ldr	r1, [pc, #24]	@ (800b488 <disk_ioctl+0x38>)
 800b470:	440a      	add	r2, r1
 800b472:	7a10      	ldrb	r0, [r2, #8]
 800b474:	79b9      	ldrb	r1, [r7, #6]
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4798      	blx	r3
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	200005dc 	.word	0x200005dc

0800b48c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	3301      	adds	r3, #1
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b49c:	89fb      	ldrh	r3, [r7, #14]
 800b49e:	021b      	lsls	r3, r3, #8
 800b4a0:	b21a      	sxth	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	b21b      	sxth	r3, r3
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	b21b      	sxth	r3, r3
 800b4ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b4ae:	89fb      	ldrh	r3, [r7, #14]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3303      	adds	r3, #3
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	021b      	lsls	r3, r3, #8
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	3202      	adds	r2, #2
 800b4d4:	7812      	ldrb	r2, [r2, #0]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	3201      	adds	r2, #1
 800b4e2:	7812      	ldrb	r2, [r2, #0]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	021b      	lsls	r3, r3, #8
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	7812      	ldrb	r2, [r2, #0]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	460b      	mov	r3, r1
 800b50c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	887a      	ldrh	r2, [r7, #2]
 800b516:	b2d2      	uxtb	r2, r2
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	887b      	ldrh	r3, [r7, #2]
 800b51c:	0a1b      	lsrs	r3, r3, #8
 800b51e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	607a      	str	r2, [r7, #4]
 800b526:	887a      	ldrh	r2, [r7, #2]
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	701a      	strb	r2, [r3, #0]
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	607a      	str	r2, [r7, #4]
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	b2d2      	uxtb	r2, r2
 800b54c:	701a      	strb	r2, [r3, #0]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	0a1b      	lsrs	r3, r3, #8
 800b552:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	1c5a      	adds	r2, r3, #1
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	b2d2      	uxtb	r2, r2
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	0a1b      	lsrs	r3, r3, #8
 800b564:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	b2d2      	uxtb	r2, r2
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	0a1b      	lsrs	r3, r3, #8
 800b576:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	607a      	str	r2, [r7, #4]
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	701a      	strb	r2, [r3, #0]
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b590:	b480      	push	{r7}
 800b592:	b087      	sub	sp, #28
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00d      	beq.n	800b5c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	1c53      	adds	r3, r2, #1
 800b5ae:	613b      	str	r3, [r7, #16]
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	1c59      	adds	r1, r3, #1
 800b5b4:	6179      	str	r1, [r7, #20]
 800b5b6:	7812      	ldrb	r2, [r2, #0]
 800b5b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	607b      	str	r3, [r7, #4]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f1      	bne.n	800b5aa <mem_cpy+0x1a>
	}
}
 800b5c6:	bf00      	nop
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b5d2:	b480      	push	{r7}
 800b5d4:	b087      	sub	sp, #28
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	60f8      	str	r0, [r7, #12]
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	617a      	str	r2, [r7, #20]
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	b2d2      	uxtb	r2, r2
 800b5ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	607b      	str	r3, [r7, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1f3      	bne.n	800b5e2 <mem_set+0x10>
}
 800b5fa:	bf00      	nop
 800b5fc:	bf00      	nop
 800b5fe:	371c      	adds	r7, #28
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b608:	b480      	push	{r7}
 800b60a:	b089      	sub	sp, #36	@ 0x24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	61fb      	str	r3, [r7, #28]
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	61fa      	str	r2, [r7, #28]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	4619      	mov	r1, r3
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	61ba      	str	r2, [r7, #24]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	1acb      	subs	r3, r1, r3
 800b634:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3b01      	subs	r3, #1
 800b63a:	607b      	str	r3, [r7, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <mem_cmp+0x40>
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d0eb      	beq.n	800b620 <mem_cmp+0x18>

	return r;
 800b648:	697b      	ldr	r3, [r7, #20]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3724      	adds	r7, #36	@ 0x24
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b656:	b480      	push	{r7}
 800b658:	b083      	sub	sp, #12
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b660:	e002      	b.n	800b668 <chk_chr+0x12>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3301      	adds	r3, #1
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d005      	beq.n	800b67c <chk_chr+0x26>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	461a      	mov	r2, r3
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	4293      	cmp	r3, r2
 800b67a:	d1f2      	bne.n	800b662 <chk_chr+0xc>
	return *str;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	781b      	ldrb	r3, [r3, #0]
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b696:	2300      	movs	r3, #0
 800b698:	60bb      	str	r3, [r7, #8]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	e029      	b.n	800b6f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b6a0:	4a27      	ldr	r2, [pc, #156]	@ (800b740 <chk_lock+0xb4>)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	011b      	lsls	r3, r3, #4
 800b6a6:	4413      	add	r3, r2
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d01d      	beq.n	800b6ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6ae:	4a24      	ldr	r2, [pc, #144]	@ (800b740 <chk_lock+0xb4>)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	011b      	lsls	r3, r3, #4
 800b6b4:	4413      	add	r3, r2
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d116      	bne.n	800b6ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b6c0:	4a1f      	ldr	r2, [pc, #124]	@ (800b740 <chk_lock+0xb4>)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	011b      	lsls	r3, r3, #4
 800b6c6:	4413      	add	r3, r2
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d10c      	bne.n	800b6ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b6d4:	4a1a      	ldr	r2, [pc, #104]	@ (800b740 <chk_lock+0xb4>)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	011b      	lsls	r3, r3, #4
 800b6da:	4413      	add	r3, r2
 800b6dc:	3308      	adds	r3, #8
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d102      	bne.n	800b6ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b6e8:	e007      	b.n	800b6fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d9d2      	bls.n	800b6a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d109      	bne.n	800b714 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <chk_lock+0x80>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d101      	bne.n	800b710 <chk_lock+0x84>
 800b70c:	2300      	movs	r3, #0
 800b70e:	e010      	b.n	800b732 <chk_lock+0xa6>
 800b710:	2312      	movs	r3, #18
 800b712:	e00e      	b.n	800b732 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d108      	bne.n	800b72c <chk_lock+0xa0>
 800b71a:	4a09      	ldr	r2, [pc, #36]	@ (800b740 <chk_lock+0xb4>)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	011b      	lsls	r3, r3, #4
 800b720:	4413      	add	r3, r2
 800b722:	330c      	adds	r3, #12
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b72a:	d101      	bne.n	800b730 <chk_lock+0xa4>
 800b72c:	2310      	movs	r3, #16
 800b72e:	e000      	b.n	800b732 <chk_lock+0xa6>
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	200005bc 	.word	0x200005bc

0800b744 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b74a:	2300      	movs	r3, #0
 800b74c:	607b      	str	r3, [r7, #4]
 800b74e:	e002      	b.n	800b756 <enq_lock+0x12>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3301      	adds	r3, #1
 800b754:	607b      	str	r3, [r7, #4]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d806      	bhi.n	800b76a <enq_lock+0x26>
 800b75c:	4a09      	ldr	r2, [pc, #36]	@ (800b784 <enq_lock+0x40>)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	011b      	lsls	r3, r3, #4
 800b762:	4413      	add	r3, r2
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d1f2      	bne.n	800b750 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	bf14      	ite	ne
 800b770:	2301      	movne	r3, #1
 800b772:	2300      	moveq	r3, #0
 800b774:	b2db      	uxtb	r3, r3
}
 800b776:	4618      	mov	r0, r3
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	200005bc 	.word	0x200005bc

0800b788 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b792:	2300      	movs	r3, #0
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	e01f      	b.n	800b7d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b798:	4a41      	ldr	r2, [pc, #260]	@ (800b8a0 <inc_lock+0x118>)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	011b      	lsls	r3, r3, #4
 800b79e:	4413      	add	r3, r2
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d113      	bne.n	800b7d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b7aa:	4a3d      	ldr	r2, [pc, #244]	@ (800b8a0 <inc_lock+0x118>)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	011b      	lsls	r3, r3, #4
 800b7b0:	4413      	add	r3, r2
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d109      	bne.n	800b7d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b7be:	4a38      	ldr	r2, [pc, #224]	@ (800b8a0 <inc_lock+0x118>)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	011b      	lsls	r3, r3, #4
 800b7c4:	4413      	add	r3, r2
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d006      	beq.n	800b7e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d9dc      	bls.n	800b798 <inc_lock+0x10>
 800b7de:	e000      	b.n	800b7e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b7e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d132      	bne.n	800b84e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	e002      	b.n	800b7f4 <inc_lock+0x6c>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d806      	bhi.n	800b808 <inc_lock+0x80>
 800b7fa:	4a29      	ldr	r2, [pc, #164]	@ (800b8a0 <inc_lock+0x118>)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	011b      	lsls	r3, r3, #4
 800b800:	4413      	add	r3, r2
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1f2      	bne.n	800b7ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d101      	bne.n	800b812 <inc_lock+0x8a>
 800b80e:	2300      	movs	r3, #0
 800b810:	e040      	b.n	800b894 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	4922      	ldr	r1, [pc, #136]	@ (800b8a0 <inc_lock+0x118>)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	440b      	add	r3, r1
 800b81e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	491e      	ldr	r1, [pc, #120]	@ (800b8a0 <inc_lock+0x118>)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	011b      	lsls	r3, r3, #4
 800b82a:	440b      	add	r3, r1
 800b82c:	3304      	adds	r3, #4
 800b82e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	695a      	ldr	r2, [r3, #20]
 800b834:	491a      	ldr	r1, [pc, #104]	@ (800b8a0 <inc_lock+0x118>)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	011b      	lsls	r3, r3, #4
 800b83a:	440b      	add	r3, r1
 800b83c:	3308      	adds	r3, #8
 800b83e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b840:	4a17      	ldr	r2, [pc, #92]	@ (800b8a0 <inc_lock+0x118>)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	4413      	add	r3, r2
 800b848:	330c      	adds	r3, #12
 800b84a:	2200      	movs	r2, #0
 800b84c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d009      	beq.n	800b868 <inc_lock+0xe0>
 800b854:	4a12      	ldr	r2, [pc, #72]	@ (800b8a0 <inc_lock+0x118>)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	011b      	lsls	r3, r3, #4
 800b85a:	4413      	add	r3, r2
 800b85c:	330c      	adds	r3, #12
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <inc_lock+0xe0>
 800b864:	2300      	movs	r3, #0
 800b866:	e015      	b.n	800b894 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d108      	bne.n	800b880 <inc_lock+0xf8>
 800b86e:	4a0c      	ldr	r2, [pc, #48]	@ (800b8a0 <inc_lock+0x118>)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	011b      	lsls	r3, r3, #4
 800b874:	4413      	add	r3, r2
 800b876:	330c      	adds	r3, #12
 800b878:	881b      	ldrh	r3, [r3, #0]
 800b87a:	3301      	adds	r3, #1
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	e001      	b.n	800b884 <inc_lock+0xfc>
 800b880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b884:	4906      	ldr	r1, [pc, #24]	@ (800b8a0 <inc_lock+0x118>)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	440b      	add	r3, r1
 800b88c:	330c      	adds	r3, #12
 800b88e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3301      	adds	r3, #1
}
 800b894:	4618      	mov	r0, r3
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	200005bc 	.word	0x200005bc

0800b8a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	607b      	str	r3, [r7, #4]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d825      	bhi.n	800b904 <dec_lock+0x60>
		n = Files[i].ctr;
 800b8b8:	4a17      	ldr	r2, [pc, #92]	@ (800b918 <dec_lock+0x74>)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	4413      	add	r3, r2
 800b8c0:	330c      	adds	r3, #12
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b8c6:	89fb      	ldrh	r3, [r7, #14]
 800b8c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8cc:	d101      	bne.n	800b8d2 <dec_lock+0x2e>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b8d2:	89fb      	ldrh	r3, [r7, #14]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <dec_lock+0x3a>
 800b8d8:	89fb      	ldrh	r3, [r7, #14]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b8de:	4a0e      	ldr	r2, [pc, #56]	@ (800b918 <dec_lock+0x74>)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	011b      	lsls	r3, r3, #4
 800b8e4:	4413      	add	r3, r2
 800b8e6:	330c      	adds	r3, #12
 800b8e8:	89fa      	ldrh	r2, [r7, #14]
 800b8ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b8ec:	89fb      	ldrh	r3, [r7, #14]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d105      	bne.n	800b8fe <dec_lock+0x5a>
 800b8f2:	4a09      	ldr	r2, [pc, #36]	@ (800b918 <dec_lock+0x74>)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	011b      	lsls	r3, r3, #4
 800b8f8:	4413      	add	r3, r2
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	737b      	strb	r3, [r7, #13]
 800b902:	e001      	b.n	800b908 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b904:	2302      	movs	r3, #2
 800b906:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b908:	7b7b      	ldrb	r3, [r7, #13]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	200005bc 	.word	0x200005bc

0800b91c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b924:	2300      	movs	r3, #0
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	e010      	b.n	800b94c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b92a:	4a0d      	ldr	r2, [pc, #52]	@ (800b960 <clear_lock+0x44>)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	011b      	lsls	r3, r3, #4
 800b930:	4413      	add	r3, r2
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	429a      	cmp	r2, r3
 800b938:	d105      	bne.n	800b946 <clear_lock+0x2a>
 800b93a:	4a09      	ldr	r2, [pc, #36]	@ (800b960 <clear_lock+0x44>)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	4413      	add	r3, r2
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3301      	adds	r3, #1
 800b94a:	60fb      	str	r3, [r7, #12]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d9eb      	bls.n	800b92a <clear_lock+0xe>
	}
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	200005bc 	.word	0x200005bc

0800b964 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	78db      	ldrb	r3, [r3, #3]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d034      	beq.n	800b9e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	7858      	ldrb	r0, [r3, #1]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b988:	2301      	movs	r3, #1
 800b98a:	697a      	ldr	r2, [r7, #20]
 800b98c:	f7ff fd40 	bl	800b410 <disk_write>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <sync_window+0x38>
			res = FR_DISK_ERR;
 800b996:	2301      	movs	r3, #1
 800b998:	73fb      	strb	r3, [r7, #15]
 800b99a:	e022      	b.n	800b9e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	1ad2      	subs	r2, r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d217      	bcs.n	800b9e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	789b      	ldrb	r3, [r3, #2]
 800b9b6:	613b      	str	r3, [r7, #16]
 800b9b8:	e010      	b.n	800b9dc <sync_window+0x78>
					wsect += fs->fsize;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	7858      	ldrb	r0, [r3, #1]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	f7ff fd1d 	bl	800b410 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	613b      	str	r3, [r7, #16]
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d8eb      	bhi.n	800b9ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d01b      	beq.n	800ba3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff ffad 	bl	800b964 <sync_window>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d113      	bne.n	800ba3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	7858      	ldrb	r0, [r3, #1]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba1e:	2301      	movs	r3, #1
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	f7ff fcd5 	bl	800b3d0 <disk_read>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d004      	beq.n	800ba36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ba2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7ff ff87 	bl	800b964 <sync_window>
 800ba56:	4603      	mov	r3, r0
 800ba58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d158      	bne.n	800bb12 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d148      	bne.n	800bafa <sync_fs+0xb2>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	791b      	ldrb	r3, [r3, #4]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d144      	bne.n	800bafa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3330      	adds	r3, #48	@ 0x30
 800ba74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba78:	2100      	movs	r1, #0
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff fda9 	bl	800b5d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3330      	adds	r3, #48	@ 0x30
 800ba84:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba88:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7ff fd38 	bl	800b502 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	3330      	adds	r3, #48	@ 0x30
 800ba96:	4921      	ldr	r1, [pc, #132]	@ (800bb1c <sync_fs+0xd4>)
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fd4d 	bl	800b538 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3330      	adds	r3, #48	@ 0x30
 800baa2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800baa6:	491e      	ldr	r1, [pc, #120]	@ (800bb20 <sync_fs+0xd8>)
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fd45 	bl	800b538 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	3330      	adds	r3, #48	@ 0x30
 800bab2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	4619      	mov	r1, r3
 800babc:	4610      	mov	r0, r2
 800babe:	f7ff fd3b 	bl	800b538 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	3330      	adds	r3, #48	@ 0x30
 800bac6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	4619      	mov	r1, r3
 800bad0:	4610      	mov	r0, r2
 800bad2:	f7ff fd31 	bl	800b538 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	1c5a      	adds	r2, r3, #1
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	7858      	ldrb	r0, [r3, #1]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baee:	2301      	movs	r3, #1
 800baf0:	f7ff fc8e 	bl	800b410 <disk_write>
			fs->fsi_flag = 0;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	785b      	ldrb	r3, [r3, #1]
 800bafe:	2200      	movs	r2, #0
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff fca4 	bl	800b450 <disk_ioctl>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <sync_fs+0xca>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	41615252 	.word	0x41615252
 800bb20:	61417272 	.word	0x61417272

0800bb24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	3b02      	subs	r3, #2
 800bb32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	695b      	ldr	r3, [r3, #20]
 800bb38:	3b02      	subs	r3, #2
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d301      	bcc.n	800bb44 <clust2sect+0x20>
 800bb40:	2300      	movs	r3, #0
 800bb42:	e008      	b.n	800bb56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	895b      	ldrh	r3, [r3, #10]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	fb03 f202 	mul.w	r2, r3, r2
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb54:	4413      	add	r3, r2
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b086      	sub	sp, #24
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d904      	bls.n	800bb82 <get_fat+0x20>
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d302      	bcc.n	800bb88 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bb82:	2301      	movs	r3, #1
 800bb84:	617b      	str	r3, [r7, #20]
 800bb86:	e08e      	b.n	800bca6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bb88:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d061      	beq.n	800bc5a <get_fat+0xf8>
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	dc7b      	bgt.n	800bc92 <get_fat+0x130>
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d002      	beq.n	800bba4 <get_fat+0x42>
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d041      	beq.n	800bc26 <get_fat+0xc4>
 800bba2:	e076      	b.n	800bc92 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	085b      	lsrs	r3, r3, #1
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	4413      	add	r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6a1a      	ldr	r2, [r3, #32]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	0a5b      	lsrs	r3, r3, #9
 800bbba:	4413      	add	r3, r2
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	6938      	ldr	r0, [r7, #16]
 800bbc0:	f7ff ff14 	bl	800b9ec <move_window>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d166      	bne.n	800bc98 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	1c5a      	adds	r2, r3, #1
 800bbce:	60fa      	str	r2, [r7, #12]
 800bbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bbdc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6a1a      	ldr	r2, [r3, #32]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	0a5b      	lsrs	r3, r3, #9
 800bbe6:	4413      	add	r3, r2
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6938      	ldr	r0, [r7, #16]
 800bbec:	f7ff fefe 	bl	800b9ec <move_window>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d152      	bne.n	800bc9c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc04:	021b      	lsls	r3, r3, #8
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d002      	beq.n	800bc1c <get_fat+0xba>
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	091b      	lsrs	r3, r3, #4
 800bc1a:	e002      	b.n	800bc22 <get_fat+0xc0>
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc22:	617b      	str	r3, [r7, #20]
			break;
 800bc24:	e03f      	b.n	800bca6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	6a1a      	ldr	r2, [r3, #32]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	0a1b      	lsrs	r3, r3, #8
 800bc2e:	4413      	add	r3, r2
 800bc30:	4619      	mov	r1, r3
 800bc32:	6938      	ldr	r0, [r7, #16]
 800bc34:	f7ff feda 	bl	800b9ec <move_window>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d130      	bne.n	800bca0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bc4c:	4413      	add	r3, r2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff fc1c 	bl	800b48c <ld_word>
 800bc54:	4603      	mov	r3, r0
 800bc56:	617b      	str	r3, [r7, #20]
			break;
 800bc58:	e025      	b.n	800bca6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	6a1a      	ldr	r2, [r3, #32]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	09db      	lsrs	r3, r3, #7
 800bc62:	4413      	add	r3, r2
 800bc64:	4619      	mov	r1, r3
 800bc66:	6938      	ldr	r0, [r7, #16]
 800bc68:	f7ff fec0 	bl	800b9ec <move_window>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d118      	bne.n	800bca4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bc80:	4413      	add	r3, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fc1a 	bl	800b4bc <ld_dword>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bc8e:	617b      	str	r3, [r7, #20]
			break;
 800bc90:	e009      	b.n	800bca6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc92:	2301      	movs	r3, #1
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	e006      	b.n	800bca6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc98:	bf00      	nop
 800bc9a:	e004      	b.n	800bca6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc9c:	bf00      	nop
 800bc9e:	e002      	b.n	800bca6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bca0:	bf00      	nop
 800bca2:	e000      	b.n	800bca6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bca4:	bf00      	nop
		}
	}

	return val;
 800bca6:	697b      	ldr	r3, [r7, #20]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3718      	adds	r7, #24
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bcb0:	b590      	push	{r4, r7, lr}
 800bcb2:	b089      	sub	sp, #36	@ 0x24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	f240 80d9 	bls.w	800be7a <put_fat+0x1ca>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	f080 80d3 	bcs.w	800be7a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	f000 8096 	beq.w	800be0a <put_fat+0x15a>
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	f300 80cb 	bgt.w	800be7a <put_fat+0x1ca>
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d002      	beq.n	800bcee <put_fat+0x3e>
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d06e      	beq.n	800bdca <put_fat+0x11a>
 800bcec:	e0c5      	b.n	800be7a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	61bb      	str	r3, [r7, #24]
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	085b      	lsrs	r3, r3, #1
 800bcf6:	69ba      	ldr	r2, [r7, #24]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6a1a      	ldr	r2, [r3, #32]
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	0a5b      	lsrs	r3, r3, #9
 800bd04:	4413      	add	r3, r2
 800bd06:	4619      	mov	r1, r3
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f7ff fe6f 	bl	800b9ec <move_window>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd12:	7ffb      	ldrb	r3, [r7, #31]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f040 80a9 	bne.w	800be6c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	1c59      	adds	r1, r3, #1
 800bd24:	61b9      	str	r1, [r7, #24]
 800bd26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2a:	4413      	add	r3, r2
 800bd2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00d      	beq.n	800bd54 <put_fat+0xa4>
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	b25b      	sxtb	r3, r3
 800bd3e:	f003 030f 	and.w	r3, r3, #15
 800bd42:	b25a      	sxtb	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	011b      	lsls	r3, r3, #4
 800bd4a:	b25b      	sxtb	r3, r3
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	b25b      	sxtb	r3, r3
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	e001      	b.n	800bd58 <put_fat+0xa8>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6a1a      	ldr	r2, [r3, #32]
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	0a5b      	lsrs	r3, r3, #9
 800bd6a:	4413      	add	r3, r2
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f7ff fe3c 	bl	800b9ec <move_window>
 800bd74:	4603      	mov	r3, r0
 800bd76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd78:	7ffb      	ldrb	r3, [r7, #31]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d178      	bne.n	800be70 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8a:	4413      	add	r3, r2
 800bd8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d003      	beq.n	800bda0 <put_fat+0xf0>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	091b      	lsrs	r3, r3, #4
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	e00e      	b.n	800bdbe <put_fat+0x10e>
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	b25b      	sxtb	r3, r3
 800bda6:	f023 030f 	bic.w	r3, r3, #15
 800bdaa:	b25a      	sxtb	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	0a1b      	lsrs	r3, r3, #8
 800bdb0:	b25b      	sxtb	r3, r3
 800bdb2:	f003 030f 	and.w	r3, r3, #15
 800bdb6:	b25b      	sxtb	r3, r3
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	b25b      	sxtb	r3, r3
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	70da      	strb	r2, [r3, #3]
			break;
 800bdc8:	e057      	b.n	800be7a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a1a      	ldr	r2, [r3, #32]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	0a1b      	lsrs	r3, r3, #8
 800bdd2:	4413      	add	r3, r2
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f7ff fe08 	bl	800b9ec <move_window>
 800bddc:	4603      	mov	r3, r0
 800bdde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bde0:	7ffb      	ldrb	r3, [r7, #31]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d146      	bne.n	800be74 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	005b      	lsls	r3, r3, #1
 800bdf0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bdf4:	4413      	add	r3, r2
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	b292      	uxth	r2, r2
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff fb80 	bl	800b502 <st_word>
			fs->wflag = 1;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2201      	movs	r2, #1
 800be06:	70da      	strb	r2, [r3, #3]
			break;
 800be08:	e037      	b.n	800be7a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6a1a      	ldr	r2, [r3, #32]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	09db      	lsrs	r3, r3, #7
 800be12:	4413      	add	r3, r2
 800be14:	4619      	mov	r1, r3
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fde8 	bl	800b9ec <move_window>
 800be1c:	4603      	mov	r3, r0
 800be1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be20:	7ffb      	ldrb	r3, [r7, #31]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d128      	bne.n	800be78 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800be3a:	4413      	add	r3, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7ff fb3d 	bl	800b4bc <ld_dword>
 800be42:	4603      	mov	r3, r0
 800be44:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800be48:	4323      	orrs	r3, r4
 800be4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800be5a:	4413      	add	r3, r2
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fb6a 	bl	800b538 <st_dword>
			fs->wflag = 1;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2201      	movs	r2, #1
 800be68:	70da      	strb	r2, [r3, #3]
			break;
 800be6a:	e006      	b.n	800be7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800be6c:	bf00      	nop
 800be6e:	e004      	b.n	800be7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800be70:	bf00      	nop
 800be72:	e002      	b.n	800be7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800be74:	bf00      	nop
 800be76:	e000      	b.n	800be7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800be78:	bf00      	nop
		}
	}
	return res;
 800be7a:	7ffb      	ldrb	r3, [r7, #31]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3724      	adds	r7, #36	@ 0x24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd90      	pop	{r4, r7, pc}

0800be84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d904      	bls.n	800beaa <remove_chain+0x26>
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d301      	bcc.n	800beae <remove_chain+0x2a>
 800beaa:	2302      	movs	r3, #2
 800beac:	e04b      	b.n	800bf46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00c      	beq.n	800bece <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800beb4:	f04f 32ff 	mov.w	r2, #4294967295
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	69b8      	ldr	r0, [r7, #24]
 800bebc:	f7ff fef8 	bl	800bcb0 <put_fat>
 800bec0:	4603      	mov	r3, r0
 800bec2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bec4:	7ffb      	ldrb	r3, [r7, #31]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <remove_chain+0x4a>
 800beca:	7ffb      	ldrb	r3, [r7, #31]
 800becc:	e03b      	b.n	800bf46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bece:	68b9      	ldr	r1, [r7, #8]
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f7ff fe46 	bl	800bb62 <get_fat>
 800bed6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d031      	beq.n	800bf42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d101      	bne.n	800bee8 <remove_chain+0x64>
 800bee4:	2302      	movs	r3, #2
 800bee6:	e02e      	b.n	800bf46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beee:	d101      	bne.n	800bef4 <remove_chain+0x70>
 800bef0:	2301      	movs	r3, #1
 800bef2:	e028      	b.n	800bf46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bef4:	2200      	movs	r2, #0
 800bef6:	68b9      	ldr	r1, [r7, #8]
 800bef8:	69b8      	ldr	r0, [r7, #24]
 800befa:	f7ff fed9 	bl	800bcb0 <put_fat>
 800befe:	4603      	mov	r3, r0
 800bf00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf02:	7ffb      	ldrb	r3, [r7, #31]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <remove_chain+0x88>
 800bf08:	7ffb      	ldrb	r3, [r7, #31]
 800bf0a:	e01c      	b.n	800bf46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	691a      	ldr	r2, [r3, #16]
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	695b      	ldr	r3, [r3, #20]
 800bf14:	3b02      	subs	r3, #2
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d20b      	bcs.n	800bf32 <remove_chain+0xae>
			fs->free_clst++;
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	791b      	ldrb	r3, [r3, #4]
 800bf28:	f043 0301 	orr.w	r3, r3, #1
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	695b      	ldr	r3, [r3, #20]
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d3c6      	bcc.n	800bece <remove_chain+0x4a>
 800bf40:	e000      	b.n	800bf44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3720      	adds	r7, #32
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b088      	sub	sp, #32
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10d      	bne.n	800bf80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d004      	beq.n	800bf7a <create_chain+0x2c>
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	695b      	ldr	r3, [r3, #20]
 800bf74:	69ba      	ldr	r2, [r7, #24]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d31b      	bcc.n	800bfb2 <create_chain+0x64>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	61bb      	str	r3, [r7, #24]
 800bf7e:	e018      	b.n	800bfb2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff fded 	bl	800bb62 <get_fat>
 800bf88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d801      	bhi.n	800bf94 <create_chain+0x46>
 800bf90:	2301      	movs	r3, #1
 800bf92:	e070      	b.n	800c076 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf9a:	d101      	bne.n	800bfa0 <create_chain+0x52>
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	e06a      	b.n	800c076 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d201      	bcs.n	800bfae <create_chain+0x60>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	e063      	b.n	800c076 <create_chain+0x128>
		scl = clst;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d307      	bcc.n	800bfd6 <create_chain+0x88>
				ncl = 2;
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bfca:	69fa      	ldr	r2, [r7, #28]
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d901      	bls.n	800bfd6 <create_chain+0x88>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e04f      	b.n	800c076 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bfd6:	69f9      	ldr	r1, [r7, #28]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff fdc2 	bl	800bb62 <get_fat>
 800bfde:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00e      	beq.n	800c004 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d003      	beq.n	800bff4 <create_chain+0xa6>
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff2:	d101      	bne.n	800bff8 <create_chain+0xaa>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	e03e      	b.n	800c076 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bff8:	69fa      	ldr	r2, [r7, #28]
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d1da      	bne.n	800bfb6 <create_chain+0x68>
 800c000:	2300      	movs	r3, #0
 800c002:	e038      	b.n	800c076 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c004:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c006:	f04f 32ff 	mov.w	r2, #4294967295
 800c00a:	69f9      	ldr	r1, [r7, #28]
 800c00c:	6938      	ldr	r0, [r7, #16]
 800c00e:	f7ff fe4f 	bl	800bcb0 <put_fat>
 800c012:	4603      	mov	r3, r0
 800c014:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d109      	bne.n	800c030 <create_chain+0xe2>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d006      	beq.n	800c030 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c022:	69fa      	ldr	r2, [r7, #28]
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6938      	ldr	r0, [r7, #16]
 800c028:	f7ff fe42 	bl	800bcb0 <put_fat>
 800c02c:	4603      	mov	r3, r0
 800c02e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c030:	7dfb      	ldrb	r3, [r7, #23]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d116      	bne.n	800c064 <create_chain+0x116>
		fs->last_clst = ncl;
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	69fa      	ldr	r2, [r7, #28]
 800c03a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	691a      	ldr	r2, [r3, #16]
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	695b      	ldr	r3, [r3, #20]
 800c044:	3b02      	subs	r3, #2
 800c046:	429a      	cmp	r2, r3
 800c048:	d804      	bhi.n	800c054 <create_chain+0x106>
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	1e5a      	subs	r2, r3, #1
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	791b      	ldrb	r3, [r3, #4]
 800c058:	f043 0301 	orr.w	r3, r3, #1
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	711a      	strb	r2, [r3, #4]
 800c062:	e007      	b.n	800c074 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d102      	bne.n	800c070 <create_chain+0x122>
 800c06a:	f04f 33ff 	mov.w	r3, #4294967295
 800c06e:	e000      	b.n	800c072 <create_chain+0x124>
 800c070:	2301      	movs	r3, #1
 800c072:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c074:	69fb      	ldr	r3, [r7, #28]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3720      	adds	r7, #32
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c07e:	b480      	push	{r7}
 800c080:	b087      	sub	sp, #28
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c092:	3304      	adds	r3, #4
 800c094:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	0a5b      	lsrs	r3, r3, #9
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	8952      	ldrh	r2, [r2, #10]
 800c09e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	1d1a      	adds	r2, r3, #4
 800c0a8:	613a      	str	r2, [r7, #16]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <clmt_clust+0x3a>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	e010      	b.n	800c0da <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c0b8:	697a      	ldr	r2, [r7, #20]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d307      	bcc.n	800c0d0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	617b      	str	r3, [r7, #20]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0ce:	e7e9      	b.n	800c0a4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c0d0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	4413      	add	r3, r2
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	371c      	adds	r7, #28
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b086      	sub	sp, #24
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c0fc:	d204      	bcs.n	800c108 <dir_sdi+0x22>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	f003 031f 	and.w	r3, r3, #31
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <dir_sdi+0x26>
		return FR_INT_ERR;
 800c108:	2302      	movs	r3, #2
 800c10a:	e063      	b.n	800c1d4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d106      	bne.n	800c12c <dir_sdi+0x46>
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	2b02      	cmp	r3, #2
 800c124:	d902      	bls.n	800c12c <dir_sdi+0x46>
		clst = fs->dirbase;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c12a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10c      	bne.n	800c14c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	095b      	lsrs	r3, r3, #5
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	8912      	ldrh	r2, [r2, #8]
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d301      	bcc.n	800c142 <dir_sdi+0x5c>
 800c13e:	2302      	movs	r3, #2
 800c140:	e048      	b.n	800c1d4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	61da      	str	r2, [r3, #28]
 800c14a:	e029      	b.n	800c1a0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	895b      	ldrh	r3, [r3, #10]
 800c150:	025b      	lsls	r3, r3, #9
 800c152:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c154:	e019      	b.n	800c18a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6979      	ldr	r1, [r7, #20]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7ff fd01 	bl	800bb62 <get_fat>
 800c160:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c168:	d101      	bne.n	800c16e <dir_sdi+0x88>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e032      	b.n	800c1d4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d904      	bls.n	800c17e <dir_sdi+0x98>
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	695b      	ldr	r3, [r3, #20]
 800c178:	697a      	ldr	r2, [r7, #20]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d301      	bcc.n	800c182 <dir_sdi+0x9c>
 800c17e:	2302      	movs	r3, #2
 800c180:	e028      	b.n	800c1d4 <dir_sdi+0xee>
			ofs -= csz;
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	1ad3      	subs	r3, r2, r3
 800c188:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d2e1      	bcs.n	800c156 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c192:	6979      	ldr	r1, [r7, #20]
 800c194:	6938      	ldr	r0, [r7, #16]
 800c196:	f7ff fcc5 	bl	800bb24 <clust2sect>
 800c19a:	4602      	mov	r2, r0
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	69db      	ldr	r3, [r3, #28]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <dir_sdi+0xcc>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e010      	b.n	800c1d4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	69da      	ldr	r2, [r3, #28]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	0a5b      	lsrs	r3, r3, #9
 800c1ba:	441a      	add	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1cc:	441a      	add	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	695b      	ldr	r3, [r3, #20]
 800c1f0:	3320      	adds	r3, #32
 800c1f2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	69db      	ldr	r3, [r3, #28]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d003      	beq.n	800c204 <dir_next+0x28>
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c202:	d301      	bcc.n	800c208 <dir_next+0x2c>
 800c204:	2304      	movs	r3, #4
 800c206:	e0aa      	b.n	800c35e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f040 8098 	bne.w	800c344 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	1c5a      	adds	r2, r3, #1
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10b      	bne.n	800c23e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	095b      	lsrs	r3, r3, #5
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	8912      	ldrh	r2, [r2, #8]
 800c22e:	4293      	cmp	r3, r2
 800c230:	f0c0 8088 	bcc.w	800c344 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	61da      	str	r2, [r3, #28]
 800c23a:	2304      	movs	r3, #4
 800c23c:	e08f      	b.n	800c35e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	0a5b      	lsrs	r3, r3, #9
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	8952      	ldrh	r2, [r2, #10]
 800c246:	3a01      	subs	r2, #1
 800c248:	4013      	ands	r3, r2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d17a      	bne.n	800c344 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	4619      	mov	r1, r3
 800c256:	4610      	mov	r0, r2
 800c258:	f7ff fc83 	bl	800bb62 <get_fat>
 800c25c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d801      	bhi.n	800c268 <dir_next+0x8c>
 800c264:	2302      	movs	r3, #2
 800c266:	e07a      	b.n	800c35e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26e:	d101      	bne.n	800c274 <dir_next+0x98>
 800c270:	2301      	movs	r3, #1
 800c272:	e074      	b.n	800c35e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d358      	bcc.n	800c330 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d104      	bne.n	800c28e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	61da      	str	r2, [r3, #28]
 800c28a:	2304      	movs	r3, #4
 800c28c:	e067      	b.n	800c35e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	4619      	mov	r1, r3
 800c296:	4610      	mov	r0, r2
 800c298:	f7ff fe59 	bl	800bf4e <create_chain>
 800c29c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <dir_next+0xcc>
 800c2a4:	2307      	movs	r3, #7
 800c2a6:	e05a      	b.n	800c35e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d101      	bne.n	800c2b2 <dir_next+0xd6>
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	e055      	b.n	800c35e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b8:	d101      	bne.n	800c2be <dir_next+0xe2>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e04f      	b.n	800c35e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f7ff fb50 	bl	800b964 <sync_window>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <dir_next+0xf2>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e047      	b.n	800c35e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3330      	adds	r3, #48	@ 0x30
 800c2d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7ff f97a 	bl	800b5d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c2de:	2300      	movs	r3, #0
 800c2e0:	613b      	str	r3, [r7, #16]
 800c2e2:	6979      	ldr	r1, [r7, #20]
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7ff fc1d 	bl	800bb24 <clust2sect>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c2f0:	e012      	b.n	800c318 <dir_next+0x13c>
						fs->wflag = 1;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f7ff fb33 	bl	800b964 <sync_window>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <dir_next+0x12c>
 800c304:	2301      	movs	r3, #1
 800c306:	e02a      	b.n	800c35e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	3301      	adds	r3, #1
 800c30c:	613b      	str	r3, [r7, #16]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c312:	1c5a      	adds	r2, r3, #1
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	895b      	ldrh	r3, [r3, #10]
 800c31c:	461a      	mov	r2, r3
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	4293      	cmp	r3, r2
 800c322:	d3e6      	bcc.n	800c2f2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	1ad2      	subs	r2, r2, r3
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c336:	6979      	ldr	r1, [r7, #20]
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7ff fbf3 	bl	800bb24 <clust2sect>
 800c33e:	4602      	mov	r2, r0
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c356:	441a      	add	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c376:	2100      	movs	r1, #0
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff feb4 	bl	800c0e6 <dir_sdi>
 800c37e:	4603      	mov	r3, r0
 800c380:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c382:	7dfb      	ldrb	r3, [r7, #23]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d12b      	bne.n	800c3e0 <dir_alloc+0x7a>
		n = 0;
 800c388:	2300      	movs	r3, #0
 800c38a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	69db      	ldr	r3, [r3, #28]
 800c390:	4619      	mov	r1, r3
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff fb2a 	bl	800b9ec <move_window>
 800c398:	4603      	mov	r3, r0
 800c39a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c39c:	7dfb      	ldrb	r3, [r7, #23]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d11d      	bne.n	800c3de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2be5      	cmp	r3, #229	@ 0xe5
 800c3aa:	d004      	beq.n	800c3b6 <dir_alloc+0x50>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a1b      	ldr	r3, [r3, #32]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d107      	bne.n	800c3c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	613b      	str	r3, [r7, #16]
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d102      	bne.n	800c3ca <dir_alloc+0x64>
 800c3c4:	e00c      	b.n	800c3e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7ff ff05 	bl	800c1dc <dir_next>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d0d7      	beq.n	800c38c <dir_alloc+0x26>
 800c3dc:	e000      	b.n	800c3e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c3de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	2b04      	cmp	r3, #4
 800c3e4:	d101      	bne.n	800c3ea <dir_alloc+0x84>
 800c3e6:	2307      	movs	r3, #7
 800c3e8:	75fb      	strb	r3, [r7, #23]
	return res;
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	331a      	adds	r3, #26
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff f842 	bl	800b48c <ld_word>
 800c408:	4603      	mov	r3, r0
 800c40a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b03      	cmp	r3, #3
 800c412:	d109      	bne.n	800c428 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	3314      	adds	r3, #20
 800c418:	4618      	mov	r0, r3
 800c41a:	f7ff f837 	bl	800b48c <ld_word>
 800c41e:	4603      	mov	r3, r0
 800c420:	041b      	lsls	r3, r3, #16
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	4313      	orrs	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c428:	68fb      	ldr	r3, [r7, #12]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	60f8      	str	r0, [r7, #12]
 800c43a:	60b9      	str	r1, [r7, #8]
 800c43c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	331a      	adds	r3, #26
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	b292      	uxth	r2, r2
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f7ff f85a 	bl	800b502 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	2b03      	cmp	r3, #3
 800c454:	d109      	bne.n	800c46a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	f103 0214 	add.w	r2, r3, #20
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	0c1b      	lsrs	r3, r3, #16
 800c460:	b29b      	uxth	r3, r3
 800c462:	4619      	mov	r1, r3
 800c464:	4610      	mov	r0, r2
 800c466:	f7ff f84c 	bl	800b502 <st_word>
	}
}
 800c46a:	bf00      	nop
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b086      	sub	sp, #24
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c480:	2100      	movs	r1, #0
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff fe2f 	bl	800c0e6 <dir_sdi>
 800c488:	4603      	mov	r3, r0
 800c48a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <dir_find+0x24>
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	e03e      	b.n	800c514 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	4619      	mov	r1, r3
 800c49c:	6938      	ldr	r0, [r7, #16]
 800c49e:	f7ff faa5 	bl	800b9ec <move_window>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d12f      	bne.n	800c50c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a1b      	ldr	r3, [r3, #32]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d102      	bne.n	800c4c0 <dir_find+0x4e>
 800c4ba:	2304      	movs	r3, #4
 800c4bc:	75fb      	strb	r3, [r7, #23]
 800c4be:	e028      	b.n	800c512 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a1b      	ldr	r3, [r3, #32]
 800c4c4:	330b      	adds	r3, #11
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	330b      	adds	r3, #11
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	f003 0308 	and.w	r3, r3, #8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10a      	bne.n	800c4f8 <dir_find+0x86>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a18      	ldr	r0, [r3, #32]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3324      	adds	r3, #36	@ 0x24
 800c4ea:	220b      	movs	r2, #11
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	f7ff f88b 	bl	800b608 <mem_cmp>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff fe6e 	bl	800c1dc <dir_next>
 800c500:	4603      	mov	r3, r0
 800c502:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c504:	7dfb      	ldrb	r3, [r7, #23]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0c5      	beq.n	800c496 <dir_find+0x24>
 800c50a:	e002      	b.n	800c512 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c50c:	bf00      	nop
 800c50e:	e000      	b.n	800c512 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c510:	bf00      	nop

	return res;
 800c512:	7dfb      	ldrb	r3, [r7, #23]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c52a:	2101      	movs	r1, #1
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff ff1a 	bl	800c366 <dir_alloc>
 800c532:	4603      	mov	r3, r0
 800c534:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c536:	7bfb      	ldrb	r3, [r7, #15]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d11c      	bne.n	800c576 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	69db      	ldr	r3, [r3, #28]
 800c540:	4619      	mov	r1, r3
 800c542:	68b8      	ldr	r0, [r7, #8]
 800c544:	f7ff fa52 	bl	800b9ec <move_window>
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d111      	bne.n	800c576 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	2220      	movs	r2, #32
 800c558:	2100      	movs	r1, #0
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff f839 	bl	800b5d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a18      	ldr	r0, [r3, #32]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3324      	adds	r3, #36	@ 0x24
 800c568:	220b      	movs	r2, #11
 800c56a:	4619      	mov	r1, r3
 800c56c:	f7ff f810 	bl	800b590 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2201      	movs	r2, #1
 800c574:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c576:	7bfb      	ldrb	r3, [r7, #15]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	60fb      	str	r3, [r7, #12]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3324      	adds	r3, #36	@ 0x24
 800c594:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c596:	220b      	movs	r2, #11
 800c598:	2120      	movs	r1, #32
 800c59a:	68b8      	ldr	r0, [r7, #8]
 800c59c:	f7ff f819 	bl	800b5d2 <mem_set>
	si = i = 0; ni = 8;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	613b      	str	r3, [r7, #16]
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	61fb      	str	r3, [r7, #28]
 800c5a8:	2308      	movs	r3, #8
 800c5aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	61fa      	str	r2, [r7, #28]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c5ba:	7efb      	ldrb	r3, [r7, #27]
 800c5bc:	2b20      	cmp	r3, #32
 800c5be:	d94e      	bls.n	800c65e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c5c0:	7efb      	ldrb	r3, [r7, #27]
 800c5c2:	2b2f      	cmp	r3, #47	@ 0x2f
 800c5c4:	d006      	beq.n	800c5d4 <create_name+0x54>
 800c5c6:	7efb      	ldrb	r3, [r7, #27]
 800c5c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c5ca:	d110      	bne.n	800c5ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c5cc:	e002      	b.n	800c5d4 <create_name+0x54>
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	61fb      	str	r3, [r7, #28]
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	4413      	add	r3, r2
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c5de:	d0f6      	beq.n	800c5ce <create_name+0x4e>
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c5ea:	d0f0      	beq.n	800c5ce <create_name+0x4e>
			break;
 800c5ec:	e038      	b.n	800c660 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c5ee:	7efb      	ldrb	r3, [r7, #27]
 800c5f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5f2:	d003      	beq.n	800c5fc <create_name+0x7c>
 800c5f4:	693a      	ldr	r2, [r7, #16]
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d30c      	bcc.n	800c616 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b0b      	cmp	r3, #11
 800c600:	d002      	beq.n	800c608 <create_name+0x88>
 800c602:	7efb      	ldrb	r3, [r7, #27]
 800c604:	2b2e      	cmp	r3, #46	@ 0x2e
 800c606:	d001      	beq.n	800c60c <create_name+0x8c>
 800c608:	2306      	movs	r3, #6
 800c60a:	e044      	b.n	800c696 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c60c:	2308      	movs	r3, #8
 800c60e:	613b      	str	r3, [r7, #16]
 800c610:	230b      	movs	r3, #11
 800c612:	617b      	str	r3, [r7, #20]
			continue;
 800c614:	e022      	b.n	800c65c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c616:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	da04      	bge.n	800c628 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c61e:	7efb      	ldrb	r3, [r7, #27]
 800c620:	3b80      	subs	r3, #128	@ 0x80
 800c622:	4a1f      	ldr	r2, [pc, #124]	@ (800c6a0 <create_name+0x120>)
 800c624:	5cd3      	ldrb	r3, [r2, r3]
 800c626:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c628:	7efb      	ldrb	r3, [r7, #27]
 800c62a:	4619      	mov	r1, r3
 800c62c:	481d      	ldr	r0, [pc, #116]	@ (800c6a4 <create_name+0x124>)
 800c62e:	f7ff f812 	bl	800b656 <chk_chr>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <create_name+0xbc>
 800c638:	2306      	movs	r3, #6
 800c63a:	e02c      	b.n	800c696 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c63c:	7efb      	ldrb	r3, [r7, #27]
 800c63e:	2b60      	cmp	r3, #96	@ 0x60
 800c640:	d905      	bls.n	800c64e <create_name+0xce>
 800c642:	7efb      	ldrb	r3, [r7, #27]
 800c644:	2b7a      	cmp	r3, #122	@ 0x7a
 800c646:	d802      	bhi.n	800c64e <create_name+0xce>
 800c648:	7efb      	ldrb	r3, [r7, #27]
 800c64a:	3b20      	subs	r3, #32
 800c64c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	1c5a      	adds	r2, r3, #1
 800c652:	613a      	str	r2, [r7, #16]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	4413      	add	r3, r2
 800c658:	7efa      	ldrb	r2, [r7, #27]
 800c65a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c65c:	e7a6      	b.n	800c5ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c65e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	441a      	add	r2, r3
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <create_name+0xf4>
 800c670:	2306      	movs	r3, #6
 800c672:	e010      	b.n	800c696 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2be5      	cmp	r3, #229	@ 0xe5
 800c67a:	d102      	bne.n	800c682 <create_name+0x102>
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2205      	movs	r2, #5
 800c680:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c682:	7efb      	ldrb	r3, [r7, #27]
 800c684:	2b20      	cmp	r3, #32
 800c686:	d801      	bhi.n	800c68c <create_name+0x10c>
 800c688:	2204      	movs	r2, #4
 800c68a:	e000      	b.n	800c68e <create_name+0x10e>
 800c68c:	2200      	movs	r2, #0
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	330b      	adds	r3, #11
 800c692:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c694:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c696:	4618      	mov	r0, r3
 800c698:	3720      	adds	r7, #32
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	08011264 	.word	0x08011264
 800c6a4:	080111f4 	.word	0x080111f4

0800c6a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c6bc:	e002      	b.n	800c6c4 <follow_path+0x1c>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	603b      	str	r3, [r7, #0]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6ca:	d0f8      	beq.n	800c6be <follow_path+0x16>
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c6d2:	d0f4      	beq.n	800c6be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b1f      	cmp	r3, #31
 800c6e0:	d80a      	bhi.n	800c6f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2280      	movs	r2, #128	@ 0x80
 800c6e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7ff fcfa 	bl	800c0e6 <dir_sdi>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	75fb      	strb	r3, [r7, #23]
 800c6f6:	e043      	b.n	800c780 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6f8:	463b      	mov	r3, r7
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7ff ff3f 	bl	800c580 <create_name>
 800c702:	4603      	mov	r3, r0
 800c704:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c706:	7dfb      	ldrb	r3, [r7, #23]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d134      	bne.n	800c776 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff feb0 	bl	800c472 <dir_find>
 800c712:	4603      	mov	r3, r0
 800c714:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c71c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00a      	beq.n	800c73a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c724:	7dfb      	ldrb	r3, [r7, #23]
 800c726:	2b04      	cmp	r3, #4
 800c728:	d127      	bne.n	800c77a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c72a:	7afb      	ldrb	r3, [r7, #11]
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d122      	bne.n	800c77a <follow_path+0xd2>
 800c734:	2305      	movs	r3, #5
 800c736:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c738:	e01f      	b.n	800c77a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c73a:	7afb      	ldrb	r3, [r7, #11]
 800c73c:	f003 0304 	and.w	r3, r3, #4
 800c740:	2b00      	cmp	r3, #0
 800c742:	d11c      	bne.n	800c77e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	799b      	ldrb	r3, [r3, #6]
 800c748:	f003 0310 	and.w	r3, r3, #16
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d102      	bne.n	800c756 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c750:	2305      	movs	r3, #5
 800c752:	75fb      	strb	r3, [r7, #23]
 800c754:	e014      	b.n	800c780 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c764:	4413      	add	r3, r2
 800c766:	4619      	mov	r1, r3
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f7ff fe43 	bl	800c3f4 <ld_clust>
 800c76e:	4602      	mov	r2, r0
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c774:	e7c0      	b.n	800c6f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800c776:	bf00      	nop
 800c778:	e002      	b.n	800c780 <follow_path+0xd8>
				break;
 800c77a:	bf00      	nop
 800c77c:	e000      	b.n	800c780 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c77e:	bf00      	nop
			}
		}
	}

	return res;
 800c780:	7dfb      	ldrb	r3, [r7, #23]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c78a:	b480      	push	{r7}
 800c78c:	b087      	sub	sp, #28
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c792:	f04f 33ff 	mov.w	r3, #4294967295
 800c796:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d031      	beq.n	800c804 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	617b      	str	r3, [r7, #20]
 800c7a6:	e002      	b.n	800c7ae <get_ldnumber+0x24>
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	617b      	str	r3, [r7, #20]
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b20      	cmp	r3, #32
 800c7b4:	d903      	bls.n	800c7be <get_ldnumber+0x34>
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7bc:	d1f4      	bne.n	800c7a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7c4:	d11c      	bne.n	800c800 <get_ldnumber+0x76>
			tp = *path;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	60fa      	str	r2, [r7, #12]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	3b30      	subs	r3, #48	@ 0x30
 800c7d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	2b09      	cmp	r3, #9
 800c7dc:	d80e      	bhi.n	800c7fc <get_ldnumber+0x72>
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d10a      	bne.n	800c7fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d107      	bne.n	800c7fc <get_ldnumber+0x72>
					vol = (int)i;
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	617b      	str	r3, [r7, #20]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	e002      	b.n	800c806 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c800:	2300      	movs	r3, #0
 800c802:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c804:	693b      	ldr	r3, [r7, #16]
}
 800c806:	4618      	mov	r0, r3
 800c808:	371c      	adds	r7, #28
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
	...

0800c814 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	70da      	strb	r2, [r3, #3]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f04f 32ff 	mov.w	r2, #4294967295
 800c82a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff f8dc 	bl	800b9ec <move_window>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <check_fs+0x2a>
 800c83a:	2304      	movs	r3, #4
 800c83c:	e038      	b.n	800c8b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	3330      	adds	r3, #48	@ 0x30
 800c842:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fe20 	bl	800b48c <ld_word>
 800c84c:	4603      	mov	r3, r0
 800c84e:	461a      	mov	r2, r3
 800c850:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c854:	429a      	cmp	r2, r3
 800c856:	d001      	beq.n	800c85c <check_fs+0x48>
 800c858:	2303      	movs	r3, #3
 800c85a:	e029      	b.n	800c8b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c862:	2be9      	cmp	r3, #233	@ 0xe9
 800c864:	d009      	beq.n	800c87a <check_fs+0x66>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c86c:	2beb      	cmp	r3, #235	@ 0xeb
 800c86e:	d11e      	bne.n	800c8ae <check_fs+0x9a>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c876:	2b90      	cmp	r3, #144	@ 0x90
 800c878:	d119      	bne.n	800c8ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	3330      	adds	r3, #48	@ 0x30
 800c87e:	3336      	adds	r3, #54	@ 0x36
 800c880:	4618      	mov	r0, r3
 800c882:	f7fe fe1b 	bl	800b4bc <ld_dword>
 800c886:	4603      	mov	r3, r0
 800c888:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c88c:	4a0a      	ldr	r2, [pc, #40]	@ (800c8b8 <check_fs+0xa4>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d101      	bne.n	800c896 <check_fs+0x82>
 800c892:	2300      	movs	r3, #0
 800c894:	e00c      	b.n	800c8b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3330      	adds	r3, #48	@ 0x30
 800c89a:	3352      	adds	r3, #82	@ 0x52
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7fe fe0d 	bl	800b4bc <ld_dword>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	4a05      	ldr	r2, [pc, #20]	@ (800c8bc <check_fs+0xa8>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d101      	bne.n	800c8ae <check_fs+0x9a>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e000      	b.n	800c8b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c8ae:	2302      	movs	r3, #2
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	00544146 	.word	0x00544146
 800c8bc:	33544146 	.word	0x33544146

0800c8c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b096      	sub	sp, #88	@ 0x58
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f7ff ff58 	bl	800c78a <get_ldnumber>
 800c8da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c8dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	da01      	bge.n	800c8e6 <find_volume+0x26>
 800c8e2:	230b      	movs	r3, #11
 800c8e4:	e22d      	b.n	800cd42 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c8e6:	4aa1      	ldr	r2, [pc, #644]	@ (800cb6c <find_volume+0x2ac>)
 800c8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <find_volume+0x3a>
 800c8f6:	230c      	movs	r3, #12
 800c8f8:	e223      	b.n	800cd42 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	f023 0301 	bic.w	r3, r3, #1
 800c906:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d01a      	beq.n	800c946 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c912:	785b      	ldrb	r3, [r3, #1]
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fd19 	bl	800b34c <disk_status>
 800c91a:	4603      	mov	r3, r0
 800c91c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c920:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10c      	bne.n	800c946 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c92c:	79fb      	ldrb	r3, [r7, #7]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d007      	beq.n	800c942 <find_volume+0x82>
 800c932:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c936:	f003 0304 	and.w	r3, r3, #4
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c93e:	230a      	movs	r3, #10
 800c940:	e1ff      	b.n	800cd42 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c942:	2300      	movs	r3, #0
 800c944:	e1fd      	b.n	800cd42 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c948:	2200      	movs	r2, #0
 800c94a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c952:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c956:	785b      	ldrb	r3, [r3, #1]
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fe fd11 	bl	800b380 <disk_initialize>
 800c95e:	4603      	mov	r3, r0
 800c960:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c964:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d001      	beq.n	800c974 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c970:	2303      	movs	r3, #3
 800c972:	e1e6      	b.n	800cd42 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d007      	beq.n	800c98a <find_volume+0xca>
 800c97a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c97e:	f003 0304 	and.w	r3, r3, #4
 800c982:	2b00      	cmp	r3, #0
 800c984:	d001      	beq.n	800c98a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c986:	230a      	movs	r3, #10
 800c988:	e1db      	b.n	800cd42 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c98e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c990:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c992:	f7ff ff3f 	bl	800c814 <check_fs>
 800c996:	4603      	mov	r3, r0
 800c998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c99c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d149      	bne.n	800ca38 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9a8:	e01e      	b.n	800c9e8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9b2:	011b      	lsls	r3, r3, #4
 800c9b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c9b8:	4413      	add	r3, r2
 800c9ba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9be:	3304      	adds	r3, #4
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d006      	beq.n	800c9d4 <find_volume+0x114>
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fd76 	bl	800b4bc <ld_dword>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	e000      	b.n	800c9d6 <find_volume+0x116>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	3358      	adds	r3, #88	@ 0x58
 800c9dc:	443b      	add	r3, r7
 800c9de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ea:	2b03      	cmp	r3, #3
 800c9ec:	d9dd      	bls.n	800c9aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c9f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <find_volume+0x13e>
 800c9f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c9fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	3358      	adds	r3, #88	@ 0x58
 800ca04:	443b      	add	r3, r7
 800ca06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca0a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d005      	beq.n	800ca1e <find_volume+0x15e>
 800ca12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca16:	f7ff fefd 	bl	800c814 <check_fs>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	e000      	b.n	800ca20 <find_volume+0x160>
 800ca1e:	2303      	movs	r3, #3
 800ca20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ca24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d905      	bls.n	800ca38 <find_volume+0x178>
 800ca2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca2e:	3301      	adds	r3, #1
 800ca30:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca34:	2b03      	cmp	r3, #3
 800ca36:	d9e2      	bls.n	800c9fe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ca38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca3c:	2b04      	cmp	r3, #4
 800ca3e:	d101      	bne.n	800ca44 <find_volume+0x184>
 800ca40:	2301      	movs	r3, #1
 800ca42:	e17e      	b.n	800cd42 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ca44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d901      	bls.n	800ca50 <find_volume+0x190>
 800ca4c:	230d      	movs	r3, #13
 800ca4e:	e178      	b.n	800cd42 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ca50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca52:	3330      	adds	r3, #48	@ 0x30
 800ca54:	330b      	adds	r3, #11
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fe fd18 	bl	800b48c <ld_word>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca62:	d001      	beq.n	800ca68 <find_volume+0x1a8>
 800ca64:	230d      	movs	r3, #13
 800ca66:	e16c      	b.n	800cd42 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ca68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6a:	3330      	adds	r3, #48	@ 0x30
 800ca6c:	3316      	adds	r3, #22
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fe fd0c 	bl	800b48c <ld_word>
 800ca74:	4603      	mov	r3, r0
 800ca76:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ca78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d106      	bne.n	800ca8c <find_volume+0x1cc>
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca80:	3330      	adds	r3, #48	@ 0x30
 800ca82:	3324      	adds	r3, #36	@ 0x24
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fe fd19 	bl	800b4bc <ld_dword>
 800ca8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca90:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ca92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca94:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ca98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9e:	789b      	ldrb	r3, [r3, #2]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d005      	beq.n	800cab0 <find_volume+0x1f0>
 800caa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa6:	789b      	ldrb	r3, [r3, #2]
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d001      	beq.n	800cab0 <find_volume+0x1f0>
 800caac:	230d      	movs	r3, #13
 800caae:	e148      	b.n	800cd42 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab2:	789b      	ldrb	r3, [r3, #2]
 800cab4:	461a      	mov	r2, r3
 800cab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab8:	fb02 f303 	mul.w	r3, r2, r3
 800cabc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cac4:	461a      	mov	r2, r3
 800cac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800caca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cacc:	895b      	ldrh	r3, [r3, #10]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d008      	beq.n	800cae4 <find_volume+0x224>
 800cad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad4:	895b      	ldrh	r3, [r3, #10]
 800cad6:	461a      	mov	r2, r3
 800cad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cada:	895b      	ldrh	r3, [r3, #10]
 800cadc:	3b01      	subs	r3, #1
 800cade:	4013      	ands	r3, r2
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d001      	beq.n	800cae8 <find_volume+0x228>
 800cae4:	230d      	movs	r3, #13
 800cae6:	e12c      	b.n	800cd42 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caea:	3330      	adds	r3, #48	@ 0x30
 800caec:	3311      	adds	r3, #17
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fe fccc 	bl	800b48c <ld_word>
 800caf4:	4603      	mov	r3, r0
 800caf6:	461a      	mov	r2, r3
 800caf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafe:	891b      	ldrh	r3, [r3, #8]
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <find_volume+0x24e>
 800cb0a:	230d      	movs	r3, #13
 800cb0c:	e119      	b.n	800cd42 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb10:	3330      	adds	r3, #48	@ 0x30
 800cb12:	3313      	adds	r3, #19
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe fcb9 	bl	800b48c <ld_word>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cb1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <find_volume+0x272>
 800cb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb26:	3330      	adds	r3, #48	@ 0x30
 800cb28:	3320      	adds	r3, #32
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe fcc6 	bl	800b4bc <ld_dword>
 800cb30:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb34:	3330      	adds	r3, #48	@ 0x30
 800cb36:	330e      	adds	r3, #14
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fe fca7 	bl	800b48c <ld_word>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cb42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <find_volume+0x28c>
 800cb48:	230d      	movs	r3, #13
 800cb4a:	e0fa      	b.n	800cd42 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cb4c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cb4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb50:	4413      	add	r3, r2
 800cb52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb54:	8912      	ldrh	r2, [r2, #8]
 800cb56:	0912      	lsrs	r2, r2, #4
 800cb58:	b292      	uxth	r2, r2
 800cb5a:	4413      	add	r3, r2
 800cb5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cb5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d204      	bcs.n	800cb70 <find_volume+0x2b0>
 800cb66:	230d      	movs	r3, #13
 800cb68:	e0eb      	b.n	800cd42 <find_volume+0x482>
 800cb6a:	bf00      	nop
 800cb6c:	200005b4 	.word	0x200005b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cb70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb78:	8952      	ldrh	r2, [r2, #10]
 800cb7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb7e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d101      	bne.n	800cb8a <find_volume+0x2ca>
 800cb86:	230d      	movs	r3, #13
 800cb88:	e0db      	b.n	800cd42 <find_volume+0x482>
		fmt = FS_FAT32;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb92:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d802      	bhi.n	800cba0 <find_volume+0x2e0>
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d802      	bhi.n	800cbb0 <find_volume+0x2f0>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb2:	1c9a      	adds	r2, r3, #2
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbbc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cbbe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cbc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbc2:	441a      	add	r2, r3
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cbc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	441a      	add	r2, r3
 800cbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cbd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d11e      	bne.n	800cc18 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbdc:	3330      	adds	r3, #48	@ 0x30
 800cbde:	332a      	adds	r3, #42	@ 0x2a
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fe fc53 	bl	800b48c <ld_word>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <find_volume+0x330>
 800cbec:	230d      	movs	r3, #13
 800cbee:	e0a8      	b.n	800cd42 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf2:	891b      	ldrh	r3, [r3, #8]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <find_volume+0x33c>
 800cbf8:	230d      	movs	r3, #13
 800cbfa:	e0a2      	b.n	800cd42 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfe:	3330      	adds	r3, #48	@ 0x30
 800cc00:	332c      	adds	r3, #44	@ 0x2c
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe fc5a 	bl	800b4bc <ld_dword>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc16:	e01f      	b.n	800cc58 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1a:	891b      	ldrh	r3, [r3, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d101      	bne.n	800cc24 <find_volume+0x364>
 800cc20:	230d      	movs	r3, #13
 800cc22:	e08e      	b.n	800cd42 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc26:	6a1a      	ldr	r2, [r3, #32]
 800cc28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc2a:	441a      	add	r2, r3
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d103      	bne.n	800cc40 <find_volume+0x380>
 800cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	e00a      	b.n	800cc56 <find_volume+0x396>
 800cc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc42:	695a      	ldr	r2, [r3, #20]
 800cc44:	4613      	mov	r3, r2
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	4413      	add	r3, r2
 800cc4a:	085a      	lsrs	r2, r3, #1
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4e:	695b      	ldr	r3, [r3, #20]
 800cc50:	f003 0301 	and.w	r3, r3, #1
 800cc54:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cc56:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5a:	699a      	ldr	r2, [r3, #24]
 800cc5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc5e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800cc62:	0a5b      	lsrs	r3, r3, #9
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d201      	bcs.n	800cc6c <find_volume+0x3ac>
 800cc68:	230d      	movs	r3, #13
 800cc6a:	e06a      	b.n	800cd42 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc72:	611a      	str	r2, [r3, #16]
 800cc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc76:	691a      	ldr	r2, [r3, #16]
 800cc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7e:	2280      	movs	r2, #128	@ 0x80
 800cc80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cc82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d149      	bne.n	800cd1e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8c:	3330      	adds	r3, #48	@ 0x30
 800cc8e:	3330      	adds	r3, #48	@ 0x30
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fe fbfb 	bl	800b48c <ld_word>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d140      	bne.n	800cd1e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cc9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc9e:	3301      	adds	r3, #1
 800cca0:	4619      	mov	r1, r3
 800cca2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cca4:	f7fe fea2 	bl	800b9ec <move_window>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d137      	bne.n	800cd1e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ccae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb6:	3330      	adds	r3, #48	@ 0x30
 800ccb8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fe fbe5 	bl	800b48c <ld_word>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d127      	bne.n	800cd1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ccce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd0:	3330      	adds	r3, #48	@ 0x30
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe fbf2 	bl	800b4bc <ld_dword>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	4a1c      	ldr	r2, [pc, #112]	@ (800cd4c <find_volume+0x48c>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d11e      	bne.n	800cd1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce2:	3330      	adds	r3, #48	@ 0x30
 800cce4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fe fbe7 	bl	800b4bc <ld_dword>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	4a17      	ldr	r2, [pc, #92]	@ (800cd50 <find_volume+0x490>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d113      	bne.n	800cd1e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	3330      	adds	r3, #48	@ 0x30
 800ccfa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fe fbdc 	bl	800b4bc <ld_dword>
 800cd04:	4602      	mov	r2, r0
 800cd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd08:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0c:	3330      	adds	r3, #48	@ 0x30
 800cd0e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe fbd2 	bl	800b4bc <ld_dword>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cd24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cd26:	4b0b      	ldr	r3, [pc, #44]	@ (800cd54 <find_volume+0x494>)
 800cd28:	881b      	ldrh	r3, [r3, #0]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	4b09      	ldr	r3, [pc, #36]	@ (800cd54 <find_volume+0x494>)
 800cd30:	801a      	strh	r2, [r3, #0]
 800cd32:	4b08      	ldr	r3, [pc, #32]	@ (800cd54 <find_volume+0x494>)
 800cd34:	881a      	ldrh	r2, [r3, #0]
 800cd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd38:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd3c:	f7fe fdee 	bl	800b91c <clear_lock>
#endif
	return FR_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3758      	adds	r7, #88	@ 0x58
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	41615252 	.word	0x41615252
 800cd50:	61417272 	.word	0x61417272
 800cd54:	200005b8 	.word	0x200005b8

0800cd58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cd62:	2309      	movs	r3, #9
 800cd64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d01c      	beq.n	800cda6 <validate+0x4e>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d018      	beq.n	800cda6 <validate+0x4e>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d013      	beq.n	800cda6 <validate+0x4e>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	889a      	ldrh	r2, [r3, #4]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	88db      	ldrh	r3, [r3, #6]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d10c      	bne.n	800cda6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	785b      	ldrb	r3, [r3, #1]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7fe fada 	bl	800b34c <disk_status>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <validate+0x4e>
			res = FR_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d102      	bne.n	800cdb2 <validate+0x5a>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	e000      	b.n	800cdb4 <validate+0x5c>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	6013      	str	r3, [r2, #0]
	return res;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
	...

0800cdc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b088      	sub	sp, #32
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cdd6:	f107 0310 	add.w	r3, r7, #16
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7ff fcd5 	bl	800c78a <get_ldnumber>
 800cde0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	da01      	bge.n	800cdec <f_mount+0x28>
 800cde8:	230b      	movs	r3, #11
 800cdea:	e02b      	b.n	800ce44 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cdec:	4a17      	ldr	r2, [pc, #92]	@ (800ce4c <f_mount+0x88>)
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d005      	beq.n	800ce08 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cdfc:	69b8      	ldr	r0, [r7, #24]
 800cdfe:	f7fe fd8d 	bl	800b91c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	2200      	movs	r2, #0
 800ce06:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	490d      	ldr	r1, [pc, #52]	@ (800ce4c <f_mount+0x88>)
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d002      	beq.n	800ce2a <f_mount+0x66>
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d001      	beq.n	800ce2e <f_mount+0x6a>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e00a      	b.n	800ce44 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ce2e:	f107 010c 	add.w	r1, r7, #12
 800ce32:	f107 0308 	add.w	r3, r7, #8
 800ce36:	2200      	movs	r2, #0
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff fd41 	bl	800c8c0 <find_volume>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3720      	adds	r7, #32
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	200005b4 	.word	0x200005b4

0800ce50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b098      	sub	sp, #96	@ 0x60
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d101      	bne.n	800ce68 <f_open+0x18>
 800ce64:	2309      	movs	r3, #9
 800ce66:	e1a9      	b.n	800d1bc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ce68:	79fb      	ldrb	r3, [r7, #7]
 800ce6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce6e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ce70:	79fa      	ldrb	r2, [r7, #7]
 800ce72:	f107 0110 	add.w	r1, r7, #16
 800ce76:	f107 0308 	add.w	r3, r7, #8
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff fd20 	bl	800c8c0 <find_volume>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ce86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f040 818d 	bne.w	800d1aa <f_open+0x35a>
		dj.obj.fs = fs;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	f107 0314 	add.w	r3, r7, #20
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff fc03 	bl	800c6a8 <follow_path>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cea8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d118      	bne.n	800cee2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ceb0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ceb4:	b25b      	sxtb	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	da03      	bge.n	800cec2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ceba:	2306      	movs	r3, #6
 800cebc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cec0:	e00f      	b.n	800cee2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	bf8c      	ite	hi
 800cec8:	2301      	movhi	r3, #1
 800ceca:	2300      	movls	r3, #0
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	461a      	mov	r2, r3
 800ced0:	f107 0314 	add.w	r3, r7, #20
 800ced4:	4611      	mov	r1, r2
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe fbd8 	bl	800b68c <chk_lock>
 800cedc:	4603      	mov	r3, r0
 800cede:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	f003 031c 	and.w	r3, r3, #28
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d07f      	beq.n	800cfec <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ceec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d017      	beq.n	800cf24 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cef4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	d10e      	bne.n	800cf1a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cefc:	f7fe fc22 	bl	800b744 <enq_lock>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d006      	beq.n	800cf14 <f_open+0xc4>
 800cf06:	f107 0314 	add.w	r3, r7, #20
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff fb06 	bl	800c51c <dir_register>
 800cf10:	4603      	mov	r3, r0
 800cf12:	e000      	b.n	800cf16 <f_open+0xc6>
 800cf14:	2312      	movs	r3, #18
 800cf16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf1a:	79fb      	ldrb	r3, [r7, #7]
 800cf1c:	f043 0308 	orr.w	r3, r3, #8
 800cf20:	71fb      	strb	r3, [r7, #7]
 800cf22:	e010      	b.n	800cf46 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf24:	7ebb      	ldrb	r3, [r7, #26]
 800cf26:	f003 0311 	and.w	r3, r3, #17
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d003      	beq.n	800cf36 <f_open+0xe6>
					res = FR_DENIED;
 800cf2e:	2307      	movs	r3, #7
 800cf30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cf34:	e007      	b.n	800cf46 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cf36:	79fb      	ldrb	r3, [r7, #7]
 800cf38:	f003 0304 	and.w	r3, r3, #4
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <f_open+0xf6>
 800cf40:	2308      	movs	r3, #8
 800cf42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cf46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d168      	bne.n	800d020 <f_open+0x1d0>
 800cf4e:	79fb      	ldrb	r3, [r7, #7]
 800cf50:	f003 0308 	and.w	r3, r3, #8
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d063      	beq.n	800d020 <f_open+0x1d0>
				dw = GET_FATTIME();
 800cf58:	f7fb f80c 	bl	8007f74 <get_fattime>
 800cf5c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf60:	330e      	adds	r3, #14
 800cf62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe fae7 	bl	800b538 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cf6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6c:	3316      	adds	r3, #22
 800cf6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe fae1 	bl	800b538 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cf76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf78:	330b      	adds	r3, #11
 800cf7a:	2220      	movs	r2, #32
 800cf7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf82:	4611      	mov	r1, r2
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7ff fa35 	bl	800c3f4 <ld_clust>
 800cf8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf90:	2200      	movs	r2, #0
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff fa4d 	bl	800c432 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cf98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf9a:	331c      	adds	r3, #28
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fe faca 	bl	800b538 <st_dword>
					fs->wflag = 1;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cfaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d037      	beq.n	800d020 <f_open+0x1d0>
						dw = fs->winsect;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cfb6:	f107 0314 	add.w	r3, r7, #20
 800cfba:	2200      	movs	r2, #0
 800cfbc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fe ff60 	bl	800be84 <remove_chain>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cfca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d126      	bne.n	800d020 <f_open+0x1d0>
							res = move_window(fs, dw);
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe fd08 	bl	800b9ec <move_window>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cfe6:	3a01      	subs	r2, #1
 800cfe8:	60da      	str	r2, [r3, #12]
 800cfea:	e019      	b.n	800d020 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cfec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d115      	bne.n	800d020 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cff4:	7ebb      	ldrb	r3, [r7, #26]
 800cff6:	f003 0310 	and.w	r3, r3, #16
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d003      	beq.n	800d006 <f_open+0x1b6>
					res = FR_NO_FILE;
 800cffe:	2304      	movs	r3, #4
 800d000:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d004:	e00c      	b.n	800d020 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	f003 0302 	and.w	r3, r3, #2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d007      	beq.n	800d020 <f_open+0x1d0>
 800d010:	7ebb      	ldrb	r3, [r7, #26]
 800d012:	f003 0301 	and.w	r3, r3, #1
 800d016:	2b00      	cmp	r3, #0
 800d018:	d002      	beq.n	800d020 <f_open+0x1d0>
						res = FR_DENIED;
 800d01a:	2307      	movs	r3, #7
 800d01c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d020:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d024:	2b00      	cmp	r3, #0
 800d026:	d126      	bne.n	800d076 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d028:	79fb      	ldrb	r3, [r7, #7]
 800d02a:	f003 0308 	and.w	r3, r3, #8
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d003      	beq.n	800d03a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d032:	79fb      	ldrb	r3, [r7, #7]
 800d034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d038:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d042:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	bf8c      	ite	hi
 800d04e:	2301      	movhi	r3, #1
 800d050:	2300      	movls	r3, #0
 800d052:	b2db      	uxtb	r3, r3
 800d054:	461a      	mov	r2, r3
 800d056:	f107 0314 	add.w	r3, r7, #20
 800d05a:	4611      	mov	r1, r2
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fe fb93 	bl	800b788 <inc_lock>
 800d062:	4602      	mov	r2, r0
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <f_open+0x226>
 800d070:	2302      	movs	r3, #2
 800d072:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d076:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f040 8095 	bne.w	800d1aa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d084:	4611      	mov	r1, r2
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff f9b4 	bl	800c3f4 <ld_clust>
 800d08c:	4602      	mov	r2, r0
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d094:	331c      	adds	r3, #28
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe fa10 	bl	800b4bc <ld_dword>
 800d09c:	4602      	mov	r2, r0
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	88da      	ldrh	r2, [r3, #6]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	79fa      	ldrb	r2, [r7, #7]
 800d0ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3330      	adds	r3, #48	@ 0x30
 800d0d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fe fa7a 	bl	800b5d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	f003 0320 	and.w	r3, r3, #32
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d060      	beq.n	800d1aa <f_open+0x35a>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d05c      	beq.n	800d1aa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	68da      	ldr	r2, [r3, #12]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	895b      	ldrh	r3, [r3, #10]
 800d0fc:	025b      	lsls	r3, r3, #9
 800d0fe:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d10c:	e016      	b.n	800d13c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe fd25 	bl	800bb62 <get_fat>
 800d118:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d11a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d802      	bhi.n	800d126 <f_open+0x2d6>
 800d120:	2302      	movs	r3, #2
 800d122:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12c:	d102      	bne.n	800d134 <f_open+0x2e4>
 800d12e:	2301      	movs	r3, #1
 800d130:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d134:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d13c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d140:	2b00      	cmp	r3, #0
 800d142:	d103      	bne.n	800d14c <f_open+0x2fc>
 800d144:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d148:	429a      	cmp	r2, r3
 800d14a:	d8e0      	bhi.n	800d10e <f_open+0x2be>
				}
				fp->clust = clst;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d150:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d152:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d156:	2b00      	cmp	r3, #0
 800d158:	d127      	bne.n	800d1aa <f_open+0x35a>
 800d15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d160:	2b00      	cmp	r3, #0
 800d162:	d022      	beq.n	800d1aa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe fcdb 	bl	800bb24 <clust2sect>
 800d16e:	6478      	str	r0, [r7, #68]	@ 0x44
 800d170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d172:	2b00      	cmp	r3, #0
 800d174:	d103      	bne.n	800d17e <f_open+0x32e>
						res = FR_INT_ERR;
 800d176:	2302      	movs	r3, #2
 800d178:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d17c:	e015      	b.n	800d1aa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d17e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d180:	0a5a      	lsrs	r2, r3, #9
 800d182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d184:	441a      	add	r2, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	7858      	ldrb	r0, [r3, #1]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6a1a      	ldr	r2, [r3, #32]
 800d198:	2301      	movs	r3, #1
 800d19a:	f7fe f919 	bl	800b3d0 <disk_read>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <f_open+0x35a>
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d1aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <f_open+0x368>
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d1b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3760      	adds	r7, #96	@ 0x60
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b08c      	sub	sp, #48	@ 0x30
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f107 0210 	add.w	r2, r7, #16
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7ff fdb7 	bl	800cd58 <validate>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d107      	bne.n	800d208 <f_write+0x44>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	7d5b      	ldrb	r3, [r3, #21]
 800d1fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d204:	2b00      	cmp	r3, #0
 800d206:	d002      	beq.n	800d20e <f_write+0x4a>
 800d208:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d20c:	e14b      	b.n	800d4a6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	7d1b      	ldrb	r3, [r3, #20]
 800d212:	f003 0302 	and.w	r3, r3, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <f_write+0x5a>
 800d21a:	2307      	movs	r3, #7
 800d21c:	e143      	b.n	800d4a6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	699a      	ldr	r2, [r3, #24]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	441a      	add	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	f080 812d 	bcs.w	800d48a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	43db      	mvns	r3, r3
 800d236:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d238:	e127      	b.n	800d48a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d242:	2b00      	cmp	r3, #0
 800d244:	f040 80e3 	bne.w	800d40e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	0a5b      	lsrs	r3, r3, #9
 800d24e:	693a      	ldr	r2, [r7, #16]
 800d250:	8952      	ldrh	r2, [r2, #10]
 800d252:	3a01      	subs	r2, #1
 800d254:	4013      	ands	r3, r2
 800d256:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d143      	bne.n	800d2e6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10c      	bne.n	800d280 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d11a      	bne.n	800d2a8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2100      	movs	r1, #0
 800d276:	4618      	mov	r0, r3
 800d278:	f7fe fe69 	bl	800bf4e <create_chain>
 800d27c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d27e:	e013      	b.n	800d2a8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d284:	2b00      	cmp	r3, #0
 800d286:	d007      	beq.n	800d298 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	4619      	mov	r1, r3
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f7fe fef5 	bl	800c07e <clmt_clust>
 800d294:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d296:	e007      	b.n	800d2a8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	f7fe fe54 	bl	800bf4e <create_chain>
 800d2a6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f000 80f2 	beq.w	800d494 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d104      	bne.n	800d2c0 <f_write+0xfc>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2202      	movs	r2, #2
 800d2ba:	755a      	strb	r2, [r3, #21]
 800d2bc:	2302      	movs	r3, #2
 800d2be:	e0f2      	b.n	800d4a6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c6:	d104      	bne.n	800d2d2 <f_write+0x10e>
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	755a      	strb	r2, [r3, #21]
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e0e9      	b.n	800d4a6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2d6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d102      	bne.n	800d2e6 <f_write+0x122>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2e4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	7d1b      	ldrb	r3, [r3, #20]
 800d2ea:	b25b      	sxtb	r3, r3
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	da18      	bge.n	800d322 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	7858      	ldrb	r0, [r3, #1]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6a1a      	ldr	r2, [r3, #32]
 800d2fe:	2301      	movs	r3, #1
 800d300:	f7fe f886 	bl	800b410 <disk_write>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d004      	beq.n	800d314 <f_write+0x150>
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2201      	movs	r2, #1
 800d30e:	755a      	strb	r2, [r3, #21]
 800d310:	2301      	movs	r3, #1
 800d312:	e0c8      	b.n	800d4a6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	7d1b      	ldrb	r3, [r3, #20]
 800d318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d322:	693a      	ldr	r2, [r7, #16]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	4619      	mov	r1, r3
 800d32a:	4610      	mov	r0, r2
 800d32c:	f7fe fbfa 	bl	800bb24 <clust2sect>
 800d330:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d104      	bne.n	800d342 <f_write+0x17e>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2202      	movs	r2, #2
 800d33c:	755a      	strb	r2, [r3, #21]
 800d33e:	2302      	movs	r3, #2
 800d340:	e0b1      	b.n	800d4a6 <f_write+0x2e2>
			sect += csect;
 800d342:	697a      	ldr	r2, [r7, #20]
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	4413      	add	r3, r2
 800d348:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	0a5b      	lsrs	r3, r3, #9
 800d34e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d350:	6a3b      	ldr	r3, [r7, #32]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d03c      	beq.n	800d3d0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d356:	69ba      	ldr	r2, [r7, #24]
 800d358:	6a3b      	ldr	r3, [r7, #32]
 800d35a:	4413      	add	r3, r2
 800d35c:	693a      	ldr	r2, [r7, #16]
 800d35e:	8952      	ldrh	r2, [r2, #10]
 800d360:	4293      	cmp	r3, r2
 800d362:	d905      	bls.n	800d370 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	895b      	ldrh	r3, [r3, #10]
 800d368:	461a      	mov	r2, r3
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	7858      	ldrb	r0, [r3, #1]
 800d374:	6a3b      	ldr	r3, [r7, #32]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	69f9      	ldr	r1, [r7, #28]
 800d37a:	f7fe f849 	bl	800b410 <disk_write>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d004      	beq.n	800d38e <f_write+0x1ca>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2201      	movs	r2, #1
 800d388:	755a      	strb	r2, [r3, #21]
 800d38a:	2301      	movs	r3, #1
 800d38c:	e08b      	b.n	800d4a6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6a1a      	ldr	r2, [r3, #32]
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	1ad3      	subs	r3, r2, r3
 800d396:	6a3a      	ldr	r2, [r7, #32]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d915      	bls.n	800d3c8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6a1a      	ldr	r2, [r3, #32]
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	025b      	lsls	r3, r3, #9
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f7fe f8eb 	bl	800b590 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	7d1b      	ldrb	r3, [r3, #20]
 800d3be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d3c8:	6a3b      	ldr	r3, [r7, #32]
 800d3ca:	025b      	lsls	r3, r3, #9
 800d3cc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d3ce:	e03f      	b.n	800d450 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6a1b      	ldr	r3, [r3, #32]
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d016      	beq.n	800d408 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	699a      	ldr	r2, [r3, #24]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d210      	bcs.n	800d408 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	7858      	ldrb	r0, [r3, #1]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	f7fd ffec 	bl	800b3d0 <disk_read>
 800d3f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d004      	beq.n	800d408 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2201      	movs	r2, #1
 800d402:	755a      	strb	r2, [r3, #21]
 800d404:	2301      	movs	r3, #1
 800d406:	e04e      	b.n	800d4a6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	699b      	ldr	r3, [r3, #24]
 800d412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d416:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d41a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d41c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	429a      	cmp	r2, r3
 800d422:	d901      	bls.n	800d428 <f_write+0x264>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	699b      	ldr	r3, [r3, #24]
 800d432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d436:	4413      	add	r3, r2
 800d438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d43a:	69f9      	ldr	r1, [r7, #28]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe f8a7 	bl	800b590 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	7d1b      	ldrb	r3, [r3, #20]
 800d446:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d44a:	b2da      	uxtb	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d450:	69fa      	ldr	r2, [r7, #28]
 800d452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d454:	4413      	add	r3, r2
 800d456:	61fb      	str	r3, [r7, #28]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	699a      	ldr	r2, [r3, #24]
 800d45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45e:	441a      	add	r2, r3
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	619a      	str	r2, [r3, #24]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	68da      	ldr	r2, [r3, #12]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	bf38      	it	cc
 800d470:	461a      	movcc	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	60da      	str	r2, [r3, #12]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d47c:	441a      	add	r2, r3
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	601a      	str	r2, [r3, #0]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f47f aed4 	bne.w	800d23a <f_write+0x76>
 800d492:	e000      	b.n	800d496 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d494:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	7d1b      	ldrb	r3, [r3, #20]
 800d49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3730      	adds	r7, #48	@ 0x30
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b086      	sub	sp, #24
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f107 0208 	add.w	r2, r7, #8
 800d4bc:	4611      	mov	r1, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fc4a 	bl	800cd58 <validate>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d4c8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d168      	bne.n	800d5a0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	7d1b      	ldrb	r3, [r3, #20]
 800d4d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d062      	beq.n	800d5a0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7d1b      	ldrb	r3, [r3, #20]
 800d4de:	b25b      	sxtb	r3, r3
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	da15      	bge.n	800d510 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	7858      	ldrb	r0, [r3, #1]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a1a      	ldr	r2, [r3, #32]
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	f7fd ff8c 	bl	800b410 <disk_write>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <f_sync+0x54>
 800d4fe:	2301      	movs	r3, #1
 800d500:	e04f      	b.n	800d5a2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	7d1b      	ldrb	r3, [r3, #20]
 800d506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d510:	f7fa fd30 	bl	8007f74 <get_fattime>
 800d514:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d51c:	4619      	mov	r1, r3
 800d51e:	4610      	mov	r0, r2
 800d520:	f7fe fa64 	bl	800b9ec <move_window>
 800d524:	4603      	mov	r3, r0
 800d526:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d528:	7dfb      	ldrb	r3, [r7, #23]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d138      	bne.n	800d5a0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d532:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	330b      	adds	r3, #11
 800d538:	781a      	ldrb	r2, [r3, #0]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	330b      	adds	r3, #11
 800d53e:	f042 0220 	orr.w	r2, r2, #32
 800d542:	b2d2      	uxtb	r2, r2
 800d544:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6818      	ldr	r0, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	689b      	ldr	r3, [r3, #8]
 800d54e:	461a      	mov	r2, r3
 800d550:	68f9      	ldr	r1, [r7, #12]
 800d552:	f7fe ff6e 	bl	800c432 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f103 021c 	add.w	r2, r3, #28
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	4619      	mov	r1, r3
 800d562:	4610      	mov	r0, r2
 800d564:	f7fd ffe8 	bl	800b538 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	3316      	adds	r3, #22
 800d56c:	6939      	ldr	r1, [r7, #16]
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fd ffe2 	bl	800b538 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	3312      	adds	r3, #18
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fd ffc1 	bl	800b502 <st_word>
					fs->wflag = 1;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	2201      	movs	r2, #1
 800d584:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fe fa5d 	bl	800ba48 <sync_fs>
 800d58e:	4603      	mov	r3, r0
 800d590:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	7d1b      	ldrb	r3, [r3, #20]
 800d596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d59a:	b2da      	uxtb	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7ff ff7b 	bl	800d4ae <f_sync>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d118      	bne.n	800d5f4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f107 0208 	add.w	r2, r7, #8
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7ff fbc4 	bl	800cd58 <validate>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d5d4:	7bfb      	ldrb	r3, [r7, #15]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10c      	bne.n	800d5f4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fe f960 	bl	800b8a4 <dec_lock>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d5e8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d102      	bne.n	800d5f4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b090      	sub	sp, #64	@ 0x40
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f107 0208 	add.w	r2, r7, #8
 800d60e:	4611      	mov	r1, r2
 800d610:	4618      	mov	r0, r3
 800d612:	f7ff fba1 	bl	800cd58 <validate>
 800d616:	4603      	mov	r3, r0
 800d618:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d61c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d620:	2b00      	cmp	r3, #0
 800d622:	d103      	bne.n	800d62c <f_lseek+0x2e>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7d5b      	ldrb	r3, [r3, #21]
 800d628:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d62c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <f_lseek+0x3c>
 800d634:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d638:	e1e6      	b.n	800da08 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 80d1 	beq.w	800d7e6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64a:	d15a      	bne.n	800d702 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d650:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d654:	1d1a      	adds	r2, r3, #4
 800d656:	627a      	str	r2, [r7, #36]	@ 0x24
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	617b      	str	r3, [r7, #20]
 800d65c:	2302      	movs	r3, #2
 800d65e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d03a      	beq.n	800d6e2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66e:	613b      	str	r3, [r7, #16]
 800d670:	2300      	movs	r3, #0
 800d672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d676:	3302      	adds	r3, #2
 800d678:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d680:	3301      	adds	r3, #1
 800d682:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d688:	4618      	mov	r0, r3
 800d68a:	f7fe fa6a 	bl	800bb62 <get_fat>
 800d68e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d692:	2b01      	cmp	r3, #1
 800d694:	d804      	bhi.n	800d6a0 <f_lseek+0xa2>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2202      	movs	r2, #2
 800d69a:	755a      	strb	r2, [r3, #21]
 800d69c:	2302      	movs	r3, #2
 800d69e:	e1b3      	b.n	800da08 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a6:	d104      	bne.n	800d6b2 <f_lseek+0xb4>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	755a      	strb	r2, [r3, #21]
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e1aa      	b.n	800da08 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d0de      	beq.n	800d67a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d6bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d809      	bhi.n	800d6d8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	1d1a      	adds	r2, r3, #4
 800d6c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800d6ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d0:	1d1a      	adds	r2, r3, #4
 800d6d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d6d4:	693a      	ldr	r2, [r7, #16]
 800d6d6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d3c4      	bcc.n	800d66c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d6ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d803      	bhi.n	800d6fa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	e184      	b.n	800da04 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d6fa:	2311      	movs	r3, #17
 800d6fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d700:	e180      	b.n	800da04 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	683a      	ldr	r2, [r7, #0]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d902      	bls.n	800d712 <f_lseek+0x114>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f000 8172 	beq.w	800da04 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	3b01      	subs	r3, #1
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7fe fca9 	bl	800c07e <clmt_clust>
 800d72c:	4602      	mov	r2, r0
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	69db      	ldr	r3, [r3, #28]
 800d738:	4619      	mov	r1, r3
 800d73a:	4610      	mov	r0, r2
 800d73c:	f7fe f9f2 	bl	800bb24 <clust2sect>
 800d740:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d104      	bne.n	800d752 <f_lseek+0x154>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2202      	movs	r2, #2
 800d74c:	755a      	strb	r2, [r3, #21]
 800d74e:	2302      	movs	r3, #2
 800d750:	e15a      	b.n	800da08 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	3b01      	subs	r3, #1
 800d756:	0a5b      	lsrs	r3, r3, #9
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	8952      	ldrh	r2, [r2, #10]
 800d75c:	3a01      	subs	r2, #1
 800d75e:	4013      	ands	r3, r2
 800d760:	69ba      	ldr	r2, [r7, #24]
 800d762:	4413      	add	r3, r2
 800d764:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 8148 	beq.w	800da04 <f_lseek+0x406>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a1b      	ldr	r3, [r3, #32]
 800d778:	69ba      	ldr	r2, [r7, #24]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	f000 8142 	beq.w	800da04 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	7d1b      	ldrb	r3, [r3, #20]
 800d784:	b25b      	sxtb	r3, r3
 800d786:	2b00      	cmp	r3, #0
 800d788:	da18      	bge.n	800d7bc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	7858      	ldrb	r0, [r3, #1]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a1a      	ldr	r2, [r3, #32]
 800d798:	2301      	movs	r3, #1
 800d79a:	f7fd fe39 	bl	800b410 <disk_write>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d004      	beq.n	800d7ae <f_lseek+0x1b0>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	755a      	strb	r2, [r3, #21]
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e12c      	b.n	800da08 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7d1b      	ldrb	r3, [r3, #20]
 800d7b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	7858      	ldrb	r0, [r3, #1]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	69ba      	ldr	r2, [r7, #24]
 800d7ca:	f7fd fe01 	bl	800b3d0 <disk_read>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d004      	beq.n	800d7de <f_lseek+0x1e0>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	755a      	strb	r2, [r3, #21]
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e114      	b.n	800da08 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	69ba      	ldr	r2, [r7, #24]
 800d7e2:	621a      	str	r2, [r3, #32]
 800d7e4:	e10e      	b.n	800da04 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d908      	bls.n	800d802 <f_lseek+0x204>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7d1b      	ldrb	r3, [r3, #20]
 800d7f4:	f003 0302 	and.w	r3, r3, #2
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d102      	bne.n	800d802 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d810:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 80a7 	beq.w	800d968 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	895b      	ldrh	r3, [r3, #10]
 800d81e:	025b      	lsls	r3, r3, #9
 800d820:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d01b      	beq.n	800d860 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	1e5a      	subs	r2, r3, #1
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	fbb2 f2f3 	udiv	r2, r2, r3
 800d832:	6a3b      	ldr	r3, [r7, #32]
 800d834:	1e59      	subs	r1, r3, #1
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d30f      	bcc.n	800d860 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d840:	6a3b      	ldr	r3, [r7, #32]
 800d842:	1e5a      	subs	r2, r3, #1
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	425b      	negs	r3, r3
 800d848:	401a      	ands	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	1ad3      	subs	r3, r2, r3
 800d856:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	69db      	ldr	r3, [r3, #28]
 800d85c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d85e:	e022      	b.n	800d8a6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d119      	bne.n	800d8a0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2100      	movs	r1, #0
 800d870:	4618      	mov	r0, r3
 800d872:	f7fe fb6c 	bl	800bf4e <create_chain>
 800d876:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d104      	bne.n	800d888 <f_lseek+0x28a>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2202      	movs	r2, #2
 800d882:	755a      	strb	r2, [r3, #21]
 800d884:	2302      	movs	r3, #2
 800d886:	e0bf      	b.n	800da08 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d88e:	d104      	bne.n	800d89a <f_lseek+0x29c>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	755a      	strb	r2, [r3, #21]
 800d896:	2301      	movs	r3, #1
 800d898:	e0b6      	b.n	800da08 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d89e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d8a4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d05d      	beq.n	800d968 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d8ac:	e03a      	b.n	800d924 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	603b      	str	r3, [r7, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	699a      	ldr	r2, [r3, #24]
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	441a      	add	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	7d1b      	ldrb	r3, [r3, #20]
 800d8c6:	f003 0302 	and.w	r3, r3, #2
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00b      	beq.n	800d8e6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fe fb3b 	bl	800bf4e <create_chain>
 800d8d8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d108      	bne.n	800d8f2 <f_lseek+0x2f4>
							ofs = 0; break;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	603b      	str	r3, [r7, #0]
 800d8e4:	e022      	b.n	800d92c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fe f939 	bl	800bb62 <get_fat>
 800d8f0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f8:	d104      	bne.n	800d904 <f_lseek+0x306>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	755a      	strb	r2, [r3, #21]
 800d900:	2301      	movs	r3, #1
 800d902:	e081      	b.n	800da08 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d906:	2b01      	cmp	r3, #1
 800d908:	d904      	bls.n	800d914 <f_lseek+0x316>
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d910:	429a      	cmp	r2, r3
 800d912:	d304      	bcc.n	800d91e <f_lseek+0x320>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2202      	movs	r2, #2
 800d918:	755a      	strb	r2, [r3, #21]
 800d91a:	2302      	movs	r3, #2
 800d91c:	e074      	b.n	800da08 <f_lseek+0x40a>
					fp->clust = clst;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d922:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d8c0      	bhi.n	800d8ae <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	699a      	ldr	r2, [r3, #24]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	441a      	add	r2, r3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d012      	beq.n	800d968 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe f8ec 	bl	800bb24 <clust2sect>
 800d94c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d950:	2b00      	cmp	r3, #0
 800d952:	d104      	bne.n	800d95e <f_lseek+0x360>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2202      	movs	r2, #2
 800d958:	755a      	strb	r2, [r3, #21]
 800d95a:	2302      	movs	r3, #2
 800d95c:	e054      	b.n	800da08 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	0a5b      	lsrs	r3, r3, #9
 800d962:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d964:	4413      	add	r3, r2
 800d966:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	699a      	ldr	r2, [r3, #24]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	429a      	cmp	r2, r3
 800d972:	d90a      	bls.n	800d98a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	699a      	ldr	r2, [r3, #24]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	7d1b      	ldrb	r3, [r3, #20]
 800d980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d984:	b2da      	uxtb	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d992:	2b00      	cmp	r3, #0
 800d994:	d036      	beq.n	800da04 <f_lseek+0x406>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a1b      	ldr	r3, [r3, #32]
 800d99a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d031      	beq.n	800da04 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	7d1b      	ldrb	r3, [r3, #20]
 800d9a4:	b25b      	sxtb	r3, r3
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	da18      	bge.n	800d9dc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	7858      	ldrb	r0, [r3, #1]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a1a      	ldr	r2, [r3, #32]
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f7fd fd29 	bl	800b410 <disk_write>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d004      	beq.n	800d9ce <f_lseek+0x3d0>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	755a      	strb	r2, [r3, #21]
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e01c      	b.n	800da08 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	7d1b      	ldrb	r3, [r3, #20]
 800d9d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	7858      	ldrb	r0, [r3, #1]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9ea:	f7fd fcf1 	bl	800b3d0 <disk_read>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d004      	beq.n	800d9fe <f_lseek+0x400>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	755a      	strb	r2, [r3, #21]
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e004      	b.n	800da08 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da02:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800da04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3740      	adds	r7, #64	@ 0x40
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da10:	b480      	push	{r7}
 800da12:	b087      	sub	sp, #28
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	4613      	mov	r3, r2
 800da1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da1e:	2301      	movs	r3, #1
 800da20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800da26:	4b1f      	ldr	r3, [pc, #124]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da28:	7a5b      	ldrb	r3, [r3, #9]
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d131      	bne.n	800da94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da30:	4b1c      	ldr	r3, [pc, #112]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da32:	7a5b      	ldrb	r3, [r3, #9]
 800da34:	b2db      	uxtb	r3, r3
 800da36:	461a      	mov	r2, r3
 800da38:	4b1a      	ldr	r3, [pc, #104]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da3a:	2100      	movs	r1, #0
 800da3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800da3e:	4b19      	ldr	r3, [pc, #100]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da40:	7a5b      	ldrb	r3, [r3, #9]
 800da42:	b2db      	uxtb	r3, r3
 800da44:	4a17      	ldr	r2, [pc, #92]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4413      	add	r3, r2
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800da4e:	4b15      	ldr	r3, [pc, #84]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da50:	7a5b      	ldrb	r3, [r3, #9]
 800da52:	b2db      	uxtb	r3, r3
 800da54:	461a      	mov	r2, r3
 800da56:	4b13      	ldr	r3, [pc, #76]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da58:	4413      	add	r3, r2
 800da5a:	79fa      	ldrb	r2, [r7, #7]
 800da5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da5e:	4b11      	ldr	r3, [pc, #68]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da60:	7a5b      	ldrb	r3, [r3, #9]
 800da62:	b2db      	uxtb	r3, r3
 800da64:	1c5a      	adds	r2, r3, #1
 800da66:	b2d1      	uxtb	r1, r2
 800da68:	4a0e      	ldr	r2, [pc, #56]	@ (800daa4 <FATFS_LinkDriverEx+0x94>)
 800da6a:	7251      	strb	r1, [r2, #9]
 800da6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da6e:	7dbb      	ldrb	r3, [r7, #22]
 800da70:	3330      	adds	r3, #48	@ 0x30
 800da72:	b2da      	uxtb	r2, r3
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	3301      	adds	r3, #1
 800da7c:	223a      	movs	r2, #58	@ 0x3a
 800da7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	3302      	adds	r3, #2
 800da84:	222f      	movs	r2, #47	@ 0x2f
 800da86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	3303      	adds	r3, #3
 800da8c:	2200      	movs	r2, #0
 800da8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da90:	2300      	movs	r3, #0
 800da92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da94:	7dfb      	ldrb	r3, [r7, #23]
}
 800da96:	4618      	mov	r0, r3
 800da98:	371c      	adds	r7, #28
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	200005dc 	.word	0x200005dc

0800daa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dab2:	2200      	movs	r2, #0
 800dab4:	6839      	ldr	r1, [r7, #0]
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7ff ffaa 	bl	800da10 <FATFS_LinkDriverEx>
 800dabc:	4603      	mov	r3, r0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
	...

0800dac8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dacc:	2201      	movs	r2, #1
 800dace:	490e      	ldr	r1, [pc, #56]	@ (800db08 <MX_USB_HOST_Init+0x40>)
 800dad0:	480e      	ldr	r0, [pc, #56]	@ (800db0c <MX_USB_HOST_Init+0x44>)
 800dad2:	f7fb ff58 	bl	8009986 <USBH_Init>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dadc:	f7f3 fe48 	bl	8001770 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dae0:	490b      	ldr	r1, [pc, #44]	@ (800db10 <MX_USB_HOST_Init+0x48>)
 800dae2:	480a      	ldr	r0, [pc, #40]	@ (800db0c <MX_USB_HOST_Init+0x44>)
 800dae4:	f7fb fffc 	bl	8009ae0 <USBH_RegisterClass>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800daee:	f7f3 fe3f 	bl	8001770 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800daf2:	4806      	ldr	r0, [pc, #24]	@ (800db0c <MX_USB_HOST_Init+0x44>)
 800daf4:	f7fc f880 	bl	8009bf8 <USBH_Start>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dafe:	f7f3 fe37 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800db02:	bf00      	nop
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	0800db29 	.word	0x0800db29
 800db0c:	200005e8 	.word	0x200005e8
 800db10:	20000010 	.word	0x20000010

0800db14 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800db18:	4802      	ldr	r0, [pc, #8]	@ (800db24 <MX_USB_HOST_Process+0x10>)
 800db1a:	f7fc f87d 	bl	8009c18 <USBH_Process>
}
 800db1e:	bf00      	nop
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	200005e8 	.word	0x200005e8

0800db28 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800db34:	78fb      	ldrb	r3, [r7, #3]
 800db36:	3b01      	subs	r3, #1
 800db38:	2b04      	cmp	r3, #4
 800db3a:	d81d      	bhi.n	800db78 <USBH_UserProcess+0x50>
 800db3c:	a201      	add	r2, pc, #4	@ (adr r2, 800db44 <USBH_UserProcess+0x1c>)
 800db3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db42:	bf00      	nop
 800db44:	0800db79 	.word	0x0800db79
 800db48:	0800db65 	.word	0x0800db65
 800db4c:	0800db79 	.word	0x0800db79
 800db50:	0800db71 	.word	0x0800db71
 800db54:	0800db59 	.word	0x0800db59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800db58:	4b0a      	ldr	r3, [pc, #40]	@ (800db84 <USBH_UserProcess+0x5c>)
 800db5a:	2203      	movs	r2, #3
 800db5c:	701a      	strb	r2, [r3, #0]
  onHostUserDisconnectionCallback();
 800db5e:	f7f3 fa57 	bl	8001010 <onHostUserDisconnectionCallback>
  break;
 800db62:	e00a      	b.n	800db7a <USBH_UserProcess+0x52>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800db64:	4b07      	ldr	r3, [pc, #28]	@ (800db84 <USBH_UserProcess+0x5c>)
 800db66:	2202      	movs	r2, #2
 800db68:	701a      	strb	r2, [r3, #0]
  onHostUserClassActiveCallback();
 800db6a:	f7f3 fa3b 	bl	8000fe4 <onHostUserClassActiveCallback>
  break;
 800db6e:	e004      	b.n	800db7a <USBH_UserProcess+0x52>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800db70:	4b04      	ldr	r3, [pc, #16]	@ (800db84 <USBH_UserProcess+0x5c>)
 800db72:	2201      	movs	r2, #1
 800db74:	701a      	strb	r2, [r3, #0]
  break;
 800db76:	e000      	b.n	800db7a <USBH_UserProcess+0x52>

  default:
  break;
 800db78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800db7a:	bf00      	nop
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	200009c0 	.word	0x200009c0

0800db88 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b08a      	sub	sp, #40	@ 0x28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db90:	f107 0314 	add.w	r3, r7, #20
 800db94:	2200      	movs	r2, #0
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	605a      	str	r2, [r3, #4]
 800db9a:	609a      	str	r2, [r3, #8]
 800db9c:	60da      	str	r2, [r3, #12]
 800db9e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dba8:	d147      	bne.n	800dc3a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbaa:	2300      	movs	r3, #0
 800dbac:	613b      	str	r3, [r7, #16]
 800dbae:	4b25      	ldr	r3, [pc, #148]	@ (800dc44 <HAL_HCD_MspInit+0xbc>)
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbb2:	4a24      	ldr	r2, [pc, #144]	@ (800dc44 <HAL_HCD_MspInit+0xbc>)
 800dbb4:	f043 0301 	orr.w	r3, r3, #1
 800dbb8:	6313      	str	r3, [r2, #48]	@ 0x30
 800dbba:	4b22      	ldr	r3, [pc, #136]	@ (800dc44 <HAL_HCD_MspInit+0xbc>)
 800dbbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbbe:	f003 0301 	and.w	r3, r3, #1
 800dbc2:	613b      	str	r3, [r7, #16]
 800dbc4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800dbc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dbca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800dbd4:	f107 0314 	add.w	r3, r7, #20
 800dbd8:	4619      	mov	r1, r3
 800dbda:	481b      	ldr	r0, [pc, #108]	@ (800dc48 <HAL_HCD_MspInit+0xc0>)
 800dbdc:	f7f4 fb1e 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800dbe0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800dbe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbe6:	2302      	movs	r3, #2
 800dbe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbea:	2300      	movs	r3, #0
 800dbec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dbf2:	230a      	movs	r3, #10
 800dbf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbf6:	f107 0314 	add.w	r3, r7, #20
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	4812      	ldr	r0, [pc, #72]	@ (800dc48 <HAL_HCD_MspInit+0xc0>)
 800dbfe:	f7f4 fb0d 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc02:	4b10      	ldr	r3, [pc, #64]	@ (800dc44 <HAL_HCD_MspInit+0xbc>)
 800dc04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc06:	4a0f      	ldr	r2, [pc, #60]	@ (800dc44 <HAL_HCD_MspInit+0xbc>)
 800dc08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc0c:	6353      	str	r3, [r2, #52]	@ 0x34
 800dc0e:	2300      	movs	r3, #0
 800dc10:	60fb      	str	r3, [r7, #12]
 800dc12:	4b0c      	ldr	r3, [pc, #48]	@ (800dc44 <HAL_HCD_MspInit+0xbc>)
 800dc14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc16:	4a0b      	ldr	r2, [pc, #44]	@ (800dc44 <HAL_HCD_MspInit+0xbc>)
 800dc18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dc1c:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc1e:	4b09      	ldr	r3, [pc, #36]	@ (800dc44 <HAL_HCD_MspInit+0xbc>)
 800dc20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	2043      	movs	r0, #67	@ 0x43
 800dc30:	f7f4 fabd 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dc34:	2043      	movs	r0, #67	@ 0x43
 800dc36:	f7f4 fad6 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dc3a:	bf00      	nop
 800dc3c:	3728      	adds	r7, #40	@ 0x28
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	40023800 	.word	0x40023800
 800dc48:	40020000 	.word	0x40020000

0800dc4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fc fbb3 	bl	800a3c6 <USBH_LL_IncTimer>
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fc fbeb 	bl	800a452 <USBH_LL_Connect>
}
 800dc7c:	bf00      	nop
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fc fbf4 	bl	800a480 <USBH_LL_Disconnect>
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	70fb      	strb	r3, [r7, #3]
 800dcac:	4613      	mov	r3, r2
 800dcae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fc fba5 	bl	800a41a <USBH_LL_PortEnabled>
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fc fba5 	bl	800a436 <USBH_LL_PortDisabled>
}
 800dcec:	bf00      	nop
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d12a      	bne.n	800dd5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dd06:	4a18      	ldr	r2, [pc, #96]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4a15      	ldr	r2, [pc, #84]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd12:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd16:	4b14      	ldr	r3, [pc, #80]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dd1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800dd1e:	4b12      	ldr	r3, [pc, #72]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd20:	2208      	movs	r2, #8
 800dd22:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800dd24:	4b10      	ldr	r3, [pc, #64]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dd2a:	4b0f      	ldr	r3, [pc, #60]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dd30:	4b0d      	ldr	r3, [pc, #52]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd32:	2202      	movs	r2, #2
 800dd34:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dd36:	4b0c      	ldr	r3, [pc, #48]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dd3c:	480a      	ldr	r0, [pc, #40]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd3e:	f7f4 fc0a 	bl	8002556 <HAL_HCD_Init>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800dd48:	f7f3 fd12 	bl	8001770 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dd4c:	4806      	ldr	r0, [pc, #24]	@ (800dd68 <USBH_LL_Init+0x74>)
 800dd4e:	f7f5 f86b 	bl	8002e28 <HAL_HCD_GetCurrentFrame>
 800dd52:	4603      	mov	r3, r0
 800dd54:	4619      	mov	r1, r3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7fc fb26 	bl	800a3a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	200009c4 	.word	0x200009c4

0800dd6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7f4 ffd8 	bl	8002d38 <HAL_HCD_Start>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 f992 	bl	800e0b8 <USBH_Get_USB_Status>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7f4 ffe0 	bl	8002d7e <HAL_HCD_Stop>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddc2:	7bfb      	ldrb	r3, [r7, #15]
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f000 f977 	bl	800e0b8 <USBH_Get_USB_Status>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dde0:	2301      	movs	r3, #1
 800dde2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f5 f82a 	bl	8002e44 <HAL_HCD_GetCurrentSpeed>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d00c      	beq.n	800de10 <USBH_LL_GetSpeed+0x38>
 800ddf6:	2b02      	cmp	r3, #2
 800ddf8:	d80d      	bhi.n	800de16 <USBH_LL_GetSpeed+0x3e>
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d002      	beq.n	800de04 <USBH_LL_GetSpeed+0x2c>
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d003      	beq.n	800de0a <USBH_LL_GetSpeed+0x32>
 800de02:	e008      	b.n	800de16 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800de04:	2300      	movs	r3, #0
 800de06:	73fb      	strb	r3, [r7, #15]
    break;
 800de08:	e008      	b.n	800de1c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800de0a:	2301      	movs	r3, #1
 800de0c:	73fb      	strb	r3, [r7, #15]
    break;
 800de0e:	e005      	b.n	800de1c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800de10:	2302      	movs	r3, #2
 800de12:	73fb      	strb	r3, [r7, #15]
    break;
 800de14:	e002      	b.n	800de1c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800de16:	2301      	movs	r3, #1
 800de18:	73fb      	strb	r3, [r7, #15]
    break;
 800de1a:	bf00      	nop
  }
  return  speed;
 800de1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7f4 ffbb 	bl	8002db8 <HAL_HCD_ResetPort>
 800de42:	4603      	mov	r3, r0
 800de44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de46:	7bfb      	ldrb	r3, [r7, #15]
 800de48:	4618      	mov	r0, r3
 800de4a:	f000 f935 	bl	800e0b8 <USBH_Get_USB_Status>
 800de4e:	4603      	mov	r3, r0
 800de50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de52:	7bbb      	ldrb	r3, [r7, #14]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de6e:	78fa      	ldrb	r2, [r7, #3]
 800de70:	4611      	mov	r1, r2
 800de72:	4618      	mov	r0, r3
 800de74:	f7f4 ffc3 	bl	8002dfe <HAL_HCD_HC_GetXferCount>
 800de78:	4603      	mov	r3, r0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800de82:	b590      	push	{r4, r7, lr}
 800de84:	b089      	sub	sp, #36	@ 0x24
 800de86:	af04      	add	r7, sp, #16
 800de88:	6078      	str	r0, [r7, #4]
 800de8a:	4608      	mov	r0, r1
 800de8c:	4611      	mov	r1, r2
 800de8e:	461a      	mov	r2, r3
 800de90:	4603      	mov	r3, r0
 800de92:	70fb      	strb	r3, [r7, #3]
 800de94:	460b      	mov	r3, r1
 800de96:	70bb      	strb	r3, [r7, #2]
 800de98:	4613      	mov	r3, r2
 800de9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800deaa:	787c      	ldrb	r4, [r7, #1]
 800deac:	78ba      	ldrb	r2, [r7, #2]
 800deae:	78f9      	ldrb	r1, [r7, #3]
 800deb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800deb2:	9302      	str	r3, [sp, #8]
 800deb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	4623      	mov	r3, r4
 800dec2:	f7f4 fbaf 	bl	8002624 <HAL_HCD_HC_Init>
 800dec6:	4603      	mov	r3, r0
 800dec8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	4618      	mov	r0, r3
 800dece:	f000 f8f3 	bl	800e0b8 <USBH_Get_USB_Status>
 800ded2:	4603      	mov	r3, r0
 800ded4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd90      	pop	{r4, r7, pc}

0800dee0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	460b      	mov	r3, r1
 800deea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deec:	2300      	movs	r3, #0
 800deee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800defa:	78fa      	ldrb	r2, [r7, #3]
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f7f4 fc48 	bl	8002794 <HAL_HCD_HC_Halt>
 800df04:	4603      	mov	r3, r0
 800df06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df08:	7bfb      	ldrb	r3, [r7, #15]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 f8d4 	bl	800e0b8 <USBH_Get_USB_Status>
 800df10:	4603      	mov	r3, r0
 800df12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df14:	7bbb      	ldrb	r3, [r7, #14]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800df1e:	b590      	push	{r4, r7, lr}
 800df20:	b089      	sub	sp, #36	@ 0x24
 800df22:	af04      	add	r7, sp, #16
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	4608      	mov	r0, r1
 800df28:	4611      	mov	r1, r2
 800df2a:	461a      	mov	r2, r3
 800df2c:	4603      	mov	r3, r0
 800df2e:	70fb      	strb	r3, [r7, #3]
 800df30:	460b      	mov	r3, r1
 800df32:	70bb      	strb	r3, [r7, #2]
 800df34:	4613      	mov	r3, r2
 800df36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df38:	2300      	movs	r3, #0
 800df3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800df46:	787c      	ldrb	r4, [r7, #1]
 800df48:	78ba      	ldrb	r2, [r7, #2]
 800df4a:	78f9      	ldrb	r1, [r7, #3]
 800df4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800df50:	9303      	str	r3, [sp, #12]
 800df52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800df54:	9302      	str	r3, [sp, #8]
 800df56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	4623      	mov	r3, r4
 800df62:	f7f4 fc3b 	bl	80027dc <HAL_HCD_HC_SubmitRequest>
 800df66:	4603      	mov	r3, r0
 800df68:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 f8a3 	bl	800e0b8 <USBH_Get_USB_Status>
 800df72:	4603      	mov	r3, r0
 800df74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df76:	7bbb      	ldrb	r3, [r7, #14]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd90      	pop	{r4, r7, pc}

0800df80 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800df92:	78fa      	ldrb	r2, [r7, #3]
 800df94:	4611      	mov	r1, r2
 800df96:	4618      	mov	r0, r3
 800df98:	f7f4 ff1c 	bl	8002dd4 <HAL_HCD_HC_GetURBState>
 800df9c:	4603      	mov	r3, r0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b082      	sub	sp, #8
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	460b      	mov	r3, r1
 800dfb0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d103      	bne.n	800dfc4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800dfbc:	78fb      	ldrb	r3, [r7, #3]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 f8a6 	bl	800e110 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dfc4:	20c8      	movs	r0, #200	@ 0xc8
 800dfc6:	f7f3 fff3 	bl	8001fb0 <HAL_Delay>
  return USBH_OK;
 800dfca:	2300      	movs	r3, #0
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3708      	adds	r7, #8
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	70fb      	strb	r3, [r7, #3]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dfea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dfec:	78fa      	ldrb	r2, [r7, #3]
 800dfee:	68f9      	ldr	r1, [r7, #12]
 800dff0:	4613      	mov	r3, r2
 800dff2:	011b      	lsls	r3, r3, #4
 800dff4:	1a9b      	subs	r3, r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	440b      	add	r3, r1
 800dffa:	3317      	adds	r3, #23
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00a      	beq.n	800e018 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e002:	78fa      	ldrb	r2, [r7, #3]
 800e004:	68f9      	ldr	r1, [r7, #12]
 800e006:	4613      	mov	r3, r2
 800e008:	011b      	lsls	r3, r3, #4
 800e00a:	1a9b      	subs	r3, r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	440b      	add	r3, r1
 800e010:	333c      	adds	r3, #60	@ 0x3c
 800e012:	78ba      	ldrb	r2, [r7, #2]
 800e014:	701a      	strb	r2, [r3, #0]
 800e016:	e009      	b.n	800e02c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e018:	78fa      	ldrb	r2, [r7, #3]
 800e01a:	68f9      	ldr	r1, [r7, #12]
 800e01c:	4613      	mov	r3, r2
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	1a9b      	subs	r3, r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	440b      	add	r3, r1
 800e026:	333d      	adds	r3, #61	@ 0x3d
 800e028:	78ba      	ldrb	r2, [r7, #2]
 800e02a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3714      	adds	r7, #20
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr

0800e03a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e03a:	b480      	push	{r7}
 800e03c:	b085      	sub	sp, #20
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
 800e042:	460b      	mov	r3, r1
 800e044:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e046:	2300      	movs	r3, #0
 800e048:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e050:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e052:	78fa      	ldrb	r2, [r7, #3]
 800e054:	68b9      	ldr	r1, [r7, #8]
 800e056:	4613      	mov	r3, r2
 800e058:	011b      	lsls	r3, r3, #4
 800e05a:	1a9b      	subs	r3, r3, r2
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	440b      	add	r3, r1
 800e060:	3317      	adds	r3, #23
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d00a      	beq.n	800e07e <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e068:	78fa      	ldrb	r2, [r7, #3]
 800e06a:	68b9      	ldr	r1, [r7, #8]
 800e06c:	4613      	mov	r3, r2
 800e06e:	011b      	lsls	r3, r3, #4
 800e070:	1a9b      	subs	r3, r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	440b      	add	r3, r1
 800e076:	333c      	adds	r3, #60	@ 0x3c
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	73fb      	strb	r3, [r7, #15]
 800e07c:	e009      	b.n	800e092 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e07e:	78fa      	ldrb	r2, [r7, #3]
 800e080:	68b9      	ldr	r1, [r7, #8]
 800e082:	4613      	mov	r3, r2
 800e084:	011b      	lsls	r3, r3, #4
 800e086:	1a9b      	subs	r3, r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	440b      	add	r3, r1
 800e08c:	333d      	adds	r3, #61	@ 0x3d
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e092:	7bfb      	ldrb	r3, [r7, #15]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7f3 ff81 	bl	8001fb0 <HAL_Delay>
}
 800e0ae:	bf00      	nop
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
	...

0800e0b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	4603      	mov	r3, r0
 800e0c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e0c6:	79fb      	ldrb	r3, [r7, #7]
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d817      	bhi.n	800e0fc <USBH_Get_USB_Status+0x44>
 800e0cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e0d4 <USBH_Get_USB_Status+0x1c>)
 800e0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d2:	bf00      	nop
 800e0d4:	0800e0e5 	.word	0x0800e0e5
 800e0d8:	0800e0eb 	.word	0x0800e0eb
 800e0dc:	0800e0f1 	.word	0x0800e0f1
 800e0e0:	0800e0f7 	.word	0x0800e0f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e8:	e00b      	b.n	800e102 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e0ea:	2302      	movs	r3, #2
 800e0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ee:	e008      	b.n	800e102 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0f4:	e005      	b.n	800e102 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e0fa:	e002      	b.n	800e102 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e100:	bf00      	nop
  }
  return usb_status;
 800e102:	7bfb      	ldrb	r3, [r7, #15]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e11a:	79fb      	ldrb	r3, [r7, #7]
 800e11c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e11e:	79fb      	ldrb	r3, [r7, #7]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d102      	bne.n	800e12a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e124:	2301      	movs	r3, #1
 800e126:	73fb      	strb	r3, [r7, #15]
 800e128:	e001      	b.n	800e12e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e12a:	2300      	movs	r3, #0
 800e12c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
 800e130:	461a      	mov	r2, r3
 800e132:	2101      	movs	r1, #1
 800e134:	4803      	ldr	r0, [pc, #12]	@ (800e144 <MX_DriverVbusFS+0x34>)
 800e136:	f7f4 f9f5 	bl	8002524 <HAL_GPIO_WritePin>
}
 800e13a:	bf00      	nop
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	40020800 	.word	0x40020800

0800e148 <malloc>:
 800e148:	4b02      	ldr	r3, [pc, #8]	@ (800e154 <malloc+0xc>)
 800e14a:	4601      	mov	r1, r0
 800e14c:	6818      	ldr	r0, [r3, #0]
 800e14e:	f000 b82d 	b.w	800e1ac <_malloc_r>
 800e152:	bf00      	nop
 800e154:	2000003c 	.word	0x2000003c

0800e158 <free>:
 800e158:	4b02      	ldr	r3, [pc, #8]	@ (800e164 <free+0xc>)
 800e15a:	4601      	mov	r1, r0
 800e15c:	6818      	ldr	r0, [r3, #0]
 800e15e:	f001 be33 	b.w	800fdc8 <_free_r>
 800e162:	bf00      	nop
 800e164:	2000003c 	.word	0x2000003c

0800e168 <sbrk_aligned>:
 800e168:	b570      	push	{r4, r5, r6, lr}
 800e16a:	4e0f      	ldr	r6, [pc, #60]	@ (800e1a8 <sbrk_aligned+0x40>)
 800e16c:	460c      	mov	r4, r1
 800e16e:	6831      	ldr	r1, [r6, #0]
 800e170:	4605      	mov	r5, r0
 800e172:	b911      	cbnz	r1, 800e17a <sbrk_aligned+0x12>
 800e174:	f000 ff7c 	bl	800f070 <_sbrk_r>
 800e178:	6030      	str	r0, [r6, #0]
 800e17a:	4621      	mov	r1, r4
 800e17c:	4628      	mov	r0, r5
 800e17e:	f000 ff77 	bl	800f070 <_sbrk_r>
 800e182:	1c43      	adds	r3, r0, #1
 800e184:	d103      	bne.n	800e18e <sbrk_aligned+0x26>
 800e186:	f04f 34ff 	mov.w	r4, #4294967295
 800e18a:	4620      	mov	r0, r4
 800e18c:	bd70      	pop	{r4, r5, r6, pc}
 800e18e:	1cc4      	adds	r4, r0, #3
 800e190:	f024 0403 	bic.w	r4, r4, #3
 800e194:	42a0      	cmp	r0, r4
 800e196:	d0f8      	beq.n	800e18a <sbrk_aligned+0x22>
 800e198:	1a21      	subs	r1, r4, r0
 800e19a:	4628      	mov	r0, r5
 800e19c:	f000 ff68 	bl	800f070 <_sbrk_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d1f2      	bne.n	800e18a <sbrk_aligned+0x22>
 800e1a4:	e7ef      	b.n	800e186 <sbrk_aligned+0x1e>
 800e1a6:	bf00      	nop
 800e1a8:	20000da4 	.word	0x20000da4

0800e1ac <_malloc_r>:
 800e1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b0:	1ccd      	adds	r5, r1, #3
 800e1b2:	f025 0503 	bic.w	r5, r5, #3
 800e1b6:	3508      	adds	r5, #8
 800e1b8:	2d0c      	cmp	r5, #12
 800e1ba:	bf38      	it	cc
 800e1bc:	250c      	movcc	r5, #12
 800e1be:	2d00      	cmp	r5, #0
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	db01      	blt.n	800e1c8 <_malloc_r+0x1c>
 800e1c4:	42a9      	cmp	r1, r5
 800e1c6:	d904      	bls.n	800e1d2 <_malloc_r+0x26>
 800e1c8:	230c      	movs	r3, #12
 800e1ca:	6033      	str	r3, [r6, #0]
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2a8 <_malloc_r+0xfc>
 800e1d6:	f000 f869 	bl	800e2ac <__malloc_lock>
 800e1da:	f8d8 3000 	ldr.w	r3, [r8]
 800e1de:	461c      	mov	r4, r3
 800e1e0:	bb44      	cbnz	r4, 800e234 <_malloc_r+0x88>
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f7ff ffbf 	bl	800e168 <sbrk_aligned>
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	d158      	bne.n	800e2a2 <_malloc_r+0xf6>
 800e1f0:	f8d8 4000 	ldr.w	r4, [r8]
 800e1f4:	4627      	mov	r7, r4
 800e1f6:	2f00      	cmp	r7, #0
 800e1f8:	d143      	bne.n	800e282 <_malloc_r+0xd6>
 800e1fa:	2c00      	cmp	r4, #0
 800e1fc:	d04b      	beq.n	800e296 <_malloc_r+0xea>
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	4639      	mov	r1, r7
 800e202:	4630      	mov	r0, r6
 800e204:	eb04 0903 	add.w	r9, r4, r3
 800e208:	f000 ff32 	bl	800f070 <_sbrk_r>
 800e20c:	4581      	cmp	r9, r0
 800e20e:	d142      	bne.n	800e296 <_malloc_r+0xea>
 800e210:	6821      	ldr	r1, [r4, #0]
 800e212:	1a6d      	subs	r5, r5, r1
 800e214:	4629      	mov	r1, r5
 800e216:	4630      	mov	r0, r6
 800e218:	f7ff ffa6 	bl	800e168 <sbrk_aligned>
 800e21c:	3001      	adds	r0, #1
 800e21e:	d03a      	beq.n	800e296 <_malloc_r+0xea>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	442b      	add	r3, r5
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	f8d8 3000 	ldr.w	r3, [r8]
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	bb62      	cbnz	r2, 800e288 <_malloc_r+0xdc>
 800e22e:	f8c8 7000 	str.w	r7, [r8]
 800e232:	e00f      	b.n	800e254 <_malloc_r+0xa8>
 800e234:	6822      	ldr	r2, [r4, #0]
 800e236:	1b52      	subs	r2, r2, r5
 800e238:	d420      	bmi.n	800e27c <_malloc_r+0xd0>
 800e23a:	2a0b      	cmp	r2, #11
 800e23c:	d917      	bls.n	800e26e <_malloc_r+0xc2>
 800e23e:	1961      	adds	r1, r4, r5
 800e240:	42a3      	cmp	r3, r4
 800e242:	6025      	str	r5, [r4, #0]
 800e244:	bf18      	it	ne
 800e246:	6059      	strne	r1, [r3, #4]
 800e248:	6863      	ldr	r3, [r4, #4]
 800e24a:	bf08      	it	eq
 800e24c:	f8c8 1000 	streq.w	r1, [r8]
 800e250:	5162      	str	r2, [r4, r5]
 800e252:	604b      	str	r3, [r1, #4]
 800e254:	4630      	mov	r0, r6
 800e256:	f000 f82f 	bl	800e2b8 <__malloc_unlock>
 800e25a:	f104 000b 	add.w	r0, r4, #11
 800e25e:	1d23      	adds	r3, r4, #4
 800e260:	f020 0007 	bic.w	r0, r0, #7
 800e264:	1ac2      	subs	r2, r0, r3
 800e266:	bf1c      	itt	ne
 800e268:	1a1b      	subne	r3, r3, r0
 800e26a:	50a3      	strne	r3, [r4, r2]
 800e26c:	e7af      	b.n	800e1ce <_malloc_r+0x22>
 800e26e:	6862      	ldr	r2, [r4, #4]
 800e270:	42a3      	cmp	r3, r4
 800e272:	bf0c      	ite	eq
 800e274:	f8c8 2000 	streq.w	r2, [r8]
 800e278:	605a      	strne	r2, [r3, #4]
 800e27a:	e7eb      	b.n	800e254 <_malloc_r+0xa8>
 800e27c:	4623      	mov	r3, r4
 800e27e:	6864      	ldr	r4, [r4, #4]
 800e280:	e7ae      	b.n	800e1e0 <_malloc_r+0x34>
 800e282:	463c      	mov	r4, r7
 800e284:	687f      	ldr	r7, [r7, #4]
 800e286:	e7b6      	b.n	800e1f6 <_malloc_r+0x4a>
 800e288:	461a      	mov	r2, r3
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	d1fb      	bne.n	800e288 <_malloc_r+0xdc>
 800e290:	2300      	movs	r3, #0
 800e292:	6053      	str	r3, [r2, #4]
 800e294:	e7de      	b.n	800e254 <_malloc_r+0xa8>
 800e296:	230c      	movs	r3, #12
 800e298:	6033      	str	r3, [r6, #0]
 800e29a:	4630      	mov	r0, r6
 800e29c:	f000 f80c 	bl	800e2b8 <__malloc_unlock>
 800e2a0:	e794      	b.n	800e1cc <_malloc_r+0x20>
 800e2a2:	6005      	str	r5, [r0, #0]
 800e2a4:	e7d6      	b.n	800e254 <_malloc_r+0xa8>
 800e2a6:	bf00      	nop
 800e2a8:	20000da8 	.word	0x20000da8

0800e2ac <__malloc_lock>:
 800e2ac:	4801      	ldr	r0, [pc, #4]	@ (800e2b4 <__malloc_lock+0x8>)
 800e2ae:	f000 bf2c 	b.w	800f10a <__retarget_lock_acquire_recursive>
 800e2b2:	bf00      	nop
 800e2b4:	20000eec 	.word	0x20000eec

0800e2b8 <__malloc_unlock>:
 800e2b8:	4801      	ldr	r0, [pc, #4]	@ (800e2c0 <__malloc_unlock+0x8>)
 800e2ba:	f000 bf27 	b.w	800f10c <__retarget_lock_release_recursive>
 800e2be:	bf00      	nop
 800e2c0:	20000eec 	.word	0x20000eec

0800e2c4 <__cvt>:
 800e2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	ec57 6b10 	vmov	r6, r7, d0
 800e2cc:	2f00      	cmp	r7, #0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	463b      	mov	r3, r7
 800e2d4:	bfbb      	ittet	lt
 800e2d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e2da:	461f      	movlt	r7, r3
 800e2dc:	2300      	movge	r3, #0
 800e2de:	232d      	movlt	r3, #45	@ 0x2d
 800e2e0:	700b      	strb	r3, [r1, #0]
 800e2e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e2e8:	4691      	mov	r9, r2
 800e2ea:	f023 0820 	bic.w	r8, r3, #32
 800e2ee:	bfbc      	itt	lt
 800e2f0:	4632      	movlt	r2, r6
 800e2f2:	4616      	movlt	r6, r2
 800e2f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e2f8:	d005      	beq.n	800e306 <__cvt+0x42>
 800e2fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e2fe:	d100      	bne.n	800e302 <__cvt+0x3e>
 800e300:	3401      	adds	r4, #1
 800e302:	2102      	movs	r1, #2
 800e304:	e000      	b.n	800e308 <__cvt+0x44>
 800e306:	2103      	movs	r1, #3
 800e308:	ab03      	add	r3, sp, #12
 800e30a:	9301      	str	r3, [sp, #4]
 800e30c:	ab02      	add	r3, sp, #8
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	ec47 6b10 	vmov	d0, r6, r7
 800e314:	4653      	mov	r3, sl
 800e316:	4622      	mov	r2, r4
 800e318:	f000 ff92 	bl	800f240 <_dtoa_r>
 800e31c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e320:	4605      	mov	r5, r0
 800e322:	d119      	bne.n	800e358 <__cvt+0x94>
 800e324:	f019 0f01 	tst.w	r9, #1
 800e328:	d00e      	beq.n	800e348 <__cvt+0x84>
 800e32a:	eb00 0904 	add.w	r9, r0, r4
 800e32e:	2200      	movs	r2, #0
 800e330:	2300      	movs	r3, #0
 800e332:	4630      	mov	r0, r6
 800e334:	4639      	mov	r1, r7
 800e336:	f7f2 fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800e33a:	b108      	cbz	r0, 800e340 <__cvt+0x7c>
 800e33c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e340:	2230      	movs	r2, #48	@ 0x30
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	454b      	cmp	r3, r9
 800e346:	d31e      	bcc.n	800e386 <__cvt+0xc2>
 800e348:	9b03      	ldr	r3, [sp, #12]
 800e34a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e34c:	1b5b      	subs	r3, r3, r5
 800e34e:	4628      	mov	r0, r5
 800e350:	6013      	str	r3, [r2, #0]
 800e352:	b004      	add	sp, #16
 800e354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e358:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e35c:	eb00 0904 	add.w	r9, r0, r4
 800e360:	d1e5      	bne.n	800e32e <__cvt+0x6a>
 800e362:	7803      	ldrb	r3, [r0, #0]
 800e364:	2b30      	cmp	r3, #48	@ 0x30
 800e366:	d10a      	bne.n	800e37e <__cvt+0xba>
 800e368:	2200      	movs	r2, #0
 800e36a:	2300      	movs	r3, #0
 800e36c:	4630      	mov	r0, r6
 800e36e:	4639      	mov	r1, r7
 800e370:	f7f2 fbb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800e374:	b918      	cbnz	r0, 800e37e <__cvt+0xba>
 800e376:	f1c4 0401 	rsb	r4, r4, #1
 800e37a:	f8ca 4000 	str.w	r4, [sl]
 800e37e:	f8da 3000 	ldr.w	r3, [sl]
 800e382:	4499      	add	r9, r3
 800e384:	e7d3      	b.n	800e32e <__cvt+0x6a>
 800e386:	1c59      	adds	r1, r3, #1
 800e388:	9103      	str	r1, [sp, #12]
 800e38a:	701a      	strb	r2, [r3, #0]
 800e38c:	e7d9      	b.n	800e342 <__cvt+0x7e>

0800e38e <__exponent>:
 800e38e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e390:	2900      	cmp	r1, #0
 800e392:	bfba      	itte	lt
 800e394:	4249      	neglt	r1, r1
 800e396:	232d      	movlt	r3, #45	@ 0x2d
 800e398:	232b      	movge	r3, #43	@ 0x2b
 800e39a:	2909      	cmp	r1, #9
 800e39c:	7002      	strb	r2, [r0, #0]
 800e39e:	7043      	strb	r3, [r0, #1]
 800e3a0:	dd29      	ble.n	800e3f6 <__exponent+0x68>
 800e3a2:	f10d 0307 	add.w	r3, sp, #7
 800e3a6:	461d      	mov	r5, r3
 800e3a8:	270a      	movs	r7, #10
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	fbb1 f6f7 	udiv	r6, r1, r7
 800e3b0:	fb07 1416 	mls	r4, r7, r6, r1
 800e3b4:	3430      	adds	r4, #48	@ 0x30
 800e3b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	2c63      	cmp	r4, #99	@ 0x63
 800e3be:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	dcf1      	bgt.n	800e3aa <__exponent+0x1c>
 800e3c6:	3130      	adds	r1, #48	@ 0x30
 800e3c8:	1e94      	subs	r4, r2, #2
 800e3ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e3ce:	1c41      	adds	r1, r0, #1
 800e3d0:	4623      	mov	r3, r4
 800e3d2:	42ab      	cmp	r3, r5
 800e3d4:	d30a      	bcc.n	800e3ec <__exponent+0x5e>
 800e3d6:	f10d 0309 	add.w	r3, sp, #9
 800e3da:	1a9b      	subs	r3, r3, r2
 800e3dc:	42ac      	cmp	r4, r5
 800e3de:	bf88      	it	hi
 800e3e0:	2300      	movhi	r3, #0
 800e3e2:	3302      	adds	r3, #2
 800e3e4:	4403      	add	r3, r0
 800e3e6:	1a18      	subs	r0, r3, r0
 800e3e8:	b003      	add	sp, #12
 800e3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e3f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e3f4:	e7ed      	b.n	800e3d2 <__exponent+0x44>
 800e3f6:	2330      	movs	r3, #48	@ 0x30
 800e3f8:	3130      	adds	r1, #48	@ 0x30
 800e3fa:	7083      	strb	r3, [r0, #2]
 800e3fc:	70c1      	strb	r1, [r0, #3]
 800e3fe:	1d03      	adds	r3, r0, #4
 800e400:	e7f1      	b.n	800e3e6 <__exponent+0x58>
	...

0800e404 <_printf_float>:
 800e404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e408:	b08d      	sub	sp, #52	@ 0x34
 800e40a:	460c      	mov	r4, r1
 800e40c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e410:	4616      	mov	r6, r2
 800e412:	461f      	mov	r7, r3
 800e414:	4605      	mov	r5, r0
 800e416:	f000 fdf3 	bl	800f000 <_localeconv_r>
 800e41a:	6803      	ldr	r3, [r0, #0]
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f1 ff2e 	bl	8000280 <strlen>
 800e424:	2300      	movs	r3, #0
 800e426:	930a      	str	r3, [sp, #40]	@ 0x28
 800e428:	f8d8 3000 	ldr.w	r3, [r8]
 800e42c:	9005      	str	r0, [sp, #20]
 800e42e:	3307      	adds	r3, #7
 800e430:	f023 0307 	bic.w	r3, r3, #7
 800e434:	f103 0208 	add.w	r2, r3, #8
 800e438:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e43c:	f8d4 b000 	ldr.w	fp, [r4]
 800e440:	f8c8 2000 	str.w	r2, [r8]
 800e444:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e448:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e44c:	9307      	str	r3, [sp, #28]
 800e44e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e452:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e45a:	4b9c      	ldr	r3, [pc, #624]	@ (800e6cc <_printf_float+0x2c8>)
 800e45c:	f04f 32ff 	mov.w	r2, #4294967295
 800e460:	f7f2 fb6c 	bl	8000b3c <__aeabi_dcmpun>
 800e464:	bb70      	cbnz	r0, 800e4c4 <_printf_float+0xc0>
 800e466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e46a:	4b98      	ldr	r3, [pc, #608]	@ (800e6cc <_printf_float+0x2c8>)
 800e46c:	f04f 32ff 	mov.w	r2, #4294967295
 800e470:	f7f2 fb46 	bl	8000b00 <__aeabi_dcmple>
 800e474:	bb30      	cbnz	r0, 800e4c4 <_printf_float+0xc0>
 800e476:	2200      	movs	r2, #0
 800e478:	2300      	movs	r3, #0
 800e47a:	4640      	mov	r0, r8
 800e47c:	4649      	mov	r1, r9
 800e47e:	f7f2 fb35 	bl	8000aec <__aeabi_dcmplt>
 800e482:	b110      	cbz	r0, 800e48a <_printf_float+0x86>
 800e484:	232d      	movs	r3, #45	@ 0x2d
 800e486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e48a:	4a91      	ldr	r2, [pc, #580]	@ (800e6d0 <_printf_float+0x2cc>)
 800e48c:	4b91      	ldr	r3, [pc, #580]	@ (800e6d4 <_printf_float+0x2d0>)
 800e48e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e492:	bf94      	ite	ls
 800e494:	4690      	movls	r8, r2
 800e496:	4698      	movhi	r8, r3
 800e498:	2303      	movs	r3, #3
 800e49a:	6123      	str	r3, [r4, #16]
 800e49c:	f02b 0304 	bic.w	r3, fp, #4
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	f04f 0900 	mov.w	r9, #0
 800e4a6:	9700      	str	r7, [sp, #0]
 800e4a8:	4633      	mov	r3, r6
 800e4aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f000 f9d2 	bl	800e858 <_printf_common>
 800e4b4:	3001      	adds	r0, #1
 800e4b6:	f040 808d 	bne.w	800e5d4 <_printf_float+0x1d0>
 800e4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e4be:	b00d      	add	sp, #52	@ 0x34
 800e4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c4:	4642      	mov	r2, r8
 800e4c6:	464b      	mov	r3, r9
 800e4c8:	4640      	mov	r0, r8
 800e4ca:	4649      	mov	r1, r9
 800e4cc:	f7f2 fb36 	bl	8000b3c <__aeabi_dcmpun>
 800e4d0:	b140      	cbz	r0, 800e4e4 <_printf_float+0xe0>
 800e4d2:	464b      	mov	r3, r9
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	bfbc      	itt	lt
 800e4d8:	232d      	movlt	r3, #45	@ 0x2d
 800e4da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e4de:	4a7e      	ldr	r2, [pc, #504]	@ (800e6d8 <_printf_float+0x2d4>)
 800e4e0:	4b7e      	ldr	r3, [pc, #504]	@ (800e6dc <_printf_float+0x2d8>)
 800e4e2:	e7d4      	b.n	800e48e <_printf_float+0x8a>
 800e4e4:	6863      	ldr	r3, [r4, #4]
 800e4e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e4ea:	9206      	str	r2, [sp, #24]
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	d13b      	bne.n	800e568 <_printf_float+0x164>
 800e4f0:	2306      	movs	r3, #6
 800e4f2:	6063      	str	r3, [r4, #4]
 800e4f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	6022      	str	r2, [r4, #0]
 800e4fc:	9303      	str	r3, [sp, #12]
 800e4fe:	ab0a      	add	r3, sp, #40	@ 0x28
 800e500:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e504:	ab09      	add	r3, sp, #36	@ 0x24
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	6861      	ldr	r1, [r4, #4]
 800e50a:	ec49 8b10 	vmov	d0, r8, r9
 800e50e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e512:	4628      	mov	r0, r5
 800e514:	f7ff fed6 	bl	800e2c4 <__cvt>
 800e518:	9b06      	ldr	r3, [sp, #24]
 800e51a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e51c:	2b47      	cmp	r3, #71	@ 0x47
 800e51e:	4680      	mov	r8, r0
 800e520:	d129      	bne.n	800e576 <_printf_float+0x172>
 800e522:	1cc8      	adds	r0, r1, #3
 800e524:	db02      	blt.n	800e52c <_printf_float+0x128>
 800e526:	6863      	ldr	r3, [r4, #4]
 800e528:	4299      	cmp	r1, r3
 800e52a:	dd41      	ble.n	800e5b0 <_printf_float+0x1ac>
 800e52c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e530:	fa5f fa8a 	uxtb.w	sl, sl
 800e534:	3901      	subs	r1, #1
 800e536:	4652      	mov	r2, sl
 800e538:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e53c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e53e:	f7ff ff26 	bl	800e38e <__exponent>
 800e542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e544:	1813      	adds	r3, r2, r0
 800e546:	2a01      	cmp	r2, #1
 800e548:	4681      	mov	r9, r0
 800e54a:	6123      	str	r3, [r4, #16]
 800e54c:	dc02      	bgt.n	800e554 <_printf_float+0x150>
 800e54e:	6822      	ldr	r2, [r4, #0]
 800e550:	07d2      	lsls	r2, r2, #31
 800e552:	d501      	bpl.n	800e558 <_printf_float+0x154>
 800e554:	3301      	adds	r3, #1
 800e556:	6123      	str	r3, [r4, #16]
 800e558:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d0a2      	beq.n	800e4a6 <_printf_float+0xa2>
 800e560:	232d      	movs	r3, #45	@ 0x2d
 800e562:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e566:	e79e      	b.n	800e4a6 <_printf_float+0xa2>
 800e568:	9a06      	ldr	r2, [sp, #24]
 800e56a:	2a47      	cmp	r2, #71	@ 0x47
 800e56c:	d1c2      	bne.n	800e4f4 <_printf_float+0xf0>
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1c0      	bne.n	800e4f4 <_printf_float+0xf0>
 800e572:	2301      	movs	r3, #1
 800e574:	e7bd      	b.n	800e4f2 <_printf_float+0xee>
 800e576:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e57a:	d9db      	bls.n	800e534 <_printf_float+0x130>
 800e57c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e580:	d118      	bne.n	800e5b4 <_printf_float+0x1b0>
 800e582:	2900      	cmp	r1, #0
 800e584:	6863      	ldr	r3, [r4, #4]
 800e586:	dd0b      	ble.n	800e5a0 <_printf_float+0x19c>
 800e588:	6121      	str	r1, [r4, #16]
 800e58a:	b913      	cbnz	r3, 800e592 <_printf_float+0x18e>
 800e58c:	6822      	ldr	r2, [r4, #0]
 800e58e:	07d0      	lsls	r0, r2, #31
 800e590:	d502      	bpl.n	800e598 <_printf_float+0x194>
 800e592:	3301      	adds	r3, #1
 800e594:	440b      	add	r3, r1
 800e596:	6123      	str	r3, [r4, #16]
 800e598:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e59a:	f04f 0900 	mov.w	r9, #0
 800e59e:	e7db      	b.n	800e558 <_printf_float+0x154>
 800e5a0:	b913      	cbnz	r3, 800e5a8 <_printf_float+0x1a4>
 800e5a2:	6822      	ldr	r2, [r4, #0]
 800e5a4:	07d2      	lsls	r2, r2, #31
 800e5a6:	d501      	bpl.n	800e5ac <_printf_float+0x1a8>
 800e5a8:	3302      	adds	r3, #2
 800e5aa:	e7f4      	b.n	800e596 <_printf_float+0x192>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e7f2      	b.n	800e596 <_printf_float+0x192>
 800e5b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5b6:	4299      	cmp	r1, r3
 800e5b8:	db05      	blt.n	800e5c6 <_printf_float+0x1c2>
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	6121      	str	r1, [r4, #16]
 800e5be:	07d8      	lsls	r0, r3, #31
 800e5c0:	d5ea      	bpl.n	800e598 <_printf_float+0x194>
 800e5c2:	1c4b      	adds	r3, r1, #1
 800e5c4:	e7e7      	b.n	800e596 <_printf_float+0x192>
 800e5c6:	2900      	cmp	r1, #0
 800e5c8:	bfd4      	ite	le
 800e5ca:	f1c1 0202 	rsble	r2, r1, #2
 800e5ce:	2201      	movgt	r2, #1
 800e5d0:	4413      	add	r3, r2
 800e5d2:	e7e0      	b.n	800e596 <_printf_float+0x192>
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	055a      	lsls	r2, r3, #21
 800e5d8:	d407      	bmi.n	800e5ea <_printf_float+0x1e6>
 800e5da:	6923      	ldr	r3, [r4, #16]
 800e5dc:	4642      	mov	r2, r8
 800e5de:	4631      	mov	r1, r6
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	47b8      	blx	r7
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	d12b      	bne.n	800e640 <_printf_float+0x23c>
 800e5e8:	e767      	b.n	800e4ba <_printf_float+0xb6>
 800e5ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e5ee:	f240 80dd 	bls.w	800e7ac <_printf_float+0x3a8>
 800e5f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f7f2 fa6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d033      	beq.n	800e66a <_printf_float+0x266>
 800e602:	4a37      	ldr	r2, [pc, #220]	@ (800e6e0 <_printf_float+0x2dc>)
 800e604:	2301      	movs	r3, #1
 800e606:	4631      	mov	r1, r6
 800e608:	4628      	mov	r0, r5
 800e60a:	47b8      	blx	r7
 800e60c:	3001      	adds	r0, #1
 800e60e:	f43f af54 	beq.w	800e4ba <_printf_float+0xb6>
 800e612:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e616:	4543      	cmp	r3, r8
 800e618:	db02      	blt.n	800e620 <_printf_float+0x21c>
 800e61a:	6823      	ldr	r3, [r4, #0]
 800e61c:	07d8      	lsls	r0, r3, #31
 800e61e:	d50f      	bpl.n	800e640 <_printf_float+0x23c>
 800e620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e624:	4631      	mov	r1, r6
 800e626:	4628      	mov	r0, r5
 800e628:	47b8      	blx	r7
 800e62a:	3001      	adds	r0, #1
 800e62c:	f43f af45 	beq.w	800e4ba <_printf_float+0xb6>
 800e630:	f04f 0900 	mov.w	r9, #0
 800e634:	f108 38ff 	add.w	r8, r8, #4294967295
 800e638:	f104 0a1a 	add.w	sl, r4, #26
 800e63c:	45c8      	cmp	r8, r9
 800e63e:	dc09      	bgt.n	800e654 <_printf_float+0x250>
 800e640:	6823      	ldr	r3, [r4, #0]
 800e642:	079b      	lsls	r3, r3, #30
 800e644:	f100 8103 	bmi.w	800e84e <_printf_float+0x44a>
 800e648:	68e0      	ldr	r0, [r4, #12]
 800e64a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e64c:	4298      	cmp	r0, r3
 800e64e:	bfb8      	it	lt
 800e650:	4618      	movlt	r0, r3
 800e652:	e734      	b.n	800e4be <_printf_float+0xba>
 800e654:	2301      	movs	r3, #1
 800e656:	4652      	mov	r2, sl
 800e658:	4631      	mov	r1, r6
 800e65a:	4628      	mov	r0, r5
 800e65c:	47b8      	blx	r7
 800e65e:	3001      	adds	r0, #1
 800e660:	f43f af2b 	beq.w	800e4ba <_printf_float+0xb6>
 800e664:	f109 0901 	add.w	r9, r9, #1
 800e668:	e7e8      	b.n	800e63c <_printf_float+0x238>
 800e66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dc39      	bgt.n	800e6e4 <_printf_float+0x2e0>
 800e670:	4a1b      	ldr	r2, [pc, #108]	@ (800e6e0 <_printf_float+0x2dc>)
 800e672:	2301      	movs	r3, #1
 800e674:	4631      	mov	r1, r6
 800e676:	4628      	mov	r0, r5
 800e678:	47b8      	blx	r7
 800e67a:	3001      	adds	r0, #1
 800e67c:	f43f af1d 	beq.w	800e4ba <_printf_float+0xb6>
 800e680:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e684:	ea59 0303 	orrs.w	r3, r9, r3
 800e688:	d102      	bne.n	800e690 <_printf_float+0x28c>
 800e68a:	6823      	ldr	r3, [r4, #0]
 800e68c:	07d9      	lsls	r1, r3, #31
 800e68e:	d5d7      	bpl.n	800e640 <_printf_float+0x23c>
 800e690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e694:	4631      	mov	r1, r6
 800e696:	4628      	mov	r0, r5
 800e698:	47b8      	blx	r7
 800e69a:	3001      	adds	r0, #1
 800e69c:	f43f af0d 	beq.w	800e4ba <_printf_float+0xb6>
 800e6a0:	f04f 0a00 	mov.w	sl, #0
 800e6a4:	f104 0b1a 	add.w	fp, r4, #26
 800e6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6aa:	425b      	negs	r3, r3
 800e6ac:	4553      	cmp	r3, sl
 800e6ae:	dc01      	bgt.n	800e6b4 <_printf_float+0x2b0>
 800e6b0:	464b      	mov	r3, r9
 800e6b2:	e793      	b.n	800e5dc <_printf_float+0x1d8>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	465a      	mov	r2, fp
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	47b8      	blx	r7
 800e6be:	3001      	adds	r0, #1
 800e6c0:	f43f aefb 	beq.w	800e4ba <_printf_float+0xb6>
 800e6c4:	f10a 0a01 	add.w	sl, sl, #1
 800e6c8:	e7ee      	b.n	800e6a8 <_printf_float+0x2a4>
 800e6ca:	bf00      	nop
 800e6cc:	7fefffff 	.word	0x7fefffff
 800e6d0:	080112e4 	.word	0x080112e4
 800e6d4:	080112e8 	.word	0x080112e8
 800e6d8:	080112ec 	.word	0x080112ec
 800e6dc:	080112f0 	.word	0x080112f0
 800e6e0:	080112f4 	.word	0x080112f4
 800e6e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e6e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e6ea:	4553      	cmp	r3, sl
 800e6ec:	bfa8      	it	ge
 800e6ee:	4653      	movge	r3, sl
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	4699      	mov	r9, r3
 800e6f4:	dc36      	bgt.n	800e764 <_printf_float+0x360>
 800e6f6:	f04f 0b00 	mov.w	fp, #0
 800e6fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6fe:	f104 021a 	add.w	r2, r4, #26
 800e702:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e704:	9306      	str	r3, [sp, #24]
 800e706:	eba3 0309 	sub.w	r3, r3, r9
 800e70a:	455b      	cmp	r3, fp
 800e70c:	dc31      	bgt.n	800e772 <_printf_float+0x36e>
 800e70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e710:	459a      	cmp	sl, r3
 800e712:	dc3a      	bgt.n	800e78a <_printf_float+0x386>
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	07da      	lsls	r2, r3, #31
 800e718:	d437      	bmi.n	800e78a <_printf_float+0x386>
 800e71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71c:	ebaa 0903 	sub.w	r9, sl, r3
 800e720:	9b06      	ldr	r3, [sp, #24]
 800e722:	ebaa 0303 	sub.w	r3, sl, r3
 800e726:	4599      	cmp	r9, r3
 800e728:	bfa8      	it	ge
 800e72a:	4699      	movge	r9, r3
 800e72c:	f1b9 0f00 	cmp.w	r9, #0
 800e730:	dc33      	bgt.n	800e79a <_printf_float+0x396>
 800e732:	f04f 0800 	mov.w	r8, #0
 800e736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e73a:	f104 0b1a 	add.w	fp, r4, #26
 800e73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e740:	ebaa 0303 	sub.w	r3, sl, r3
 800e744:	eba3 0309 	sub.w	r3, r3, r9
 800e748:	4543      	cmp	r3, r8
 800e74a:	f77f af79 	ble.w	800e640 <_printf_float+0x23c>
 800e74e:	2301      	movs	r3, #1
 800e750:	465a      	mov	r2, fp
 800e752:	4631      	mov	r1, r6
 800e754:	4628      	mov	r0, r5
 800e756:	47b8      	blx	r7
 800e758:	3001      	adds	r0, #1
 800e75a:	f43f aeae 	beq.w	800e4ba <_printf_float+0xb6>
 800e75e:	f108 0801 	add.w	r8, r8, #1
 800e762:	e7ec      	b.n	800e73e <_printf_float+0x33a>
 800e764:	4642      	mov	r2, r8
 800e766:	4631      	mov	r1, r6
 800e768:	4628      	mov	r0, r5
 800e76a:	47b8      	blx	r7
 800e76c:	3001      	adds	r0, #1
 800e76e:	d1c2      	bne.n	800e6f6 <_printf_float+0x2f2>
 800e770:	e6a3      	b.n	800e4ba <_printf_float+0xb6>
 800e772:	2301      	movs	r3, #1
 800e774:	4631      	mov	r1, r6
 800e776:	4628      	mov	r0, r5
 800e778:	9206      	str	r2, [sp, #24]
 800e77a:	47b8      	blx	r7
 800e77c:	3001      	adds	r0, #1
 800e77e:	f43f ae9c 	beq.w	800e4ba <_printf_float+0xb6>
 800e782:	9a06      	ldr	r2, [sp, #24]
 800e784:	f10b 0b01 	add.w	fp, fp, #1
 800e788:	e7bb      	b.n	800e702 <_printf_float+0x2fe>
 800e78a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e78e:	4631      	mov	r1, r6
 800e790:	4628      	mov	r0, r5
 800e792:	47b8      	blx	r7
 800e794:	3001      	adds	r0, #1
 800e796:	d1c0      	bne.n	800e71a <_printf_float+0x316>
 800e798:	e68f      	b.n	800e4ba <_printf_float+0xb6>
 800e79a:	9a06      	ldr	r2, [sp, #24]
 800e79c:	464b      	mov	r3, r9
 800e79e:	4442      	add	r2, r8
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	47b8      	blx	r7
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	d1c3      	bne.n	800e732 <_printf_float+0x32e>
 800e7aa:	e686      	b.n	800e4ba <_printf_float+0xb6>
 800e7ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e7b0:	f1ba 0f01 	cmp.w	sl, #1
 800e7b4:	dc01      	bgt.n	800e7ba <_printf_float+0x3b6>
 800e7b6:	07db      	lsls	r3, r3, #31
 800e7b8:	d536      	bpl.n	800e828 <_printf_float+0x424>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	4642      	mov	r2, r8
 800e7be:	4631      	mov	r1, r6
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	47b8      	blx	r7
 800e7c4:	3001      	adds	r0, #1
 800e7c6:	f43f ae78 	beq.w	800e4ba <_printf_float+0xb6>
 800e7ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7ce:	4631      	mov	r1, r6
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	47b8      	blx	r7
 800e7d4:	3001      	adds	r0, #1
 800e7d6:	f43f ae70 	beq.w	800e4ba <_printf_float+0xb6>
 800e7da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e7de:	2200      	movs	r2, #0
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7e6:	f7f2 f977 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7ea:	b9c0      	cbnz	r0, 800e81e <_printf_float+0x41a>
 800e7ec:	4653      	mov	r3, sl
 800e7ee:	f108 0201 	add.w	r2, r8, #1
 800e7f2:	4631      	mov	r1, r6
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	47b8      	blx	r7
 800e7f8:	3001      	adds	r0, #1
 800e7fa:	d10c      	bne.n	800e816 <_printf_float+0x412>
 800e7fc:	e65d      	b.n	800e4ba <_printf_float+0xb6>
 800e7fe:	2301      	movs	r3, #1
 800e800:	465a      	mov	r2, fp
 800e802:	4631      	mov	r1, r6
 800e804:	4628      	mov	r0, r5
 800e806:	47b8      	blx	r7
 800e808:	3001      	adds	r0, #1
 800e80a:	f43f ae56 	beq.w	800e4ba <_printf_float+0xb6>
 800e80e:	f108 0801 	add.w	r8, r8, #1
 800e812:	45d0      	cmp	r8, sl
 800e814:	dbf3      	blt.n	800e7fe <_printf_float+0x3fa>
 800e816:	464b      	mov	r3, r9
 800e818:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e81c:	e6df      	b.n	800e5de <_printf_float+0x1da>
 800e81e:	f04f 0800 	mov.w	r8, #0
 800e822:	f104 0b1a 	add.w	fp, r4, #26
 800e826:	e7f4      	b.n	800e812 <_printf_float+0x40e>
 800e828:	2301      	movs	r3, #1
 800e82a:	4642      	mov	r2, r8
 800e82c:	e7e1      	b.n	800e7f2 <_printf_float+0x3ee>
 800e82e:	2301      	movs	r3, #1
 800e830:	464a      	mov	r2, r9
 800e832:	4631      	mov	r1, r6
 800e834:	4628      	mov	r0, r5
 800e836:	47b8      	blx	r7
 800e838:	3001      	adds	r0, #1
 800e83a:	f43f ae3e 	beq.w	800e4ba <_printf_float+0xb6>
 800e83e:	f108 0801 	add.w	r8, r8, #1
 800e842:	68e3      	ldr	r3, [r4, #12]
 800e844:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e846:	1a5b      	subs	r3, r3, r1
 800e848:	4543      	cmp	r3, r8
 800e84a:	dcf0      	bgt.n	800e82e <_printf_float+0x42a>
 800e84c:	e6fc      	b.n	800e648 <_printf_float+0x244>
 800e84e:	f04f 0800 	mov.w	r8, #0
 800e852:	f104 0919 	add.w	r9, r4, #25
 800e856:	e7f4      	b.n	800e842 <_printf_float+0x43e>

0800e858 <_printf_common>:
 800e858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e85c:	4616      	mov	r6, r2
 800e85e:	4698      	mov	r8, r3
 800e860:	688a      	ldr	r2, [r1, #8]
 800e862:	690b      	ldr	r3, [r1, #16]
 800e864:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e868:	4293      	cmp	r3, r2
 800e86a:	bfb8      	it	lt
 800e86c:	4613      	movlt	r3, r2
 800e86e:	6033      	str	r3, [r6, #0]
 800e870:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e874:	4607      	mov	r7, r0
 800e876:	460c      	mov	r4, r1
 800e878:	b10a      	cbz	r2, 800e87e <_printf_common+0x26>
 800e87a:	3301      	adds	r3, #1
 800e87c:	6033      	str	r3, [r6, #0]
 800e87e:	6823      	ldr	r3, [r4, #0]
 800e880:	0699      	lsls	r1, r3, #26
 800e882:	bf42      	ittt	mi
 800e884:	6833      	ldrmi	r3, [r6, #0]
 800e886:	3302      	addmi	r3, #2
 800e888:	6033      	strmi	r3, [r6, #0]
 800e88a:	6825      	ldr	r5, [r4, #0]
 800e88c:	f015 0506 	ands.w	r5, r5, #6
 800e890:	d106      	bne.n	800e8a0 <_printf_common+0x48>
 800e892:	f104 0a19 	add.w	sl, r4, #25
 800e896:	68e3      	ldr	r3, [r4, #12]
 800e898:	6832      	ldr	r2, [r6, #0]
 800e89a:	1a9b      	subs	r3, r3, r2
 800e89c:	42ab      	cmp	r3, r5
 800e89e:	dc26      	bgt.n	800e8ee <_printf_common+0x96>
 800e8a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e8a4:	6822      	ldr	r2, [r4, #0]
 800e8a6:	3b00      	subs	r3, #0
 800e8a8:	bf18      	it	ne
 800e8aa:	2301      	movne	r3, #1
 800e8ac:	0692      	lsls	r2, r2, #26
 800e8ae:	d42b      	bmi.n	800e908 <_printf_common+0xb0>
 800e8b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e8b4:	4641      	mov	r1, r8
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	47c8      	blx	r9
 800e8ba:	3001      	adds	r0, #1
 800e8bc:	d01e      	beq.n	800e8fc <_printf_common+0xa4>
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	6922      	ldr	r2, [r4, #16]
 800e8c2:	f003 0306 	and.w	r3, r3, #6
 800e8c6:	2b04      	cmp	r3, #4
 800e8c8:	bf02      	ittt	eq
 800e8ca:	68e5      	ldreq	r5, [r4, #12]
 800e8cc:	6833      	ldreq	r3, [r6, #0]
 800e8ce:	1aed      	subeq	r5, r5, r3
 800e8d0:	68a3      	ldr	r3, [r4, #8]
 800e8d2:	bf0c      	ite	eq
 800e8d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8d8:	2500      	movne	r5, #0
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	bfc4      	itt	gt
 800e8de:	1a9b      	subgt	r3, r3, r2
 800e8e0:	18ed      	addgt	r5, r5, r3
 800e8e2:	2600      	movs	r6, #0
 800e8e4:	341a      	adds	r4, #26
 800e8e6:	42b5      	cmp	r5, r6
 800e8e8:	d11a      	bne.n	800e920 <_printf_common+0xc8>
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	e008      	b.n	800e900 <_printf_common+0xa8>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	4652      	mov	r2, sl
 800e8f2:	4641      	mov	r1, r8
 800e8f4:	4638      	mov	r0, r7
 800e8f6:	47c8      	blx	r9
 800e8f8:	3001      	adds	r0, #1
 800e8fa:	d103      	bne.n	800e904 <_printf_common+0xac>
 800e8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e904:	3501      	adds	r5, #1
 800e906:	e7c6      	b.n	800e896 <_printf_common+0x3e>
 800e908:	18e1      	adds	r1, r4, r3
 800e90a:	1c5a      	adds	r2, r3, #1
 800e90c:	2030      	movs	r0, #48	@ 0x30
 800e90e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e912:	4422      	add	r2, r4
 800e914:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e91c:	3302      	adds	r3, #2
 800e91e:	e7c7      	b.n	800e8b0 <_printf_common+0x58>
 800e920:	2301      	movs	r3, #1
 800e922:	4622      	mov	r2, r4
 800e924:	4641      	mov	r1, r8
 800e926:	4638      	mov	r0, r7
 800e928:	47c8      	blx	r9
 800e92a:	3001      	adds	r0, #1
 800e92c:	d0e6      	beq.n	800e8fc <_printf_common+0xa4>
 800e92e:	3601      	adds	r6, #1
 800e930:	e7d9      	b.n	800e8e6 <_printf_common+0x8e>
	...

0800e934 <_printf_i>:
 800e934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e938:	7e0f      	ldrb	r7, [r1, #24]
 800e93a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e93c:	2f78      	cmp	r7, #120	@ 0x78
 800e93e:	4691      	mov	r9, r2
 800e940:	4680      	mov	r8, r0
 800e942:	460c      	mov	r4, r1
 800e944:	469a      	mov	sl, r3
 800e946:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e94a:	d807      	bhi.n	800e95c <_printf_i+0x28>
 800e94c:	2f62      	cmp	r7, #98	@ 0x62
 800e94e:	d80a      	bhi.n	800e966 <_printf_i+0x32>
 800e950:	2f00      	cmp	r7, #0
 800e952:	f000 80d2 	beq.w	800eafa <_printf_i+0x1c6>
 800e956:	2f58      	cmp	r7, #88	@ 0x58
 800e958:	f000 80b9 	beq.w	800eace <_printf_i+0x19a>
 800e95c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e960:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e964:	e03a      	b.n	800e9dc <_printf_i+0xa8>
 800e966:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e96a:	2b15      	cmp	r3, #21
 800e96c:	d8f6      	bhi.n	800e95c <_printf_i+0x28>
 800e96e:	a101      	add	r1, pc, #4	@ (adr r1, 800e974 <_printf_i+0x40>)
 800e970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e974:	0800e9cd 	.word	0x0800e9cd
 800e978:	0800e9e1 	.word	0x0800e9e1
 800e97c:	0800e95d 	.word	0x0800e95d
 800e980:	0800e95d 	.word	0x0800e95d
 800e984:	0800e95d 	.word	0x0800e95d
 800e988:	0800e95d 	.word	0x0800e95d
 800e98c:	0800e9e1 	.word	0x0800e9e1
 800e990:	0800e95d 	.word	0x0800e95d
 800e994:	0800e95d 	.word	0x0800e95d
 800e998:	0800e95d 	.word	0x0800e95d
 800e99c:	0800e95d 	.word	0x0800e95d
 800e9a0:	0800eae1 	.word	0x0800eae1
 800e9a4:	0800ea0b 	.word	0x0800ea0b
 800e9a8:	0800ea9b 	.word	0x0800ea9b
 800e9ac:	0800e95d 	.word	0x0800e95d
 800e9b0:	0800e95d 	.word	0x0800e95d
 800e9b4:	0800eb03 	.word	0x0800eb03
 800e9b8:	0800e95d 	.word	0x0800e95d
 800e9bc:	0800ea0b 	.word	0x0800ea0b
 800e9c0:	0800e95d 	.word	0x0800e95d
 800e9c4:	0800e95d 	.word	0x0800e95d
 800e9c8:	0800eaa3 	.word	0x0800eaa3
 800e9cc:	6833      	ldr	r3, [r6, #0]
 800e9ce:	1d1a      	adds	r2, r3, #4
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	6032      	str	r2, [r6, #0]
 800e9d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e09d      	b.n	800eb1c <_printf_i+0x1e8>
 800e9e0:	6833      	ldr	r3, [r6, #0]
 800e9e2:	6820      	ldr	r0, [r4, #0]
 800e9e4:	1d19      	adds	r1, r3, #4
 800e9e6:	6031      	str	r1, [r6, #0]
 800e9e8:	0606      	lsls	r6, r0, #24
 800e9ea:	d501      	bpl.n	800e9f0 <_printf_i+0xbc>
 800e9ec:	681d      	ldr	r5, [r3, #0]
 800e9ee:	e003      	b.n	800e9f8 <_printf_i+0xc4>
 800e9f0:	0645      	lsls	r5, r0, #25
 800e9f2:	d5fb      	bpl.n	800e9ec <_printf_i+0xb8>
 800e9f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e9f8:	2d00      	cmp	r5, #0
 800e9fa:	da03      	bge.n	800ea04 <_printf_i+0xd0>
 800e9fc:	232d      	movs	r3, #45	@ 0x2d
 800e9fe:	426d      	negs	r5, r5
 800ea00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea04:	4859      	ldr	r0, [pc, #356]	@ (800eb6c <_printf_i+0x238>)
 800ea06:	230a      	movs	r3, #10
 800ea08:	e011      	b.n	800ea2e <_printf_i+0xfa>
 800ea0a:	6821      	ldr	r1, [r4, #0]
 800ea0c:	6833      	ldr	r3, [r6, #0]
 800ea0e:	0608      	lsls	r0, r1, #24
 800ea10:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea14:	d402      	bmi.n	800ea1c <_printf_i+0xe8>
 800ea16:	0649      	lsls	r1, r1, #25
 800ea18:	bf48      	it	mi
 800ea1a:	b2ad      	uxthmi	r5, r5
 800ea1c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea1e:	4853      	ldr	r0, [pc, #332]	@ (800eb6c <_printf_i+0x238>)
 800ea20:	6033      	str	r3, [r6, #0]
 800ea22:	bf14      	ite	ne
 800ea24:	230a      	movne	r3, #10
 800ea26:	2308      	moveq	r3, #8
 800ea28:	2100      	movs	r1, #0
 800ea2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea2e:	6866      	ldr	r6, [r4, #4]
 800ea30:	60a6      	str	r6, [r4, #8]
 800ea32:	2e00      	cmp	r6, #0
 800ea34:	bfa2      	ittt	ge
 800ea36:	6821      	ldrge	r1, [r4, #0]
 800ea38:	f021 0104 	bicge.w	r1, r1, #4
 800ea3c:	6021      	strge	r1, [r4, #0]
 800ea3e:	b90d      	cbnz	r5, 800ea44 <_printf_i+0x110>
 800ea40:	2e00      	cmp	r6, #0
 800ea42:	d04b      	beq.n	800eadc <_printf_i+0x1a8>
 800ea44:	4616      	mov	r6, r2
 800ea46:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea4a:	fb03 5711 	mls	r7, r3, r1, r5
 800ea4e:	5dc7      	ldrb	r7, [r0, r7]
 800ea50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea54:	462f      	mov	r7, r5
 800ea56:	42bb      	cmp	r3, r7
 800ea58:	460d      	mov	r5, r1
 800ea5a:	d9f4      	bls.n	800ea46 <_printf_i+0x112>
 800ea5c:	2b08      	cmp	r3, #8
 800ea5e:	d10b      	bne.n	800ea78 <_printf_i+0x144>
 800ea60:	6823      	ldr	r3, [r4, #0]
 800ea62:	07df      	lsls	r7, r3, #31
 800ea64:	d508      	bpl.n	800ea78 <_printf_i+0x144>
 800ea66:	6923      	ldr	r3, [r4, #16]
 800ea68:	6861      	ldr	r1, [r4, #4]
 800ea6a:	4299      	cmp	r1, r3
 800ea6c:	bfde      	ittt	le
 800ea6e:	2330      	movle	r3, #48	@ 0x30
 800ea70:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea74:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea78:	1b92      	subs	r2, r2, r6
 800ea7a:	6122      	str	r2, [r4, #16]
 800ea7c:	f8cd a000 	str.w	sl, [sp]
 800ea80:	464b      	mov	r3, r9
 800ea82:	aa03      	add	r2, sp, #12
 800ea84:	4621      	mov	r1, r4
 800ea86:	4640      	mov	r0, r8
 800ea88:	f7ff fee6 	bl	800e858 <_printf_common>
 800ea8c:	3001      	adds	r0, #1
 800ea8e:	d14a      	bne.n	800eb26 <_printf_i+0x1f2>
 800ea90:	f04f 30ff 	mov.w	r0, #4294967295
 800ea94:	b004      	add	sp, #16
 800ea96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	f043 0320 	orr.w	r3, r3, #32
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	4833      	ldr	r0, [pc, #204]	@ (800eb70 <_printf_i+0x23c>)
 800eaa4:	2778      	movs	r7, #120	@ 0x78
 800eaa6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eaaa:	6823      	ldr	r3, [r4, #0]
 800eaac:	6831      	ldr	r1, [r6, #0]
 800eaae:	061f      	lsls	r7, r3, #24
 800eab0:	f851 5b04 	ldr.w	r5, [r1], #4
 800eab4:	d402      	bmi.n	800eabc <_printf_i+0x188>
 800eab6:	065f      	lsls	r7, r3, #25
 800eab8:	bf48      	it	mi
 800eaba:	b2ad      	uxthmi	r5, r5
 800eabc:	6031      	str	r1, [r6, #0]
 800eabe:	07d9      	lsls	r1, r3, #31
 800eac0:	bf44      	itt	mi
 800eac2:	f043 0320 	orrmi.w	r3, r3, #32
 800eac6:	6023      	strmi	r3, [r4, #0]
 800eac8:	b11d      	cbz	r5, 800ead2 <_printf_i+0x19e>
 800eaca:	2310      	movs	r3, #16
 800eacc:	e7ac      	b.n	800ea28 <_printf_i+0xf4>
 800eace:	4827      	ldr	r0, [pc, #156]	@ (800eb6c <_printf_i+0x238>)
 800ead0:	e7e9      	b.n	800eaa6 <_printf_i+0x172>
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	f023 0320 	bic.w	r3, r3, #32
 800ead8:	6023      	str	r3, [r4, #0]
 800eada:	e7f6      	b.n	800eaca <_printf_i+0x196>
 800eadc:	4616      	mov	r6, r2
 800eade:	e7bd      	b.n	800ea5c <_printf_i+0x128>
 800eae0:	6833      	ldr	r3, [r6, #0]
 800eae2:	6825      	ldr	r5, [r4, #0]
 800eae4:	6961      	ldr	r1, [r4, #20]
 800eae6:	1d18      	adds	r0, r3, #4
 800eae8:	6030      	str	r0, [r6, #0]
 800eaea:	062e      	lsls	r6, r5, #24
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	d501      	bpl.n	800eaf4 <_printf_i+0x1c0>
 800eaf0:	6019      	str	r1, [r3, #0]
 800eaf2:	e002      	b.n	800eafa <_printf_i+0x1c6>
 800eaf4:	0668      	lsls	r0, r5, #25
 800eaf6:	d5fb      	bpl.n	800eaf0 <_printf_i+0x1bc>
 800eaf8:	8019      	strh	r1, [r3, #0]
 800eafa:	2300      	movs	r3, #0
 800eafc:	6123      	str	r3, [r4, #16]
 800eafe:	4616      	mov	r6, r2
 800eb00:	e7bc      	b.n	800ea7c <_printf_i+0x148>
 800eb02:	6833      	ldr	r3, [r6, #0]
 800eb04:	1d1a      	adds	r2, r3, #4
 800eb06:	6032      	str	r2, [r6, #0]
 800eb08:	681e      	ldr	r6, [r3, #0]
 800eb0a:	6862      	ldr	r2, [r4, #4]
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	4630      	mov	r0, r6
 800eb10:	f7f1 fb66 	bl	80001e0 <memchr>
 800eb14:	b108      	cbz	r0, 800eb1a <_printf_i+0x1e6>
 800eb16:	1b80      	subs	r0, r0, r6
 800eb18:	6060      	str	r0, [r4, #4]
 800eb1a:	6863      	ldr	r3, [r4, #4]
 800eb1c:	6123      	str	r3, [r4, #16]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb24:	e7aa      	b.n	800ea7c <_printf_i+0x148>
 800eb26:	6923      	ldr	r3, [r4, #16]
 800eb28:	4632      	mov	r2, r6
 800eb2a:	4649      	mov	r1, r9
 800eb2c:	4640      	mov	r0, r8
 800eb2e:	47d0      	blx	sl
 800eb30:	3001      	adds	r0, #1
 800eb32:	d0ad      	beq.n	800ea90 <_printf_i+0x15c>
 800eb34:	6823      	ldr	r3, [r4, #0]
 800eb36:	079b      	lsls	r3, r3, #30
 800eb38:	d413      	bmi.n	800eb62 <_printf_i+0x22e>
 800eb3a:	68e0      	ldr	r0, [r4, #12]
 800eb3c:	9b03      	ldr	r3, [sp, #12]
 800eb3e:	4298      	cmp	r0, r3
 800eb40:	bfb8      	it	lt
 800eb42:	4618      	movlt	r0, r3
 800eb44:	e7a6      	b.n	800ea94 <_printf_i+0x160>
 800eb46:	2301      	movs	r3, #1
 800eb48:	4632      	mov	r2, r6
 800eb4a:	4649      	mov	r1, r9
 800eb4c:	4640      	mov	r0, r8
 800eb4e:	47d0      	blx	sl
 800eb50:	3001      	adds	r0, #1
 800eb52:	d09d      	beq.n	800ea90 <_printf_i+0x15c>
 800eb54:	3501      	adds	r5, #1
 800eb56:	68e3      	ldr	r3, [r4, #12]
 800eb58:	9903      	ldr	r1, [sp, #12]
 800eb5a:	1a5b      	subs	r3, r3, r1
 800eb5c:	42ab      	cmp	r3, r5
 800eb5e:	dcf2      	bgt.n	800eb46 <_printf_i+0x212>
 800eb60:	e7eb      	b.n	800eb3a <_printf_i+0x206>
 800eb62:	2500      	movs	r5, #0
 800eb64:	f104 0619 	add.w	r6, r4, #25
 800eb68:	e7f5      	b.n	800eb56 <_printf_i+0x222>
 800eb6a:	bf00      	nop
 800eb6c:	080112f6 	.word	0x080112f6
 800eb70:	08011307 	.word	0x08011307

0800eb74 <std>:
 800eb74:	2300      	movs	r3, #0
 800eb76:	b510      	push	{r4, lr}
 800eb78:	4604      	mov	r4, r0
 800eb7a:	e9c0 3300 	strd	r3, r3, [r0]
 800eb7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb82:	6083      	str	r3, [r0, #8]
 800eb84:	8181      	strh	r1, [r0, #12]
 800eb86:	6643      	str	r3, [r0, #100]	@ 0x64
 800eb88:	81c2      	strh	r2, [r0, #14]
 800eb8a:	6183      	str	r3, [r0, #24]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	2208      	movs	r2, #8
 800eb90:	305c      	adds	r0, #92	@ 0x5c
 800eb92:	f000 fa2d 	bl	800eff0 <memset>
 800eb96:	4b0d      	ldr	r3, [pc, #52]	@ (800ebcc <std+0x58>)
 800eb98:	6263      	str	r3, [r4, #36]	@ 0x24
 800eb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd0 <std+0x5c>)
 800eb9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd4 <std+0x60>)
 800eba0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eba2:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd8 <std+0x64>)
 800eba4:	6323      	str	r3, [r4, #48]	@ 0x30
 800eba6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebdc <std+0x68>)
 800eba8:	6224      	str	r4, [r4, #32]
 800ebaa:	429c      	cmp	r4, r3
 800ebac:	d006      	beq.n	800ebbc <std+0x48>
 800ebae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebb2:	4294      	cmp	r4, r2
 800ebb4:	d002      	beq.n	800ebbc <std+0x48>
 800ebb6:	33d0      	adds	r3, #208	@ 0xd0
 800ebb8:	429c      	cmp	r4, r3
 800ebba:	d105      	bne.n	800ebc8 <std+0x54>
 800ebbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebc4:	f000 baa0 	b.w	800f108 <__retarget_lock_init_recursive>
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	bf00      	nop
 800ebcc:	0800ee41 	.word	0x0800ee41
 800ebd0:	0800ee63 	.word	0x0800ee63
 800ebd4:	0800ee9b 	.word	0x0800ee9b
 800ebd8:	0800eebf 	.word	0x0800eebf
 800ebdc:	20000dac 	.word	0x20000dac

0800ebe0 <stdio_exit_handler>:
 800ebe0:	4a02      	ldr	r2, [pc, #8]	@ (800ebec <stdio_exit_handler+0xc>)
 800ebe2:	4903      	ldr	r1, [pc, #12]	@ (800ebf0 <stdio_exit_handler+0x10>)
 800ebe4:	4803      	ldr	r0, [pc, #12]	@ (800ebf4 <stdio_exit_handler+0x14>)
 800ebe6:	f000 b869 	b.w	800ecbc <_fwalk_sglue>
 800ebea:	bf00      	nop
 800ebec:	20000030 	.word	0x20000030
 800ebf0:	08010b9d 	.word	0x08010b9d
 800ebf4:	20000040 	.word	0x20000040

0800ebf8 <cleanup_stdio>:
 800ebf8:	6841      	ldr	r1, [r0, #4]
 800ebfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ec2c <cleanup_stdio+0x34>)
 800ebfc:	4299      	cmp	r1, r3
 800ebfe:	b510      	push	{r4, lr}
 800ec00:	4604      	mov	r4, r0
 800ec02:	d001      	beq.n	800ec08 <cleanup_stdio+0x10>
 800ec04:	f001 ffca 	bl	8010b9c <_fflush_r>
 800ec08:	68a1      	ldr	r1, [r4, #8]
 800ec0a:	4b09      	ldr	r3, [pc, #36]	@ (800ec30 <cleanup_stdio+0x38>)
 800ec0c:	4299      	cmp	r1, r3
 800ec0e:	d002      	beq.n	800ec16 <cleanup_stdio+0x1e>
 800ec10:	4620      	mov	r0, r4
 800ec12:	f001 ffc3 	bl	8010b9c <_fflush_r>
 800ec16:	68e1      	ldr	r1, [r4, #12]
 800ec18:	4b06      	ldr	r3, [pc, #24]	@ (800ec34 <cleanup_stdio+0x3c>)
 800ec1a:	4299      	cmp	r1, r3
 800ec1c:	d004      	beq.n	800ec28 <cleanup_stdio+0x30>
 800ec1e:	4620      	mov	r0, r4
 800ec20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec24:	f001 bfba 	b.w	8010b9c <_fflush_r>
 800ec28:	bd10      	pop	{r4, pc}
 800ec2a:	bf00      	nop
 800ec2c:	20000dac 	.word	0x20000dac
 800ec30:	20000e14 	.word	0x20000e14
 800ec34:	20000e7c 	.word	0x20000e7c

0800ec38 <global_stdio_init.part.0>:
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec68 <global_stdio_init.part.0+0x30>)
 800ec3c:	4c0b      	ldr	r4, [pc, #44]	@ (800ec6c <global_stdio_init.part.0+0x34>)
 800ec3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ec70 <global_stdio_init.part.0+0x38>)
 800ec40:	601a      	str	r2, [r3, #0]
 800ec42:	4620      	mov	r0, r4
 800ec44:	2200      	movs	r2, #0
 800ec46:	2104      	movs	r1, #4
 800ec48:	f7ff ff94 	bl	800eb74 <std>
 800ec4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec50:	2201      	movs	r2, #1
 800ec52:	2109      	movs	r1, #9
 800ec54:	f7ff ff8e 	bl	800eb74 <std>
 800ec58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec5c:	2202      	movs	r2, #2
 800ec5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec62:	2112      	movs	r1, #18
 800ec64:	f7ff bf86 	b.w	800eb74 <std>
 800ec68:	20000ee4 	.word	0x20000ee4
 800ec6c:	20000dac 	.word	0x20000dac
 800ec70:	0800ebe1 	.word	0x0800ebe1

0800ec74 <__sfp_lock_acquire>:
 800ec74:	4801      	ldr	r0, [pc, #4]	@ (800ec7c <__sfp_lock_acquire+0x8>)
 800ec76:	f000 ba48 	b.w	800f10a <__retarget_lock_acquire_recursive>
 800ec7a:	bf00      	nop
 800ec7c:	20000eed 	.word	0x20000eed

0800ec80 <__sfp_lock_release>:
 800ec80:	4801      	ldr	r0, [pc, #4]	@ (800ec88 <__sfp_lock_release+0x8>)
 800ec82:	f000 ba43 	b.w	800f10c <__retarget_lock_release_recursive>
 800ec86:	bf00      	nop
 800ec88:	20000eed 	.word	0x20000eed

0800ec8c <__sinit>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	4604      	mov	r4, r0
 800ec90:	f7ff fff0 	bl	800ec74 <__sfp_lock_acquire>
 800ec94:	6a23      	ldr	r3, [r4, #32]
 800ec96:	b11b      	cbz	r3, 800eca0 <__sinit+0x14>
 800ec98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec9c:	f7ff bff0 	b.w	800ec80 <__sfp_lock_release>
 800eca0:	4b04      	ldr	r3, [pc, #16]	@ (800ecb4 <__sinit+0x28>)
 800eca2:	6223      	str	r3, [r4, #32]
 800eca4:	4b04      	ldr	r3, [pc, #16]	@ (800ecb8 <__sinit+0x2c>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d1f5      	bne.n	800ec98 <__sinit+0xc>
 800ecac:	f7ff ffc4 	bl	800ec38 <global_stdio_init.part.0>
 800ecb0:	e7f2      	b.n	800ec98 <__sinit+0xc>
 800ecb2:	bf00      	nop
 800ecb4:	0800ebf9 	.word	0x0800ebf9
 800ecb8:	20000ee4 	.word	0x20000ee4

0800ecbc <_fwalk_sglue>:
 800ecbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecc0:	4607      	mov	r7, r0
 800ecc2:	4688      	mov	r8, r1
 800ecc4:	4614      	mov	r4, r2
 800ecc6:	2600      	movs	r6, #0
 800ecc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eccc:	f1b9 0901 	subs.w	r9, r9, #1
 800ecd0:	d505      	bpl.n	800ecde <_fwalk_sglue+0x22>
 800ecd2:	6824      	ldr	r4, [r4, #0]
 800ecd4:	2c00      	cmp	r4, #0
 800ecd6:	d1f7      	bne.n	800ecc8 <_fwalk_sglue+0xc>
 800ecd8:	4630      	mov	r0, r6
 800ecda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecde:	89ab      	ldrh	r3, [r5, #12]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d907      	bls.n	800ecf4 <_fwalk_sglue+0x38>
 800ece4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ece8:	3301      	adds	r3, #1
 800ecea:	d003      	beq.n	800ecf4 <_fwalk_sglue+0x38>
 800ecec:	4629      	mov	r1, r5
 800ecee:	4638      	mov	r0, r7
 800ecf0:	47c0      	blx	r8
 800ecf2:	4306      	orrs	r6, r0
 800ecf4:	3568      	adds	r5, #104	@ 0x68
 800ecf6:	e7e9      	b.n	800eccc <_fwalk_sglue+0x10>

0800ecf8 <iprintf>:
 800ecf8:	b40f      	push	{r0, r1, r2, r3}
 800ecfa:	b507      	push	{r0, r1, r2, lr}
 800ecfc:	4906      	ldr	r1, [pc, #24]	@ (800ed18 <iprintf+0x20>)
 800ecfe:	ab04      	add	r3, sp, #16
 800ed00:	6808      	ldr	r0, [r1, #0]
 800ed02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed06:	6881      	ldr	r1, [r0, #8]
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	f001 fdab 	bl	8010864 <_vfiprintf_r>
 800ed0e:	b003      	add	sp, #12
 800ed10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed14:	b004      	add	sp, #16
 800ed16:	4770      	bx	lr
 800ed18:	2000003c 	.word	0x2000003c

0800ed1c <_puts_r>:
 800ed1c:	6a03      	ldr	r3, [r0, #32]
 800ed1e:	b570      	push	{r4, r5, r6, lr}
 800ed20:	6884      	ldr	r4, [r0, #8]
 800ed22:	4605      	mov	r5, r0
 800ed24:	460e      	mov	r6, r1
 800ed26:	b90b      	cbnz	r3, 800ed2c <_puts_r+0x10>
 800ed28:	f7ff ffb0 	bl	800ec8c <__sinit>
 800ed2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed2e:	07db      	lsls	r3, r3, #31
 800ed30:	d405      	bmi.n	800ed3e <_puts_r+0x22>
 800ed32:	89a3      	ldrh	r3, [r4, #12]
 800ed34:	0598      	lsls	r0, r3, #22
 800ed36:	d402      	bmi.n	800ed3e <_puts_r+0x22>
 800ed38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed3a:	f000 f9e6 	bl	800f10a <__retarget_lock_acquire_recursive>
 800ed3e:	89a3      	ldrh	r3, [r4, #12]
 800ed40:	0719      	lsls	r1, r3, #28
 800ed42:	d502      	bpl.n	800ed4a <_puts_r+0x2e>
 800ed44:	6923      	ldr	r3, [r4, #16]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d135      	bne.n	800edb6 <_puts_r+0x9a>
 800ed4a:	4621      	mov	r1, r4
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	f000 f8f9 	bl	800ef44 <__swsetup_r>
 800ed52:	b380      	cbz	r0, 800edb6 <_puts_r+0x9a>
 800ed54:	f04f 35ff 	mov.w	r5, #4294967295
 800ed58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed5a:	07da      	lsls	r2, r3, #31
 800ed5c:	d405      	bmi.n	800ed6a <_puts_r+0x4e>
 800ed5e:	89a3      	ldrh	r3, [r4, #12]
 800ed60:	059b      	lsls	r3, r3, #22
 800ed62:	d402      	bmi.n	800ed6a <_puts_r+0x4e>
 800ed64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed66:	f000 f9d1 	bl	800f10c <__retarget_lock_release_recursive>
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	bd70      	pop	{r4, r5, r6, pc}
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	da04      	bge.n	800ed7c <_puts_r+0x60>
 800ed72:	69a2      	ldr	r2, [r4, #24]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	dc17      	bgt.n	800eda8 <_puts_r+0x8c>
 800ed78:	290a      	cmp	r1, #10
 800ed7a:	d015      	beq.n	800eda8 <_puts_r+0x8c>
 800ed7c:	6823      	ldr	r3, [r4, #0]
 800ed7e:	1c5a      	adds	r2, r3, #1
 800ed80:	6022      	str	r2, [r4, #0]
 800ed82:	7019      	strb	r1, [r3, #0]
 800ed84:	68a3      	ldr	r3, [r4, #8]
 800ed86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	60a3      	str	r3, [r4, #8]
 800ed8e:	2900      	cmp	r1, #0
 800ed90:	d1ed      	bne.n	800ed6e <_puts_r+0x52>
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	da11      	bge.n	800edba <_puts_r+0x9e>
 800ed96:	4622      	mov	r2, r4
 800ed98:	210a      	movs	r1, #10
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f000 f893 	bl	800eec6 <__swbuf_r>
 800eda0:	3001      	adds	r0, #1
 800eda2:	d0d7      	beq.n	800ed54 <_puts_r+0x38>
 800eda4:	250a      	movs	r5, #10
 800eda6:	e7d7      	b.n	800ed58 <_puts_r+0x3c>
 800eda8:	4622      	mov	r2, r4
 800edaa:	4628      	mov	r0, r5
 800edac:	f000 f88b 	bl	800eec6 <__swbuf_r>
 800edb0:	3001      	adds	r0, #1
 800edb2:	d1e7      	bne.n	800ed84 <_puts_r+0x68>
 800edb4:	e7ce      	b.n	800ed54 <_puts_r+0x38>
 800edb6:	3e01      	subs	r6, #1
 800edb8:	e7e4      	b.n	800ed84 <_puts_r+0x68>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	1c5a      	adds	r2, r3, #1
 800edbe:	6022      	str	r2, [r4, #0]
 800edc0:	220a      	movs	r2, #10
 800edc2:	701a      	strb	r2, [r3, #0]
 800edc4:	e7ee      	b.n	800eda4 <_puts_r+0x88>
	...

0800edc8 <puts>:
 800edc8:	4b02      	ldr	r3, [pc, #8]	@ (800edd4 <puts+0xc>)
 800edca:	4601      	mov	r1, r0
 800edcc:	6818      	ldr	r0, [r3, #0]
 800edce:	f7ff bfa5 	b.w	800ed1c <_puts_r>
 800edd2:	bf00      	nop
 800edd4:	2000003c 	.word	0x2000003c

0800edd8 <sniprintf>:
 800edd8:	b40c      	push	{r2, r3}
 800edda:	b530      	push	{r4, r5, lr}
 800eddc:	4b17      	ldr	r3, [pc, #92]	@ (800ee3c <sniprintf+0x64>)
 800edde:	1e0c      	subs	r4, r1, #0
 800ede0:	681d      	ldr	r5, [r3, #0]
 800ede2:	b09d      	sub	sp, #116	@ 0x74
 800ede4:	da08      	bge.n	800edf8 <sniprintf+0x20>
 800ede6:	238b      	movs	r3, #139	@ 0x8b
 800ede8:	602b      	str	r3, [r5, #0]
 800edea:	f04f 30ff 	mov.w	r0, #4294967295
 800edee:	b01d      	add	sp, #116	@ 0x74
 800edf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edf4:	b002      	add	sp, #8
 800edf6:	4770      	bx	lr
 800edf8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800edfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ee00:	bf14      	ite	ne
 800ee02:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ee06:	4623      	moveq	r3, r4
 800ee08:	9304      	str	r3, [sp, #16]
 800ee0a:	9307      	str	r3, [sp, #28]
 800ee0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ee10:	9002      	str	r0, [sp, #8]
 800ee12:	9006      	str	r0, [sp, #24]
 800ee14:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ee18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ee1a:	ab21      	add	r3, sp, #132	@ 0x84
 800ee1c:	a902      	add	r1, sp, #8
 800ee1e:	4628      	mov	r0, r5
 800ee20:	9301      	str	r3, [sp, #4]
 800ee22:	f001 fbf9 	bl	8010618 <_svfiprintf_r>
 800ee26:	1c43      	adds	r3, r0, #1
 800ee28:	bfbc      	itt	lt
 800ee2a:	238b      	movlt	r3, #139	@ 0x8b
 800ee2c:	602b      	strlt	r3, [r5, #0]
 800ee2e:	2c00      	cmp	r4, #0
 800ee30:	d0dd      	beq.n	800edee <sniprintf+0x16>
 800ee32:	9b02      	ldr	r3, [sp, #8]
 800ee34:	2200      	movs	r2, #0
 800ee36:	701a      	strb	r2, [r3, #0]
 800ee38:	e7d9      	b.n	800edee <sniprintf+0x16>
 800ee3a:	bf00      	nop
 800ee3c:	2000003c 	.word	0x2000003c

0800ee40 <__sread>:
 800ee40:	b510      	push	{r4, lr}
 800ee42:	460c      	mov	r4, r1
 800ee44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee48:	f000 f900 	bl	800f04c <_read_r>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	bfab      	itete	ge
 800ee50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee52:	89a3      	ldrhlt	r3, [r4, #12]
 800ee54:	181b      	addge	r3, r3, r0
 800ee56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee5a:	bfac      	ite	ge
 800ee5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee5e:	81a3      	strhlt	r3, [r4, #12]
 800ee60:	bd10      	pop	{r4, pc}

0800ee62 <__swrite>:
 800ee62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee66:	461f      	mov	r7, r3
 800ee68:	898b      	ldrh	r3, [r1, #12]
 800ee6a:	05db      	lsls	r3, r3, #23
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	4616      	mov	r6, r2
 800ee72:	d505      	bpl.n	800ee80 <__swrite+0x1e>
 800ee74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee78:	2302      	movs	r3, #2
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f000 f8d4 	bl	800f028 <_lseek_r>
 800ee80:	89a3      	ldrh	r3, [r4, #12]
 800ee82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee8a:	81a3      	strh	r3, [r4, #12]
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	463b      	mov	r3, r7
 800ee90:	4628      	mov	r0, r5
 800ee92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee96:	f000 b8fb 	b.w	800f090 <_write_r>

0800ee9a <__sseek>:
 800ee9a:	b510      	push	{r4, lr}
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea2:	f000 f8c1 	bl	800f028 <_lseek_r>
 800eea6:	1c43      	adds	r3, r0, #1
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	bf15      	itete	ne
 800eeac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eeae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eeb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eeb6:	81a3      	strheq	r3, [r4, #12]
 800eeb8:	bf18      	it	ne
 800eeba:	81a3      	strhne	r3, [r4, #12]
 800eebc:	bd10      	pop	{r4, pc}

0800eebe <__sclose>:
 800eebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec2:	f000 b8a1 	b.w	800f008 <_close_r>

0800eec6 <__swbuf_r>:
 800eec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec8:	460e      	mov	r6, r1
 800eeca:	4614      	mov	r4, r2
 800eecc:	4605      	mov	r5, r0
 800eece:	b118      	cbz	r0, 800eed8 <__swbuf_r+0x12>
 800eed0:	6a03      	ldr	r3, [r0, #32]
 800eed2:	b90b      	cbnz	r3, 800eed8 <__swbuf_r+0x12>
 800eed4:	f7ff feda 	bl	800ec8c <__sinit>
 800eed8:	69a3      	ldr	r3, [r4, #24]
 800eeda:	60a3      	str	r3, [r4, #8]
 800eedc:	89a3      	ldrh	r3, [r4, #12]
 800eede:	071a      	lsls	r2, r3, #28
 800eee0:	d501      	bpl.n	800eee6 <__swbuf_r+0x20>
 800eee2:	6923      	ldr	r3, [r4, #16]
 800eee4:	b943      	cbnz	r3, 800eef8 <__swbuf_r+0x32>
 800eee6:	4621      	mov	r1, r4
 800eee8:	4628      	mov	r0, r5
 800eeea:	f000 f82b 	bl	800ef44 <__swsetup_r>
 800eeee:	b118      	cbz	r0, 800eef8 <__swbuf_r+0x32>
 800eef0:	f04f 37ff 	mov.w	r7, #4294967295
 800eef4:	4638      	mov	r0, r7
 800eef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eef8:	6823      	ldr	r3, [r4, #0]
 800eefa:	6922      	ldr	r2, [r4, #16]
 800eefc:	1a98      	subs	r0, r3, r2
 800eefe:	6963      	ldr	r3, [r4, #20]
 800ef00:	b2f6      	uxtb	r6, r6
 800ef02:	4283      	cmp	r3, r0
 800ef04:	4637      	mov	r7, r6
 800ef06:	dc05      	bgt.n	800ef14 <__swbuf_r+0x4e>
 800ef08:	4621      	mov	r1, r4
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	f001 fe46 	bl	8010b9c <_fflush_r>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d1ed      	bne.n	800eef0 <__swbuf_r+0x2a>
 800ef14:	68a3      	ldr	r3, [r4, #8]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	60a3      	str	r3, [r4, #8]
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	1c5a      	adds	r2, r3, #1
 800ef1e:	6022      	str	r2, [r4, #0]
 800ef20:	701e      	strb	r6, [r3, #0]
 800ef22:	6962      	ldr	r2, [r4, #20]
 800ef24:	1c43      	adds	r3, r0, #1
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d004      	beq.n	800ef34 <__swbuf_r+0x6e>
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	07db      	lsls	r3, r3, #31
 800ef2e:	d5e1      	bpl.n	800eef4 <__swbuf_r+0x2e>
 800ef30:	2e0a      	cmp	r6, #10
 800ef32:	d1df      	bne.n	800eef4 <__swbuf_r+0x2e>
 800ef34:	4621      	mov	r1, r4
 800ef36:	4628      	mov	r0, r5
 800ef38:	f001 fe30 	bl	8010b9c <_fflush_r>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d0d9      	beq.n	800eef4 <__swbuf_r+0x2e>
 800ef40:	e7d6      	b.n	800eef0 <__swbuf_r+0x2a>
	...

0800ef44 <__swsetup_r>:
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	4b29      	ldr	r3, [pc, #164]	@ (800efec <__swsetup_r+0xa8>)
 800ef48:	4605      	mov	r5, r0
 800ef4a:	6818      	ldr	r0, [r3, #0]
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	b118      	cbz	r0, 800ef58 <__swsetup_r+0x14>
 800ef50:	6a03      	ldr	r3, [r0, #32]
 800ef52:	b90b      	cbnz	r3, 800ef58 <__swsetup_r+0x14>
 800ef54:	f7ff fe9a 	bl	800ec8c <__sinit>
 800ef58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef5c:	0719      	lsls	r1, r3, #28
 800ef5e:	d422      	bmi.n	800efa6 <__swsetup_r+0x62>
 800ef60:	06da      	lsls	r2, r3, #27
 800ef62:	d407      	bmi.n	800ef74 <__swsetup_r+0x30>
 800ef64:	2209      	movs	r2, #9
 800ef66:	602a      	str	r2, [r5, #0]
 800ef68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef6c:	81a3      	strh	r3, [r4, #12]
 800ef6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef72:	e033      	b.n	800efdc <__swsetup_r+0x98>
 800ef74:	0758      	lsls	r0, r3, #29
 800ef76:	d512      	bpl.n	800ef9e <__swsetup_r+0x5a>
 800ef78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef7a:	b141      	cbz	r1, 800ef8e <__swsetup_r+0x4a>
 800ef7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef80:	4299      	cmp	r1, r3
 800ef82:	d002      	beq.n	800ef8a <__swsetup_r+0x46>
 800ef84:	4628      	mov	r0, r5
 800ef86:	f000 ff1f 	bl	800fdc8 <_free_r>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef8e:	89a3      	ldrh	r3, [r4, #12]
 800ef90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef94:	81a3      	strh	r3, [r4, #12]
 800ef96:	2300      	movs	r3, #0
 800ef98:	6063      	str	r3, [r4, #4]
 800ef9a:	6923      	ldr	r3, [r4, #16]
 800ef9c:	6023      	str	r3, [r4, #0]
 800ef9e:	89a3      	ldrh	r3, [r4, #12]
 800efa0:	f043 0308 	orr.w	r3, r3, #8
 800efa4:	81a3      	strh	r3, [r4, #12]
 800efa6:	6923      	ldr	r3, [r4, #16]
 800efa8:	b94b      	cbnz	r3, 800efbe <__swsetup_r+0x7a>
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800efb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efb4:	d003      	beq.n	800efbe <__swsetup_r+0x7a>
 800efb6:	4621      	mov	r1, r4
 800efb8:	4628      	mov	r0, r5
 800efba:	f001 fe3d 	bl	8010c38 <__smakebuf_r>
 800efbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efc2:	f013 0201 	ands.w	r2, r3, #1
 800efc6:	d00a      	beq.n	800efde <__swsetup_r+0x9a>
 800efc8:	2200      	movs	r2, #0
 800efca:	60a2      	str	r2, [r4, #8]
 800efcc:	6962      	ldr	r2, [r4, #20]
 800efce:	4252      	negs	r2, r2
 800efd0:	61a2      	str	r2, [r4, #24]
 800efd2:	6922      	ldr	r2, [r4, #16]
 800efd4:	b942      	cbnz	r2, 800efe8 <__swsetup_r+0xa4>
 800efd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800efda:	d1c5      	bne.n	800ef68 <__swsetup_r+0x24>
 800efdc:	bd38      	pop	{r3, r4, r5, pc}
 800efde:	0799      	lsls	r1, r3, #30
 800efe0:	bf58      	it	pl
 800efe2:	6962      	ldrpl	r2, [r4, #20]
 800efe4:	60a2      	str	r2, [r4, #8]
 800efe6:	e7f4      	b.n	800efd2 <__swsetup_r+0x8e>
 800efe8:	2000      	movs	r0, #0
 800efea:	e7f7      	b.n	800efdc <__swsetup_r+0x98>
 800efec:	2000003c 	.word	0x2000003c

0800eff0 <memset>:
 800eff0:	4402      	add	r2, r0
 800eff2:	4603      	mov	r3, r0
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d100      	bne.n	800effa <memset+0xa>
 800eff8:	4770      	bx	lr
 800effa:	f803 1b01 	strb.w	r1, [r3], #1
 800effe:	e7f9      	b.n	800eff4 <memset+0x4>

0800f000 <_localeconv_r>:
 800f000:	4800      	ldr	r0, [pc, #0]	@ (800f004 <_localeconv_r+0x4>)
 800f002:	4770      	bx	lr
 800f004:	2000017c 	.word	0x2000017c

0800f008 <_close_r>:
 800f008:	b538      	push	{r3, r4, r5, lr}
 800f00a:	4d06      	ldr	r5, [pc, #24]	@ (800f024 <_close_r+0x1c>)
 800f00c:	2300      	movs	r3, #0
 800f00e:	4604      	mov	r4, r0
 800f010:	4608      	mov	r0, r1
 800f012:	602b      	str	r3, [r5, #0]
 800f014:	f7f2 fdce 	bl	8001bb4 <_close>
 800f018:	1c43      	adds	r3, r0, #1
 800f01a:	d102      	bne.n	800f022 <_close_r+0x1a>
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	b103      	cbz	r3, 800f022 <_close_r+0x1a>
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	bd38      	pop	{r3, r4, r5, pc}
 800f024:	20000ee8 	.word	0x20000ee8

0800f028 <_lseek_r>:
 800f028:	b538      	push	{r3, r4, r5, lr}
 800f02a:	4d07      	ldr	r5, [pc, #28]	@ (800f048 <_lseek_r+0x20>)
 800f02c:	4604      	mov	r4, r0
 800f02e:	4608      	mov	r0, r1
 800f030:	4611      	mov	r1, r2
 800f032:	2200      	movs	r2, #0
 800f034:	602a      	str	r2, [r5, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	f7f2 fde3 	bl	8001c02 <_lseek>
 800f03c:	1c43      	adds	r3, r0, #1
 800f03e:	d102      	bne.n	800f046 <_lseek_r+0x1e>
 800f040:	682b      	ldr	r3, [r5, #0]
 800f042:	b103      	cbz	r3, 800f046 <_lseek_r+0x1e>
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	bd38      	pop	{r3, r4, r5, pc}
 800f048:	20000ee8 	.word	0x20000ee8

0800f04c <_read_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	4d07      	ldr	r5, [pc, #28]	@ (800f06c <_read_r+0x20>)
 800f050:	4604      	mov	r4, r0
 800f052:	4608      	mov	r0, r1
 800f054:	4611      	mov	r1, r2
 800f056:	2200      	movs	r2, #0
 800f058:	602a      	str	r2, [r5, #0]
 800f05a:	461a      	mov	r2, r3
 800f05c:	f7f2 fd71 	bl	8001b42 <_read>
 800f060:	1c43      	adds	r3, r0, #1
 800f062:	d102      	bne.n	800f06a <_read_r+0x1e>
 800f064:	682b      	ldr	r3, [r5, #0]
 800f066:	b103      	cbz	r3, 800f06a <_read_r+0x1e>
 800f068:	6023      	str	r3, [r4, #0]
 800f06a:	bd38      	pop	{r3, r4, r5, pc}
 800f06c:	20000ee8 	.word	0x20000ee8

0800f070 <_sbrk_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	4d06      	ldr	r5, [pc, #24]	@ (800f08c <_sbrk_r+0x1c>)
 800f074:	2300      	movs	r3, #0
 800f076:	4604      	mov	r4, r0
 800f078:	4608      	mov	r0, r1
 800f07a:	602b      	str	r3, [r5, #0]
 800f07c:	f7f2 fdce 	bl	8001c1c <_sbrk>
 800f080:	1c43      	adds	r3, r0, #1
 800f082:	d102      	bne.n	800f08a <_sbrk_r+0x1a>
 800f084:	682b      	ldr	r3, [r5, #0]
 800f086:	b103      	cbz	r3, 800f08a <_sbrk_r+0x1a>
 800f088:	6023      	str	r3, [r4, #0]
 800f08a:	bd38      	pop	{r3, r4, r5, pc}
 800f08c:	20000ee8 	.word	0x20000ee8

0800f090 <_write_r>:
 800f090:	b538      	push	{r3, r4, r5, lr}
 800f092:	4d07      	ldr	r5, [pc, #28]	@ (800f0b0 <_write_r+0x20>)
 800f094:	4604      	mov	r4, r0
 800f096:	4608      	mov	r0, r1
 800f098:	4611      	mov	r1, r2
 800f09a:	2200      	movs	r2, #0
 800f09c:	602a      	str	r2, [r5, #0]
 800f09e:	461a      	mov	r2, r3
 800f0a0:	f7f2 fd6c 	bl	8001b7c <_write>
 800f0a4:	1c43      	adds	r3, r0, #1
 800f0a6:	d102      	bne.n	800f0ae <_write_r+0x1e>
 800f0a8:	682b      	ldr	r3, [r5, #0]
 800f0aa:	b103      	cbz	r3, 800f0ae <_write_r+0x1e>
 800f0ac:	6023      	str	r3, [r4, #0]
 800f0ae:	bd38      	pop	{r3, r4, r5, pc}
 800f0b0:	20000ee8 	.word	0x20000ee8

0800f0b4 <__errno>:
 800f0b4:	4b01      	ldr	r3, [pc, #4]	@ (800f0bc <__errno+0x8>)
 800f0b6:	6818      	ldr	r0, [r3, #0]
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	2000003c 	.word	0x2000003c

0800f0c0 <__libc_init_array>:
 800f0c0:	b570      	push	{r4, r5, r6, lr}
 800f0c2:	4d0d      	ldr	r5, [pc, #52]	@ (800f0f8 <__libc_init_array+0x38>)
 800f0c4:	4c0d      	ldr	r4, [pc, #52]	@ (800f0fc <__libc_init_array+0x3c>)
 800f0c6:	1b64      	subs	r4, r4, r5
 800f0c8:	10a4      	asrs	r4, r4, #2
 800f0ca:	2600      	movs	r6, #0
 800f0cc:	42a6      	cmp	r6, r4
 800f0ce:	d109      	bne.n	800f0e4 <__libc_init_array+0x24>
 800f0d0:	4d0b      	ldr	r5, [pc, #44]	@ (800f100 <__libc_init_array+0x40>)
 800f0d2:	4c0c      	ldr	r4, [pc, #48]	@ (800f104 <__libc_init_array+0x44>)
 800f0d4:	f002 f814 	bl	8011100 <_init>
 800f0d8:	1b64      	subs	r4, r4, r5
 800f0da:	10a4      	asrs	r4, r4, #2
 800f0dc:	2600      	movs	r6, #0
 800f0de:	42a6      	cmp	r6, r4
 800f0e0:	d105      	bne.n	800f0ee <__libc_init_array+0x2e>
 800f0e2:	bd70      	pop	{r4, r5, r6, pc}
 800f0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0e8:	4798      	blx	r3
 800f0ea:	3601      	adds	r6, #1
 800f0ec:	e7ee      	b.n	800f0cc <__libc_init_array+0xc>
 800f0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0f2:	4798      	blx	r3
 800f0f4:	3601      	adds	r6, #1
 800f0f6:	e7f2      	b.n	800f0de <__libc_init_array+0x1e>
 800f0f8:	08011660 	.word	0x08011660
 800f0fc:	08011660 	.word	0x08011660
 800f100:	08011660 	.word	0x08011660
 800f104:	08011664 	.word	0x08011664

0800f108 <__retarget_lock_init_recursive>:
 800f108:	4770      	bx	lr

0800f10a <__retarget_lock_acquire_recursive>:
 800f10a:	4770      	bx	lr

0800f10c <__retarget_lock_release_recursive>:
 800f10c:	4770      	bx	lr

0800f10e <memcpy>:
 800f10e:	440a      	add	r2, r1
 800f110:	4291      	cmp	r1, r2
 800f112:	f100 33ff 	add.w	r3, r0, #4294967295
 800f116:	d100      	bne.n	800f11a <memcpy+0xc>
 800f118:	4770      	bx	lr
 800f11a:	b510      	push	{r4, lr}
 800f11c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f120:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f124:	4291      	cmp	r1, r2
 800f126:	d1f9      	bne.n	800f11c <memcpy+0xe>
 800f128:	bd10      	pop	{r4, pc}

0800f12a <quorem>:
 800f12a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f12e:	6903      	ldr	r3, [r0, #16]
 800f130:	690c      	ldr	r4, [r1, #16]
 800f132:	42a3      	cmp	r3, r4
 800f134:	4607      	mov	r7, r0
 800f136:	db7e      	blt.n	800f236 <quorem+0x10c>
 800f138:	3c01      	subs	r4, #1
 800f13a:	f101 0814 	add.w	r8, r1, #20
 800f13e:	00a3      	lsls	r3, r4, #2
 800f140:	f100 0514 	add.w	r5, r0, #20
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f14a:	9301      	str	r3, [sp, #4]
 800f14c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f154:	3301      	adds	r3, #1
 800f156:	429a      	cmp	r2, r3
 800f158:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f15c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f160:	d32e      	bcc.n	800f1c0 <quorem+0x96>
 800f162:	f04f 0a00 	mov.w	sl, #0
 800f166:	46c4      	mov	ip, r8
 800f168:	46ae      	mov	lr, r5
 800f16a:	46d3      	mov	fp, sl
 800f16c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f170:	b298      	uxth	r0, r3
 800f172:	fb06 a000 	mla	r0, r6, r0, sl
 800f176:	0c02      	lsrs	r2, r0, #16
 800f178:	0c1b      	lsrs	r3, r3, #16
 800f17a:	fb06 2303 	mla	r3, r6, r3, r2
 800f17e:	f8de 2000 	ldr.w	r2, [lr]
 800f182:	b280      	uxth	r0, r0
 800f184:	b292      	uxth	r2, r2
 800f186:	1a12      	subs	r2, r2, r0
 800f188:	445a      	add	r2, fp
 800f18a:	f8de 0000 	ldr.w	r0, [lr]
 800f18e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f192:	b29b      	uxth	r3, r3
 800f194:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f198:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f19c:	b292      	uxth	r2, r2
 800f19e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f1a2:	45e1      	cmp	r9, ip
 800f1a4:	f84e 2b04 	str.w	r2, [lr], #4
 800f1a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f1ac:	d2de      	bcs.n	800f16c <quorem+0x42>
 800f1ae:	9b00      	ldr	r3, [sp, #0]
 800f1b0:	58eb      	ldr	r3, [r5, r3]
 800f1b2:	b92b      	cbnz	r3, 800f1c0 <quorem+0x96>
 800f1b4:	9b01      	ldr	r3, [sp, #4]
 800f1b6:	3b04      	subs	r3, #4
 800f1b8:	429d      	cmp	r5, r3
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	d32f      	bcc.n	800f21e <quorem+0xf4>
 800f1be:	613c      	str	r4, [r7, #16]
 800f1c0:	4638      	mov	r0, r7
 800f1c2:	f001 f8c5 	bl	8010350 <__mcmp>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	db25      	blt.n	800f216 <quorem+0xec>
 800f1ca:	4629      	mov	r1, r5
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	f858 2b04 	ldr.w	r2, [r8], #4
 800f1d2:	f8d1 c000 	ldr.w	ip, [r1]
 800f1d6:	fa1f fe82 	uxth.w	lr, r2
 800f1da:	fa1f f38c 	uxth.w	r3, ip
 800f1de:	eba3 030e 	sub.w	r3, r3, lr
 800f1e2:	4403      	add	r3, r0
 800f1e4:	0c12      	lsrs	r2, r2, #16
 800f1e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f1ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1f4:	45c1      	cmp	r9, r8
 800f1f6:	f841 3b04 	str.w	r3, [r1], #4
 800f1fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f1fe:	d2e6      	bcs.n	800f1ce <quorem+0xa4>
 800f200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f208:	b922      	cbnz	r2, 800f214 <quorem+0xea>
 800f20a:	3b04      	subs	r3, #4
 800f20c:	429d      	cmp	r5, r3
 800f20e:	461a      	mov	r2, r3
 800f210:	d30b      	bcc.n	800f22a <quorem+0x100>
 800f212:	613c      	str	r4, [r7, #16]
 800f214:	3601      	adds	r6, #1
 800f216:	4630      	mov	r0, r6
 800f218:	b003      	add	sp, #12
 800f21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21e:	6812      	ldr	r2, [r2, #0]
 800f220:	3b04      	subs	r3, #4
 800f222:	2a00      	cmp	r2, #0
 800f224:	d1cb      	bne.n	800f1be <quorem+0x94>
 800f226:	3c01      	subs	r4, #1
 800f228:	e7c6      	b.n	800f1b8 <quorem+0x8e>
 800f22a:	6812      	ldr	r2, [r2, #0]
 800f22c:	3b04      	subs	r3, #4
 800f22e:	2a00      	cmp	r2, #0
 800f230:	d1ef      	bne.n	800f212 <quorem+0xe8>
 800f232:	3c01      	subs	r4, #1
 800f234:	e7ea      	b.n	800f20c <quorem+0xe2>
 800f236:	2000      	movs	r0, #0
 800f238:	e7ee      	b.n	800f218 <quorem+0xee>
 800f23a:	0000      	movs	r0, r0
 800f23c:	0000      	movs	r0, r0
	...

0800f240 <_dtoa_r>:
 800f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f244:	69c7      	ldr	r7, [r0, #28]
 800f246:	b099      	sub	sp, #100	@ 0x64
 800f248:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f24c:	ec55 4b10 	vmov	r4, r5, d0
 800f250:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f252:	9109      	str	r1, [sp, #36]	@ 0x24
 800f254:	4683      	mov	fp, r0
 800f256:	920e      	str	r2, [sp, #56]	@ 0x38
 800f258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f25a:	b97f      	cbnz	r7, 800f27c <_dtoa_r+0x3c>
 800f25c:	2010      	movs	r0, #16
 800f25e:	f7fe ff73 	bl	800e148 <malloc>
 800f262:	4602      	mov	r2, r0
 800f264:	f8cb 001c 	str.w	r0, [fp, #28]
 800f268:	b920      	cbnz	r0, 800f274 <_dtoa_r+0x34>
 800f26a:	4ba7      	ldr	r3, [pc, #668]	@ (800f508 <_dtoa_r+0x2c8>)
 800f26c:	21ef      	movs	r1, #239	@ 0xef
 800f26e:	48a7      	ldr	r0, [pc, #668]	@ (800f50c <_dtoa_r+0x2cc>)
 800f270:	f001 fd5a 	bl	8010d28 <__assert_func>
 800f274:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f278:	6007      	str	r7, [r0, #0]
 800f27a:	60c7      	str	r7, [r0, #12]
 800f27c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f280:	6819      	ldr	r1, [r3, #0]
 800f282:	b159      	cbz	r1, 800f29c <_dtoa_r+0x5c>
 800f284:	685a      	ldr	r2, [r3, #4]
 800f286:	604a      	str	r2, [r1, #4]
 800f288:	2301      	movs	r3, #1
 800f28a:	4093      	lsls	r3, r2
 800f28c:	608b      	str	r3, [r1, #8]
 800f28e:	4658      	mov	r0, fp
 800f290:	f000 fe24 	bl	800fedc <_Bfree>
 800f294:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f298:	2200      	movs	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]
 800f29c:	1e2b      	subs	r3, r5, #0
 800f29e:	bfb9      	ittee	lt
 800f2a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f2a4:	9303      	strlt	r3, [sp, #12]
 800f2a6:	2300      	movge	r3, #0
 800f2a8:	6033      	strge	r3, [r6, #0]
 800f2aa:	9f03      	ldr	r7, [sp, #12]
 800f2ac:	4b98      	ldr	r3, [pc, #608]	@ (800f510 <_dtoa_r+0x2d0>)
 800f2ae:	bfbc      	itt	lt
 800f2b0:	2201      	movlt	r2, #1
 800f2b2:	6032      	strlt	r2, [r6, #0]
 800f2b4:	43bb      	bics	r3, r7
 800f2b6:	d112      	bne.n	800f2de <_dtoa_r+0x9e>
 800f2b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f2ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f2be:	6013      	str	r3, [r2, #0]
 800f2c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f2c4:	4323      	orrs	r3, r4
 800f2c6:	f000 854d 	beq.w	800fd64 <_dtoa_r+0xb24>
 800f2ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f2cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f524 <_dtoa_r+0x2e4>
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 854f 	beq.w	800fd74 <_dtoa_r+0xb34>
 800f2d6:	f10a 0303 	add.w	r3, sl, #3
 800f2da:	f000 bd49 	b.w	800fd70 <_dtoa_r+0xb30>
 800f2de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	ec51 0b17 	vmov	r0, r1, d7
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f2ee:	f7f1 fbf3 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2f2:	4680      	mov	r8, r0
 800f2f4:	b158      	cbz	r0, 800f30e <_dtoa_r+0xce>
 800f2f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	6013      	str	r3, [r2, #0]
 800f2fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f2fe:	b113      	cbz	r3, 800f306 <_dtoa_r+0xc6>
 800f300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f302:	4b84      	ldr	r3, [pc, #528]	@ (800f514 <_dtoa_r+0x2d4>)
 800f304:	6013      	str	r3, [r2, #0]
 800f306:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f528 <_dtoa_r+0x2e8>
 800f30a:	f000 bd33 	b.w	800fd74 <_dtoa_r+0xb34>
 800f30e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f312:	aa16      	add	r2, sp, #88	@ 0x58
 800f314:	a917      	add	r1, sp, #92	@ 0x5c
 800f316:	4658      	mov	r0, fp
 800f318:	f001 f8ca 	bl	80104b0 <__d2b>
 800f31c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f320:	4681      	mov	r9, r0
 800f322:	2e00      	cmp	r6, #0
 800f324:	d077      	beq.n	800f416 <_dtoa_r+0x1d6>
 800f326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f328:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f32c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f334:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f338:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f33c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f340:	4619      	mov	r1, r3
 800f342:	2200      	movs	r2, #0
 800f344:	4b74      	ldr	r3, [pc, #464]	@ (800f518 <_dtoa_r+0x2d8>)
 800f346:	f7f0 ffa7 	bl	8000298 <__aeabi_dsub>
 800f34a:	a369      	add	r3, pc, #420	@ (adr r3, 800f4f0 <_dtoa_r+0x2b0>)
 800f34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f350:	f7f1 f95a 	bl	8000608 <__aeabi_dmul>
 800f354:	a368      	add	r3, pc, #416	@ (adr r3, 800f4f8 <_dtoa_r+0x2b8>)
 800f356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35a:	f7f0 ff9f 	bl	800029c <__adddf3>
 800f35e:	4604      	mov	r4, r0
 800f360:	4630      	mov	r0, r6
 800f362:	460d      	mov	r5, r1
 800f364:	f7f1 f8e6 	bl	8000534 <__aeabi_i2d>
 800f368:	a365      	add	r3, pc, #404	@ (adr r3, 800f500 <_dtoa_r+0x2c0>)
 800f36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36e:	f7f1 f94b 	bl	8000608 <__aeabi_dmul>
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	4620      	mov	r0, r4
 800f378:	4629      	mov	r1, r5
 800f37a:	f7f0 ff8f 	bl	800029c <__adddf3>
 800f37e:	4604      	mov	r4, r0
 800f380:	460d      	mov	r5, r1
 800f382:	f7f1 fbf1 	bl	8000b68 <__aeabi_d2iz>
 800f386:	2200      	movs	r2, #0
 800f388:	4607      	mov	r7, r0
 800f38a:	2300      	movs	r3, #0
 800f38c:	4620      	mov	r0, r4
 800f38e:	4629      	mov	r1, r5
 800f390:	f7f1 fbac 	bl	8000aec <__aeabi_dcmplt>
 800f394:	b140      	cbz	r0, 800f3a8 <_dtoa_r+0x168>
 800f396:	4638      	mov	r0, r7
 800f398:	f7f1 f8cc 	bl	8000534 <__aeabi_i2d>
 800f39c:	4622      	mov	r2, r4
 800f39e:	462b      	mov	r3, r5
 800f3a0:	f7f1 fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f3a4:	b900      	cbnz	r0, 800f3a8 <_dtoa_r+0x168>
 800f3a6:	3f01      	subs	r7, #1
 800f3a8:	2f16      	cmp	r7, #22
 800f3aa:	d851      	bhi.n	800f450 <_dtoa_r+0x210>
 800f3ac:	4b5b      	ldr	r3, [pc, #364]	@ (800f51c <_dtoa_r+0x2dc>)
 800f3ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3ba:	f7f1 fb97 	bl	8000aec <__aeabi_dcmplt>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d048      	beq.n	800f454 <_dtoa_r+0x214>
 800f3c2:	3f01      	subs	r7, #1
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800f3c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f3ca:	1b9b      	subs	r3, r3, r6
 800f3cc:	1e5a      	subs	r2, r3, #1
 800f3ce:	bf44      	itt	mi
 800f3d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800f3d4:	2300      	movmi	r3, #0
 800f3d6:	9208      	str	r2, [sp, #32]
 800f3d8:	bf54      	ite	pl
 800f3da:	f04f 0800 	movpl.w	r8, #0
 800f3de:	9308      	strmi	r3, [sp, #32]
 800f3e0:	2f00      	cmp	r7, #0
 800f3e2:	db39      	blt.n	800f458 <_dtoa_r+0x218>
 800f3e4:	9b08      	ldr	r3, [sp, #32]
 800f3e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f3e8:	443b      	add	r3, r7
 800f3ea:	9308      	str	r3, [sp, #32]
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3f2:	2b09      	cmp	r3, #9
 800f3f4:	d864      	bhi.n	800f4c0 <_dtoa_r+0x280>
 800f3f6:	2b05      	cmp	r3, #5
 800f3f8:	bfc4      	itt	gt
 800f3fa:	3b04      	subgt	r3, #4
 800f3fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f400:	f1a3 0302 	sub.w	r3, r3, #2
 800f404:	bfcc      	ite	gt
 800f406:	2400      	movgt	r4, #0
 800f408:	2401      	movle	r4, #1
 800f40a:	2b03      	cmp	r3, #3
 800f40c:	d863      	bhi.n	800f4d6 <_dtoa_r+0x296>
 800f40e:	e8df f003 	tbb	[pc, r3]
 800f412:	372a      	.short	0x372a
 800f414:	5535      	.short	0x5535
 800f416:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f41a:	441e      	add	r6, r3
 800f41c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f420:	2b20      	cmp	r3, #32
 800f422:	bfc1      	itttt	gt
 800f424:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f428:	409f      	lslgt	r7, r3
 800f42a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f42e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f432:	bfd6      	itet	le
 800f434:	f1c3 0320 	rsble	r3, r3, #32
 800f438:	ea47 0003 	orrgt.w	r0, r7, r3
 800f43c:	fa04 f003 	lslle.w	r0, r4, r3
 800f440:	f7f1 f868 	bl	8000514 <__aeabi_ui2d>
 800f444:	2201      	movs	r2, #1
 800f446:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f44a:	3e01      	subs	r6, #1
 800f44c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f44e:	e777      	b.n	800f340 <_dtoa_r+0x100>
 800f450:	2301      	movs	r3, #1
 800f452:	e7b8      	b.n	800f3c6 <_dtoa_r+0x186>
 800f454:	9012      	str	r0, [sp, #72]	@ 0x48
 800f456:	e7b7      	b.n	800f3c8 <_dtoa_r+0x188>
 800f458:	427b      	negs	r3, r7
 800f45a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f45c:	2300      	movs	r3, #0
 800f45e:	eba8 0807 	sub.w	r8, r8, r7
 800f462:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f464:	e7c4      	b.n	800f3f0 <_dtoa_r+0x1b0>
 800f466:	2300      	movs	r3, #0
 800f468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	dc35      	bgt.n	800f4dc <_dtoa_r+0x29c>
 800f470:	2301      	movs	r3, #1
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	9307      	str	r3, [sp, #28]
 800f476:	461a      	mov	r2, r3
 800f478:	920e      	str	r2, [sp, #56]	@ 0x38
 800f47a:	e00b      	b.n	800f494 <_dtoa_r+0x254>
 800f47c:	2301      	movs	r3, #1
 800f47e:	e7f3      	b.n	800f468 <_dtoa_r+0x228>
 800f480:	2300      	movs	r3, #0
 800f482:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f486:	18fb      	adds	r3, r7, r3
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	3301      	adds	r3, #1
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	9307      	str	r3, [sp, #28]
 800f490:	bfb8      	it	lt
 800f492:	2301      	movlt	r3, #1
 800f494:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f498:	2100      	movs	r1, #0
 800f49a:	2204      	movs	r2, #4
 800f49c:	f102 0514 	add.w	r5, r2, #20
 800f4a0:	429d      	cmp	r5, r3
 800f4a2:	d91f      	bls.n	800f4e4 <_dtoa_r+0x2a4>
 800f4a4:	6041      	str	r1, [r0, #4]
 800f4a6:	4658      	mov	r0, fp
 800f4a8:	f000 fcd8 	bl	800fe5c <_Balloc>
 800f4ac:	4682      	mov	sl, r0
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d13c      	bne.n	800f52c <_dtoa_r+0x2ec>
 800f4b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f520 <_dtoa_r+0x2e0>)
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f4ba:	e6d8      	b.n	800f26e <_dtoa_r+0x2e>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e7e0      	b.n	800f482 <_dtoa_r+0x242>
 800f4c0:	2401      	movs	r4, #1
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	9307      	str	r3, [sp, #28]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	2312      	movs	r3, #18
 800f4d4:	e7d0      	b.n	800f478 <_dtoa_r+0x238>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4da:	e7f5      	b.n	800f4c8 <_dtoa_r+0x288>
 800f4dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	9307      	str	r3, [sp, #28]
 800f4e2:	e7d7      	b.n	800f494 <_dtoa_r+0x254>
 800f4e4:	3101      	adds	r1, #1
 800f4e6:	0052      	lsls	r2, r2, #1
 800f4e8:	e7d8      	b.n	800f49c <_dtoa_r+0x25c>
 800f4ea:	bf00      	nop
 800f4ec:	f3af 8000 	nop.w
 800f4f0:	636f4361 	.word	0x636f4361
 800f4f4:	3fd287a7 	.word	0x3fd287a7
 800f4f8:	8b60c8b3 	.word	0x8b60c8b3
 800f4fc:	3fc68a28 	.word	0x3fc68a28
 800f500:	509f79fb 	.word	0x509f79fb
 800f504:	3fd34413 	.word	0x3fd34413
 800f508:	08011325 	.word	0x08011325
 800f50c:	0801133c 	.word	0x0801133c
 800f510:	7ff00000 	.word	0x7ff00000
 800f514:	080112f5 	.word	0x080112f5
 800f518:	3ff80000 	.word	0x3ff80000
 800f51c:	08011438 	.word	0x08011438
 800f520:	08011394 	.word	0x08011394
 800f524:	08011321 	.word	0x08011321
 800f528:	080112f4 	.word	0x080112f4
 800f52c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f530:	6018      	str	r0, [r3, #0]
 800f532:	9b07      	ldr	r3, [sp, #28]
 800f534:	2b0e      	cmp	r3, #14
 800f536:	f200 80a4 	bhi.w	800f682 <_dtoa_r+0x442>
 800f53a:	2c00      	cmp	r4, #0
 800f53c:	f000 80a1 	beq.w	800f682 <_dtoa_r+0x442>
 800f540:	2f00      	cmp	r7, #0
 800f542:	dd33      	ble.n	800f5ac <_dtoa_r+0x36c>
 800f544:	4bad      	ldr	r3, [pc, #692]	@ (800f7fc <_dtoa_r+0x5bc>)
 800f546:	f007 020f 	and.w	r2, r7, #15
 800f54a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f54e:	ed93 7b00 	vldr	d7, [r3]
 800f552:	05f8      	lsls	r0, r7, #23
 800f554:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f558:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f55c:	d516      	bpl.n	800f58c <_dtoa_r+0x34c>
 800f55e:	4ba8      	ldr	r3, [pc, #672]	@ (800f800 <_dtoa_r+0x5c0>)
 800f560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f568:	f7f1 f978 	bl	800085c <__aeabi_ddiv>
 800f56c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f570:	f004 040f 	and.w	r4, r4, #15
 800f574:	2603      	movs	r6, #3
 800f576:	4da2      	ldr	r5, [pc, #648]	@ (800f800 <_dtoa_r+0x5c0>)
 800f578:	b954      	cbnz	r4, 800f590 <_dtoa_r+0x350>
 800f57a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f582:	f7f1 f96b 	bl	800085c <__aeabi_ddiv>
 800f586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f58a:	e028      	b.n	800f5de <_dtoa_r+0x39e>
 800f58c:	2602      	movs	r6, #2
 800f58e:	e7f2      	b.n	800f576 <_dtoa_r+0x336>
 800f590:	07e1      	lsls	r1, r4, #31
 800f592:	d508      	bpl.n	800f5a6 <_dtoa_r+0x366>
 800f594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f598:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f59c:	f7f1 f834 	bl	8000608 <__aeabi_dmul>
 800f5a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5a4:	3601      	adds	r6, #1
 800f5a6:	1064      	asrs	r4, r4, #1
 800f5a8:	3508      	adds	r5, #8
 800f5aa:	e7e5      	b.n	800f578 <_dtoa_r+0x338>
 800f5ac:	f000 80d2 	beq.w	800f754 <_dtoa_r+0x514>
 800f5b0:	427c      	negs	r4, r7
 800f5b2:	4b92      	ldr	r3, [pc, #584]	@ (800f7fc <_dtoa_r+0x5bc>)
 800f5b4:	4d92      	ldr	r5, [pc, #584]	@ (800f800 <_dtoa_r+0x5c0>)
 800f5b6:	f004 020f 	and.w	r2, r4, #15
 800f5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5c6:	f7f1 f81f 	bl	8000608 <__aeabi_dmul>
 800f5ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5ce:	1124      	asrs	r4, r4, #4
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	2602      	movs	r6, #2
 800f5d4:	2c00      	cmp	r4, #0
 800f5d6:	f040 80b2 	bne.w	800f73e <_dtoa_r+0x4fe>
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1d3      	bne.n	800f586 <_dtoa_r+0x346>
 800f5de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f5e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f000 80b7 	beq.w	800f758 <_dtoa_r+0x518>
 800f5ea:	4b86      	ldr	r3, [pc, #536]	@ (800f804 <_dtoa_r+0x5c4>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	f7f1 fa7b 	bl	8000aec <__aeabi_dcmplt>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f000 80ae 	beq.w	800f758 <_dtoa_r+0x518>
 800f5fc:	9b07      	ldr	r3, [sp, #28]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f000 80aa 	beq.w	800f758 <_dtoa_r+0x518>
 800f604:	9b00      	ldr	r3, [sp, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	dd37      	ble.n	800f67a <_dtoa_r+0x43a>
 800f60a:	1e7b      	subs	r3, r7, #1
 800f60c:	9304      	str	r3, [sp, #16]
 800f60e:	4620      	mov	r0, r4
 800f610:	4b7d      	ldr	r3, [pc, #500]	@ (800f808 <_dtoa_r+0x5c8>)
 800f612:	2200      	movs	r2, #0
 800f614:	4629      	mov	r1, r5
 800f616:	f7f0 fff7 	bl	8000608 <__aeabi_dmul>
 800f61a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f61e:	9c00      	ldr	r4, [sp, #0]
 800f620:	3601      	adds	r6, #1
 800f622:	4630      	mov	r0, r6
 800f624:	f7f0 ff86 	bl	8000534 <__aeabi_i2d>
 800f628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f62c:	f7f0 ffec 	bl	8000608 <__aeabi_dmul>
 800f630:	4b76      	ldr	r3, [pc, #472]	@ (800f80c <_dtoa_r+0x5cc>)
 800f632:	2200      	movs	r2, #0
 800f634:	f7f0 fe32 	bl	800029c <__adddf3>
 800f638:	4605      	mov	r5, r0
 800f63a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f63e:	2c00      	cmp	r4, #0
 800f640:	f040 808d 	bne.w	800f75e <_dtoa_r+0x51e>
 800f644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f648:	4b71      	ldr	r3, [pc, #452]	@ (800f810 <_dtoa_r+0x5d0>)
 800f64a:	2200      	movs	r2, #0
 800f64c:	f7f0 fe24 	bl	8000298 <__aeabi_dsub>
 800f650:	4602      	mov	r2, r0
 800f652:	460b      	mov	r3, r1
 800f654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f658:	462a      	mov	r2, r5
 800f65a:	4633      	mov	r3, r6
 800f65c:	f7f1 fa64 	bl	8000b28 <__aeabi_dcmpgt>
 800f660:	2800      	cmp	r0, #0
 800f662:	f040 828b 	bne.w	800fb7c <_dtoa_r+0x93c>
 800f666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f66a:	462a      	mov	r2, r5
 800f66c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f670:	f7f1 fa3c 	bl	8000aec <__aeabi_dcmplt>
 800f674:	2800      	cmp	r0, #0
 800f676:	f040 8128 	bne.w	800f8ca <_dtoa_r+0x68a>
 800f67a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f67e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f684:	2b00      	cmp	r3, #0
 800f686:	f2c0 815a 	blt.w	800f93e <_dtoa_r+0x6fe>
 800f68a:	2f0e      	cmp	r7, #14
 800f68c:	f300 8157 	bgt.w	800f93e <_dtoa_r+0x6fe>
 800f690:	4b5a      	ldr	r3, [pc, #360]	@ (800f7fc <_dtoa_r+0x5bc>)
 800f692:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f696:	ed93 7b00 	vldr	d7, [r3]
 800f69a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	ed8d 7b00 	vstr	d7, [sp]
 800f6a2:	da03      	bge.n	800f6ac <_dtoa_r+0x46c>
 800f6a4:	9b07      	ldr	r3, [sp, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f340 8101 	ble.w	800f8ae <_dtoa_r+0x66e>
 800f6ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f6b0:	4656      	mov	r6, sl
 800f6b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	4629      	mov	r1, r5
 800f6ba:	f7f1 f8cf 	bl	800085c <__aeabi_ddiv>
 800f6be:	f7f1 fa53 	bl	8000b68 <__aeabi_d2iz>
 800f6c2:	4680      	mov	r8, r0
 800f6c4:	f7f0 ff36 	bl	8000534 <__aeabi_i2d>
 800f6c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6cc:	f7f0 ff9c 	bl	8000608 <__aeabi_dmul>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f6dc:	f7f0 fddc 	bl	8000298 <__aeabi_dsub>
 800f6e0:	f806 4b01 	strb.w	r4, [r6], #1
 800f6e4:	9d07      	ldr	r5, [sp, #28]
 800f6e6:	eba6 040a 	sub.w	r4, r6, sl
 800f6ea:	42a5      	cmp	r5, r4
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	f040 8117 	bne.w	800f922 <_dtoa_r+0x6e2>
 800f6f4:	f7f0 fdd2 	bl	800029c <__adddf3>
 800f6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	460d      	mov	r5, r1
 800f700:	f7f1 fa12 	bl	8000b28 <__aeabi_dcmpgt>
 800f704:	2800      	cmp	r0, #0
 800f706:	f040 80f9 	bne.w	800f8fc <_dtoa_r+0x6bc>
 800f70a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f70e:	4620      	mov	r0, r4
 800f710:	4629      	mov	r1, r5
 800f712:	f7f1 f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 800f716:	b118      	cbz	r0, 800f720 <_dtoa_r+0x4e0>
 800f718:	f018 0f01 	tst.w	r8, #1
 800f71c:	f040 80ee 	bne.w	800f8fc <_dtoa_r+0x6bc>
 800f720:	4649      	mov	r1, r9
 800f722:	4658      	mov	r0, fp
 800f724:	f000 fbda 	bl	800fedc <_Bfree>
 800f728:	2300      	movs	r3, #0
 800f72a:	7033      	strb	r3, [r6, #0]
 800f72c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f72e:	3701      	adds	r7, #1
 800f730:	601f      	str	r7, [r3, #0]
 800f732:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f734:	2b00      	cmp	r3, #0
 800f736:	f000 831d 	beq.w	800fd74 <_dtoa_r+0xb34>
 800f73a:	601e      	str	r6, [r3, #0]
 800f73c:	e31a      	b.n	800fd74 <_dtoa_r+0xb34>
 800f73e:	07e2      	lsls	r2, r4, #31
 800f740:	d505      	bpl.n	800f74e <_dtoa_r+0x50e>
 800f742:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f746:	f7f0 ff5f 	bl	8000608 <__aeabi_dmul>
 800f74a:	3601      	adds	r6, #1
 800f74c:	2301      	movs	r3, #1
 800f74e:	1064      	asrs	r4, r4, #1
 800f750:	3508      	adds	r5, #8
 800f752:	e73f      	b.n	800f5d4 <_dtoa_r+0x394>
 800f754:	2602      	movs	r6, #2
 800f756:	e742      	b.n	800f5de <_dtoa_r+0x39e>
 800f758:	9c07      	ldr	r4, [sp, #28]
 800f75a:	9704      	str	r7, [sp, #16]
 800f75c:	e761      	b.n	800f622 <_dtoa_r+0x3e2>
 800f75e:	4b27      	ldr	r3, [pc, #156]	@ (800f7fc <_dtoa_r+0x5bc>)
 800f760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f766:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f76a:	4454      	add	r4, sl
 800f76c:	2900      	cmp	r1, #0
 800f76e:	d053      	beq.n	800f818 <_dtoa_r+0x5d8>
 800f770:	4928      	ldr	r1, [pc, #160]	@ (800f814 <_dtoa_r+0x5d4>)
 800f772:	2000      	movs	r0, #0
 800f774:	f7f1 f872 	bl	800085c <__aeabi_ddiv>
 800f778:	4633      	mov	r3, r6
 800f77a:	462a      	mov	r2, r5
 800f77c:	f7f0 fd8c 	bl	8000298 <__aeabi_dsub>
 800f780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f784:	4656      	mov	r6, sl
 800f786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f78a:	f7f1 f9ed 	bl	8000b68 <__aeabi_d2iz>
 800f78e:	4605      	mov	r5, r0
 800f790:	f7f0 fed0 	bl	8000534 <__aeabi_i2d>
 800f794:	4602      	mov	r2, r0
 800f796:	460b      	mov	r3, r1
 800f798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f79c:	f7f0 fd7c 	bl	8000298 <__aeabi_dsub>
 800f7a0:	3530      	adds	r5, #48	@ 0x30
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f7aa:	f806 5b01 	strb.w	r5, [r6], #1
 800f7ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f7b2:	f7f1 f99b 	bl	8000aec <__aeabi_dcmplt>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d171      	bne.n	800f89e <_dtoa_r+0x65e>
 800f7ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7be:	4911      	ldr	r1, [pc, #68]	@ (800f804 <_dtoa_r+0x5c4>)
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	f7f0 fd69 	bl	8000298 <__aeabi_dsub>
 800f7c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f7ca:	f7f1 f98f 	bl	8000aec <__aeabi_dcmplt>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	f040 8095 	bne.w	800f8fe <_dtoa_r+0x6be>
 800f7d4:	42a6      	cmp	r6, r4
 800f7d6:	f43f af50 	beq.w	800f67a <_dtoa_r+0x43a>
 800f7da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f7de:	4b0a      	ldr	r3, [pc, #40]	@ (800f808 <_dtoa_r+0x5c8>)
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f7f0 ff11 	bl	8000608 <__aeabi_dmul>
 800f7e6:	4b08      	ldr	r3, [pc, #32]	@ (800f808 <_dtoa_r+0x5c8>)
 800f7e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7f2:	f7f0 ff09 	bl	8000608 <__aeabi_dmul>
 800f7f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7fa:	e7c4      	b.n	800f786 <_dtoa_r+0x546>
 800f7fc:	08011438 	.word	0x08011438
 800f800:	08011410 	.word	0x08011410
 800f804:	3ff00000 	.word	0x3ff00000
 800f808:	40240000 	.word	0x40240000
 800f80c:	401c0000 	.word	0x401c0000
 800f810:	40140000 	.word	0x40140000
 800f814:	3fe00000 	.word	0x3fe00000
 800f818:	4631      	mov	r1, r6
 800f81a:	4628      	mov	r0, r5
 800f81c:	f7f0 fef4 	bl	8000608 <__aeabi_dmul>
 800f820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f824:	9415      	str	r4, [sp, #84]	@ 0x54
 800f826:	4656      	mov	r6, sl
 800f828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f82c:	f7f1 f99c 	bl	8000b68 <__aeabi_d2iz>
 800f830:	4605      	mov	r5, r0
 800f832:	f7f0 fe7f 	bl	8000534 <__aeabi_i2d>
 800f836:	4602      	mov	r2, r0
 800f838:	460b      	mov	r3, r1
 800f83a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f83e:	f7f0 fd2b 	bl	8000298 <__aeabi_dsub>
 800f842:	3530      	adds	r5, #48	@ 0x30
 800f844:	f806 5b01 	strb.w	r5, [r6], #1
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	42a6      	cmp	r6, r4
 800f84e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f852:	f04f 0200 	mov.w	r2, #0
 800f856:	d124      	bne.n	800f8a2 <_dtoa_r+0x662>
 800f858:	4bac      	ldr	r3, [pc, #688]	@ (800fb0c <_dtoa_r+0x8cc>)
 800f85a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f85e:	f7f0 fd1d 	bl	800029c <__adddf3>
 800f862:	4602      	mov	r2, r0
 800f864:	460b      	mov	r3, r1
 800f866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f86a:	f7f1 f95d 	bl	8000b28 <__aeabi_dcmpgt>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d145      	bne.n	800f8fe <_dtoa_r+0x6be>
 800f872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f876:	49a5      	ldr	r1, [pc, #660]	@ (800fb0c <_dtoa_r+0x8cc>)
 800f878:	2000      	movs	r0, #0
 800f87a:	f7f0 fd0d 	bl	8000298 <__aeabi_dsub>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f886:	f7f1 f931 	bl	8000aec <__aeabi_dcmplt>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	f43f aef5 	beq.w	800f67a <_dtoa_r+0x43a>
 800f890:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f892:	1e73      	subs	r3, r6, #1
 800f894:	9315      	str	r3, [sp, #84]	@ 0x54
 800f896:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f89a:	2b30      	cmp	r3, #48	@ 0x30
 800f89c:	d0f8      	beq.n	800f890 <_dtoa_r+0x650>
 800f89e:	9f04      	ldr	r7, [sp, #16]
 800f8a0:	e73e      	b.n	800f720 <_dtoa_r+0x4e0>
 800f8a2:	4b9b      	ldr	r3, [pc, #620]	@ (800fb10 <_dtoa_r+0x8d0>)
 800f8a4:	f7f0 feb0 	bl	8000608 <__aeabi_dmul>
 800f8a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8ac:	e7bc      	b.n	800f828 <_dtoa_r+0x5e8>
 800f8ae:	d10c      	bne.n	800f8ca <_dtoa_r+0x68a>
 800f8b0:	4b98      	ldr	r3, [pc, #608]	@ (800fb14 <_dtoa_r+0x8d4>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8b8:	f7f0 fea6 	bl	8000608 <__aeabi_dmul>
 800f8bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8c0:	f7f1 f928 	bl	8000b14 <__aeabi_dcmpge>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	f000 8157 	beq.w	800fb78 <_dtoa_r+0x938>
 800f8ca:	2400      	movs	r4, #0
 800f8cc:	4625      	mov	r5, r4
 800f8ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8d0:	43db      	mvns	r3, r3
 800f8d2:	9304      	str	r3, [sp, #16]
 800f8d4:	4656      	mov	r6, sl
 800f8d6:	2700      	movs	r7, #0
 800f8d8:	4621      	mov	r1, r4
 800f8da:	4658      	mov	r0, fp
 800f8dc:	f000 fafe 	bl	800fedc <_Bfree>
 800f8e0:	2d00      	cmp	r5, #0
 800f8e2:	d0dc      	beq.n	800f89e <_dtoa_r+0x65e>
 800f8e4:	b12f      	cbz	r7, 800f8f2 <_dtoa_r+0x6b2>
 800f8e6:	42af      	cmp	r7, r5
 800f8e8:	d003      	beq.n	800f8f2 <_dtoa_r+0x6b2>
 800f8ea:	4639      	mov	r1, r7
 800f8ec:	4658      	mov	r0, fp
 800f8ee:	f000 faf5 	bl	800fedc <_Bfree>
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	4658      	mov	r0, fp
 800f8f6:	f000 faf1 	bl	800fedc <_Bfree>
 800f8fa:	e7d0      	b.n	800f89e <_dtoa_r+0x65e>
 800f8fc:	9704      	str	r7, [sp, #16]
 800f8fe:	4633      	mov	r3, r6
 800f900:	461e      	mov	r6, r3
 800f902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f906:	2a39      	cmp	r2, #57	@ 0x39
 800f908:	d107      	bne.n	800f91a <_dtoa_r+0x6da>
 800f90a:	459a      	cmp	sl, r3
 800f90c:	d1f8      	bne.n	800f900 <_dtoa_r+0x6c0>
 800f90e:	9a04      	ldr	r2, [sp, #16]
 800f910:	3201      	adds	r2, #1
 800f912:	9204      	str	r2, [sp, #16]
 800f914:	2230      	movs	r2, #48	@ 0x30
 800f916:	f88a 2000 	strb.w	r2, [sl]
 800f91a:	781a      	ldrb	r2, [r3, #0]
 800f91c:	3201      	adds	r2, #1
 800f91e:	701a      	strb	r2, [r3, #0]
 800f920:	e7bd      	b.n	800f89e <_dtoa_r+0x65e>
 800f922:	4b7b      	ldr	r3, [pc, #492]	@ (800fb10 <_dtoa_r+0x8d0>)
 800f924:	2200      	movs	r2, #0
 800f926:	f7f0 fe6f 	bl	8000608 <__aeabi_dmul>
 800f92a:	2200      	movs	r2, #0
 800f92c:	2300      	movs	r3, #0
 800f92e:	4604      	mov	r4, r0
 800f930:	460d      	mov	r5, r1
 800f932:	f7f1 f8d1 	bl	8000ad8 <__aeabi_dcmpeq>
 800f936:	2800      	cmp	r0, #0
 800f938:	f43f aebb 	beq.w	800f6b2 <_dtoa_r+0x472>
 800f93c:	e6f0      	b.n	800f720 <_dtoa_r+0x4e0>
 800f93e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f940:	2a00      	cmp	r2, #0
 800f942:	f000 80db 	beq.w	800fafc <_dtoa_r+0x8bc>
 800f946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f948:	2a01      	cmp	r2, #1
 800f94a:	f300 80bf 	bgt.w	800facc <_dtoa_r+0x88c>
 800f94e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f950:	2a00      	cmp	r2, #0
 800f952:	f000 80b7 	beq.w	800fac4 <_dtoa_r+0x884>
 800f956:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f95a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f95c:	4646      	mov	r6, r8
 800f95e:	9a08      	ldr	r2, [sp, #32]
 800f960:	2101      	movs	r1, #1
 800f962:	441a      	add	r2, r3
 800f964:	4658      	mov	r0, fp
 800f966:	4498      	add	r8, r3
 800f968:	9208      	str	r2, [sp, #32]
 800f96a:	f000 fb6b 	bl	8010044 <__i2b>
 800f96e:	4605      	mov	r5, r0
 800f970:	b15e      	cbz	r6, 800f98a <_dtoa_r+0x74a>
 800f972:	9b08      	ldr	r3, [sp, #32]
 800f974:	2b00      	cmp	r3, #0
 800f976:	dd08      	ble.n	800f98a <_dtoa_r+0x74a>
 800f978:	42b3      	cmp	r3, r6
 800f97a:	9a08      	ldr	r2, [sp, #32]
 800f97c:	bfa8      	it	ge
 800f97e:	4633      	movge	r3, r6
 800f980:	eba8 0803 	sub.w	r8, r8, r3
 800f984:	1af6      	subs	r6, r6, r3
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	9308      	str	r3, [sp, #32]
 800f98a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f98c:	b1f3      	cbz	r3, 800f9cc <_dtoa_r+0x78c>
 800f98e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f990:	2b00      	cmp	r3, #0
 800f992:	f000 80b7 	beq.w	800fb04 <_dtoa_r+0x8c4>
 800f996:	b18c      	cbz	r4, 800f9bc <_dtoa_r+0x77c>
 800f998:	4629      	mov	r1, r5
 800f99a:	4622      	mov	r2, r4
 800f99c:	4658      	mov	r0, fp
 800f99e:	f000 fc11 	bl	80101c4 <__pow5mult>
 800f9a2:	464a      	mov	r2, r9
 800f9a4:	4601      	mov	r1, r0
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	4658      	mov	r0, fp
 800f9aa:	f000 fb61 	bl	8010070 <__multiply>
 800f9ae:	4649      	mov	r1, r9
 800f9b0:	9004      	str	r0, [sp, #16]
 800f9b2:	4658      	mov	r0, fp
 800f9b4:	f000 fa92 	bl	800fedc <_Bfree>
 800f9b8:	9b04      	ldr	r3, [sp, #16]
 800f9ba:	4699      	mov	r9, r3
 800f9bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9be:	1b1a      	subs	r2, r3, r4
 800f9c0:	d004      	beq.n	800f9cc <_dtoa_r+0x78c>
 800f9c2:	4649      	mov	r1, r9
 800f9c4:	4658      	mov	r0, fp
 800f9c6:	f000 fbfd 	bl	80101c4 <__pow5mult>
 800f9ca:	4681      	mov	r9, r0
 800f9cc:	2101      	movs	r1, #1
 800f9ce:	4658      	mov	r0, fp
 800f9d0:	f000 fb38 	bl	8010044 <__i2b>
 800f9d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	f000 81cf 	beq.w	800fd7c <_dtoa_r+0xb3c>
 800f9de:	461a      	mov	r2, r3
 800f9e0:	4601      	mov	r1, r0
 800f9e2:	4658      	mov	r0, fp
 800f9e4:	f000 fbee 	bl	80101c4 <__pow5mult>
 800f9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	f300 8095 	bgt.w	800fb1c <_dtoa_r+0x8dc>
 800f9f2:	9b02      	ldr	r3, [sp, #8]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f040 8087 	bne.w	800fb08 <_dtoa_r+0x8c8>
 800f9fa:	9b03      	ldr	r3, [sp, #12]
 800f9fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f040 8089 	bne.w	800fb18 <_dtoa_r+0x8d8>
 800fa06:	9b03      	ldr	r3, [sp, #12]
 800fa08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa0c:	0d1b      	lsrs	r3, r3, #20
 800fa0e:	051b      	lsls	r3, r3, #20
 800fa10:	b12b      	cbz	r3, 800fa1e <_dtoa_r+0x7de>
 800fa12:	9b08      	ldr	r3, [sp, #32]
 800fa14:	3301      	adds	r3, #1
 800fa16:	9308      	str	r3, [sp, #32]
 800fa18:	f108 0801 	add.w	r8, r8, #1
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	f000 81b0 	beq.w	800fd88 <_dtoa_r+0xb48>
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa2e:	6918      	ldr	r0, [r3, #16]
 800fa30:	f000 fabc 	bl	800ffac <__hi0bits>
 800fa34:	f1c0 0020 	rsb	r0, r0, #32
 800fa38:	9b08      	ldr	r3, [sp, #32]
 800fa3a:	4418      	add	r0, r3
 800fa3c:	f010 001f 	ands.w	r0, r0, #31
 800fa40:	d077      	beq.n	800fb32 <_dtoa_r+0x8f2>
 800fa42:	f1c0 0320 	rsb	r3, r0, #32
 800fa46:	2b04      	cmp	r3, #4
 800fa48:	dd6b      	ble.n	800fb22 <_dtoa_r+0x8e2>
 800fa4a:	9b08      	ldr	r3, [sp, #32]
 800fa4c:	f1c0 001c 	rsb	r0, r0, #28
 800fa50:	4403      	add	r3, r0
 800fa52:	4480      	add	r8, r0
 800fa54:	4406      	add	r6, r0
 800fa56:	9308      	str	r3, [sp, #32]
 800fa58:	f1b8 0f00 	cmp.w	r8, #0
 800fa5c:	dd05      	ble.n	800fa6a <_dtoa_r+0x82a>
 800fa5e:	4649      	mov	r1, r9
 800fa60:	4642      	mov	r2, r8
 800fa62:	4658      	mov	r0, fp
 800fa64:	f000 fc08 	bl	8010278 <__lshift>
 800fa68:	4681      	mov	r9, r0
 800fa6a:	9b08      	ldr	r3, [sp, #32]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dd05      	ble.n	800fa7c <_dtoa_r+0x83c>
 800fa70:	4621      	mov	r1, r4
 800fa72:	461a      	mov	r2, r3
 800fa74:	4658      	mov	r0, fp
 800fa76:	f000 fbff 	bl	8010278 <__lshift>
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d059      	beq.n	800fb36 <_dtoa_r+0x8f6>
 800fa82:	4621      	mov	r1, r4
 800fa84:	4648      	mov	r0, r9
 800fa86:	f000 fc63 	bl	8010350 <__mcmp>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	da53      	bge.n	800fb36 <_dtoa_r+0x8f6>
 800fa8e:	1e7b      	subs	r3, r7, #1
 800fa90:	9304      	str	r3, [sp, #16]
 800fa92:	4649      	mov	r1, r9
 800fa94:	2300      	movs	r3, #0
 800fa96:	220a      	movs	r2, #10
 800fa98:	4658      	mov	r0, fp
 800fa9a:	f000 fa41 	bl	800ff20 <__multadd>
 800fa9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800faa0:	4681      	mov	r9, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f000 8172 	beq.w	800fd8c <_dtoa_r+0xb4c>
 800faa8:	2300      	movs	r3, #0
 800faaa:	4629      	mov	r1, r5
 800faac:	220a      	movs	r2, #10
 800faae:	4658      	mov	r0, fp
 800fab0:	f000 fa36 	bl	800ff20 <__multadd>
 800fab4:	9b00      	ldr	r3, [sp, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	4605      	mov	r5, r0
 800faba:	dc67      	bgt.n	800fb8c <_dtoa_r+0x94c>
 800fabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	dc41      	bgt.n	800fb46 <_dtoa_r+0x906>
 800fac2:	e063      	b.n	800fb8c <_dtoa_r+0x94c>
 800fac4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fac6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800faca:	e746      	b.n	800f95a <_dtoa_r+0x71a>
 800facc:	9b07      	ldr	r3, [sp, #28]
 800face:	1e5c      	subs	r4, r3, #1
 800fad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fad2:	42a3      	cmp	r3, r4
 800fad4:	bfbf      	itttt	lt
 800fad6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fad8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fada:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fadc:	1ae3      	sublt	r3, r4, r3
 800fade:	bfb4      	ite	lt
 800fae0:	18d2      	addlt	r2, r2, r3
 800fae2:	1b1c      	subge	r4, r3, r4
 800fae4:	9b07      	ldr	r3, [sp, #28]
 800fae6:	bfbc      	itt	lt
 800fae8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800faea:	2400      	movlt	r4, #0
 800faec:	2b00      	cmp	r3, #0
 800faee:	bfb5      	itete	lt
 800faf0:	eba8 0603 	sublt.w	r6, r8, r3
 800faf4:	9b07      	ldrge	r3, [sp, #28]
 800faf6:	2300      	movlt	r3, #0
 800faf8:	4646      	movge	r6, r8
 800fafa:	e730      	b.n	800f95e <_dtoa_r+0x71e>
 800fafc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fafe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fb00:	4646      	mov	r6, r8
 800fb02:	e735      	b.n	800f970 <_dtoa_r+0x730>
 800fb04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb06:	e75c      	b.n	800f9c2 <_dtoa_r+0x782>
 800fb08:	2300      	movs	r3, #0
 800fb0a:	e788      	b.n	800fa1e <_dtoa_r+0x7de>
 800fb0c:	3fe00000 	.word	0x3fe00000
 800fb10:	40240000 	.word	0x40240000
 800fb14:	40140000 	.word	0x40140000
 800fb18:	9b02      	ldr	r3, [sp, #8]
 800fb1a:	e780      	b.n	800fa1e <_dtoa_r+0x7de>
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb20:	e782      	b.n	800fa28 <_dtoa_r+0x7e8>
 800fb22:	d099      	beq.n	800fa58 <_dtoa_r+0x818>
 800fb24:	9a08      	ldr	r2, [sp, #32]
 800fb26:	331c      	adds	r3, #28
 800fb28:	441a      	add	r2, r3
 800fb2a:	4498      	add	r8, r3
 800fb2c:	441e      	add	r6, r3
 800fb2e:	9208      	str	r2, [sp, #32]
 800fb30:	e792      	b.n	800fa58 <_dtoa_r+0x818>
 800fb32:	4603      	mov	r3, r0
 800fb34:	e7f6      	b.n	800fb24 <_dtoa_r+0x8e4>
 800fb36:	9b07      	ldr	r3, [sp, #28]
 800fb38:	9704      	str	r7, [sp, #16]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	dc20      	bgt.n	800fb80 <_dtoa_r+0x940>
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	dd1e      	ble.n	800fb84 <_dtoa_r+0x944>
 800fb46:	9b00      	ldr	r3, [sp, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f47f aec0 	bne.w	800f8ce <_dtoa_r+0x68e>
 800fb4e:	4621      	mov	r1, r4
 800fb50:	2205      	movs	r2, #5
 800fb52:	4658      	mov	r0, fp
 800fb54:	f000 f9e4 	bl	800ff20 <__multadd>
 800fb58:	4601      	mov	r1, r0
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	4648      	mov	r0, r9
 800fb5e:	f000 fbf7 	bl	8010350 <__mcmp>
 800fb62:	2800      	cmp	r0, #0
 800fb64:	f77f aeb3 	ble.w	800f8ce <_dtoa_r+0x68e>
 800fb68:	4656      	mov	r6, sl
 800fb6a:	2331      	movs	r3, #49	@ 0x31
 800fb6c:	f806 3b01 	strb.w	r3, [r6], #1
 800fb70:	9b04      	ldr	r3, [sp, #16]
 800fb72:	3301      	adds	r3, #1
 800fb74:	9304      	str	r3, [sp, #16]
 800fb76:	e6ae      	b.n	800f8d6 <_dtoa_r+0x696>
 800fb78:	9c07      	ldr	r4, [sp, #28]
 800fb7a:	9704      	str	r7, [sp, #16]
 800fb7c:	4625      	mov	r5, r4
 800fb7e:	e7f3      	b.n	800fb68 <_dtoa_r+0x928>
 800fb80:	9b07      	ldr	r3, [sp, #28]
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f000 8104 	beq.w	800fd94 <_dtoa_r+0xb54>
 800fb8c:	2e00      	cmp	r6, #0
 800fb8e:	dd05      	ble.n	800fb9c <_dtoa_r+0x95c>
 800fb90:	4629      	mov	r1, r5
 800fb92:	4632      	mov	r2, r6
 800fb94:	4658      	mov	r0, fp
 800fb96:	f000 fb6f 	bl	8010278 <__lshift>
 800fb9a:	4605      	mov	r5, r0
 800fb9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d05a      	beq.n	800fc58 <_dtoa_r+0xa18>
 800fba2:	6869      	ldr	r1, [r5, #4]
 800fba4:	4658      	mov	r0, fp
 800fba6:	f000 f959 	bl	800fe5c <_Balloc>
 800fbaa:	4606      	mov	r6, r0
 800fbac:	b928      	cbnz	r0, 800fbba <_dtoa_r+0x97a>
 800fbae:	4b84      	ldr	r3, [pc, #528]	@ (800fdc0 <_dtoa_r+0xb80>)
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fbb6:	f7ff bb5a 	b.w	800f26e <_dtoa_r+0x2e>
 800fbba:	692a      	ldr	r2, [r5, #16]
 800fbbc:	3202      	adds	r2, #2
 800fbbe:	0092      	lsls	r2, r2, #2
 800fbc0:	f105 010c 	add.w	r1, r5, #12
 800fbc4:	300c      	adds	r0, #12
 800fbc6:	f7ff faa2 	bl	800f10e <memcpy>
 800fbca:	2201      	movs	r2, #1
 800fbcc:	4631      	mov	r1, r6
 800fbce:	4658      	mov	r0, fp
 800fbd0:	f000 fb52 	bl	8010278 <__lshift>
 800fbd4:	f10a 0301 	add.w	r3, sl, #1
 800fbd8:	9307      	str	r3, [sp, #28]
 800fbda:	9b00      	ldr	r3, [sp, #0]
 800fbdc:	4453      	add	r3, sl
 800fbde:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbe0:	9b02      	ldr	r3, [sp, #8]
 800fbe2:	f003 0301 	and.w	r3, r3, #1
 800fbe6:	462f      	mov	r7, r5
 800fbe8:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbea:	4605      	mov	r5, r0
 800fbec:	9b07      	ldr	r3, [sp, #28]
 800fbee:	4621      	mov	r1, r4
 800fbf0:	3b01      	subs	r3, #1
 800fbf2:	4648      	mov	r0, r9
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	f7ff fa98 	bl	800f12a <quorem>
 800fbfa:	4639      	mov	r1, r7
 800fbfc:	9002      	str	r0, [sp, #8]
 800fbfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fc02:	4648      	mov	r0, r9
 800fc04:	f000 fba4 	bl	8010350 <__mcmp>
 800fc08:	462a      	mov	r2, r5
 800fc0a:	9008      	str	r0, [sp, #32]
 800fc0c:	4621      	mov	r1, r4
 800fc0e:	4658      	mov	r0, fp
 800fc10:	f000 fbba 	bl	8010388 <__mdiff>
 800fc14:	68c2      	ldr	r2, [r0, #12]
 800fc16:	4606      	mov	r6, r0
 800fc18:	bb02      	cbnz	r2, 800fc5c <_dtoa_r+0xa1c>
 800fc1a:	4601      	mov	r1, r0
 800fc1c:	4648      	mov	r0, r9
 800fc1e:	f000 fb97 	bl	8010350 <__mcmp>
 800fc22:	4602      	mov	r2, r0
 800fc24:	4631      	mov	r1, r6
 800fc26:	4658      	mov	r0, fp
 800fc28:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc2a:	f000 f957 	bl	800fedc <_Bfree>
 800fc2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc32:	9e07      	ldr	r6, [sp, #28]
 800fc34:	ea43 0102 	orr.w	r1, r3, r2
 800fc38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc3a:	4319      	orrs	r1, r3
 800fc3c:	d110      	bne.n	800fc60 <_dtoa_r+0xa20>
 800fc3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc42:	d029      	beq.n	800fc98 <_dtoa_r+0xa58>
 800fc44:	9b08      	ldr	r3, [sp, #32]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	dd02      	ble.n	800fc50 <_dtoa_r+0xa10>
 800fc4a:	9b02      	ldr	r3, [sp, #8]
 800fc4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fc50:	9b00      	ldr	r3, [sp, #0]
 800fc52:	f883 8000 	strb.w	r8, [r3]
 800fc56:	e63f      	b.n	800f8d8 <_dtoa_r+0x698>
 800fc58:	4628      	mov	r0, r5
 800fc5a:	e7bb      	b.n	800fbd4 <_dtoa_r+0x994>
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	e7e1      	b.n	800fc24 <_dtoa_r+0x9e4>
 800fc60:	9b08      	ldr	r3, [sp, #32]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	db04      	blt.n	800fc70 <_dtoa_r+0xa30>
 800fc66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc68:	430b      	orrs	r3, r1
 800fc6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc6c:	430b      	orrs	r3, r1
 800fc6e:	d120      	bne.n	800fcb2 <_dtoa_r+0xa72>
 800fc70:	2a00      	cmp	r2, #0
 800fc72:	dded      	ble.n	800fc50 <_dtoa_r+0xa10>
 800fc74:	4649      	mov	r1, r9
 800fc76:	2201      	movs	r2, #1
 800fc78:	4658      	mov	r0, fp
 800fc7a:	f000 fafd 	bl	8010278 <__lshift>
 800fc7e:	4621      	mov	r1, r4
 800fc80:	4681      	mov	r9, r0
 800fc82:	f000 fb65 	bl	8010350 <__mcmp>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	dc03      	bgt.n	800fc92 <_dtoa_r+0xa52>
 800fc8a:	d1e1      	bne.n	800fc50 <_dtoa_r+0xa10>
 800fc8c:	f018 0f01 	tst.w	r8, #1
 800fc90:	d0de      	beq.n	800fc50 <_dtoa_r+0xa10>
 800fc92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc96:	d1d8      	bne.n	800fc4a <_dtoa_r+0xa0a>
 800fc98:	9a00      	ldr	r2, [sp, #0]
 800fc9a:	2339      	movs	r3, #57	@ 0x39
 800fc9c:	7013      	strb	r3, [r2, #0]
 800fc9e:	4633      	mov	r3, r6
 800fca0:	461e      	mov	r6, r3
 800fca2:	3b01      	subs	r3, #1
 800fca4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fca8:	2a39      	cmp	r2, #57	@ 0x39
 800fcaa:	d052      	beq.n	800fd52 <_dtoa_r+0xb12>
 800fcac:	3201      	adds	r2, #1
 800fcae:	701a      	strb	r2, [r3, #0]
 800fcb0:	e612      	b.n	800f8d8 <_dtoa_r+0x698>
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	dd07      	ble.n	800fcc6 <_dtoa_r+0xa86>
 800fcb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fcba:	d0ed      	beq.n	800fc98 <_dtoa_r+0xa58>
 800fcbc:	9a00      	ldr	r2, [sp, #0]
 800fcbe:	f108 0301 	add.w	r3, r8, #1
 800fcc2:	7013      	strb	r3, [r2, #0]
 800fcc4:	e608      	b.n	800f8d8 <_dtoa_r+0x698>
 800fcc6:	9b07      	ldr	r3, [sp, #28]
 800fcc8:	9a07      	ldr	r2, [sp, #28]
 800fcca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fcce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d028      	beq.n	800fd26 <_dtoa_r+0xae6>
 800fcd4:	4649      	mov	r1, r9
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	220a      	movs	r2, #10
 800fcda:	4658      	mov	r0, fp
 800fcdc:	f000 f920 	bl	800ff20 <__multadd>
 800fce0:	42af      	cmp	r7, r5
 800fce2:	4681      	mov	r9, r0
 800fce4:	f04f 0300 	mov.w	r3, #0
 800fce8:	f04f 020a 	mov.w	r2, #10
 800fcec:	4639      	mov	r1, r7
 800fcee:	4658      	mov	r0, fp
 800fcf0:	d107      	bne.n	800fd02 <_dtoa_r+0xac2>
 800fcf2:	f000 f915 	bl	800ff20 <__multadd>
 800fcf6:	4607      	mov	r7, r0
 800fcf8:	4605      	mov	r5, r0
 800fcfa:	9b07      	ldr	r3, [sp, #28]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	9307      	str	r3, [sp, #28]
 800fd00:	e774      	b.n	800fbec <_dtoa_r+0x9ac>
 800fd02:	f000 f90d 	bl	800ff20 <__multadd>
 800fd06:	4629      	mov	r1, r5
 800fd08:	4607      	mov	r7, r0
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	220a      	movs	r2, #10
 800fd0e:	4658      	mov	r0, fp
 800fd10:	f000 f906 	bl	800ff20 <__multadd>
 800fd14:	4605      	mov	r5, r0
 800fd16:	e7f0      	b.n	800fcfa <_dtoa_r+0xaba>
 800fd18:	9b00      	ldr	r3, [sp, #0]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	bfcc      	ite	gt
 800fd1e:	461e      	movgt	r6, r3
 800fd20:	2601      	movle	r6, #1
 800fd22:	4456      	add	r6, sl
 800fd24:	2700      	movs	r7, #0
 800fd26:	4649      	mov	r1, r9
 800fd28:	2201      	movs	r2, #1
 800fd2a:	4658      	mov	r0, fp
 800fd2c:	f000 faa4 	bl	8010278 <__lshift>
 800fd30:	4621      	mov	r1, r4
 800fd32:	4681      	mov	r9, r0
 800fd34:	f000 fb0c 	bl	8010350 <__mcmp>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	dcb0      	bgt.n	800fc9e <_dtoa_r+0xa5e>
 800fd3c:	d102      	bne.n	800fd44 <_dtoa_r+0xb04>
 800fd3e:	f018 0f01 	tst.w	r8, #1
 800fd42:	d1ac      	bne.n	800fc9e <_dtoa_r+0xa5e>
 800fd44:	4633      	mov	r3, r6
 800fd46:	461e      	mov	r6, r3
 800fd48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd4c:	2a30      	cmp	r2, #48	@ 0x30
 800fd4e:	d0fa      	beq.n	800fd46 <_dtoa_r+0xb06>
 800fd50:	e5c2      	b.n	800f8d8 <_dtoa_r+0x698>
 800fd52:	459a      	cmp	sl, r3
 800fd54:	d1a4      	bne.n	800fca0 <_dtoa_r+0xa60>
 800fd56:	9b04      	ldr	r3, [sp, #16]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	2331      	movs	r3, #49	@ 0x31
 800fd5e:	f88a 3000 	strb.w	r3, [sl]
 800fd62:	e5b9      	b.n	800f8d8 <_dtoa_r+0x698>
 800fd64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fdc4 <_dtoa_r+0xb84>
 800fd6a:	b11b      	cbz	r3, 800fd74 <_dtoa_r+0xb34>
 800fd6c:	f10a 0308 	add.w	r3, sl, #8
 800fd70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd72:	6013      	str	r3, [r2, #0]
 800fd74:	4650      	mov	r0, sl
 800fd76:	b019      	add	sp, #100	@ 0x64
 800fd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	f77f ae37 	ble.w	800f9f2 <_dtoa_r+0x7b2>
 800fd84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd86:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd88:	2001      	movs	r0, #1
 800fd8a:	e655      	b.n	800fa38 <_dtoa_r+0x7f8>
 800fd8c:	9b00      	ldr	r3, [sp, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f77f aed6 	ble.w	800fb40 <_dtoa_r+0x900>
 800fd94:	4656      	mov	r6, sl
 800fd96:	4621      	mov	r1, r4
 800fd98:	4648      	mov	r0, r9
 800fd9a:	f7ff f9c6 	bl	800f12a <quorem>
 800fd9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fda2:	f806 8b01 	strb.w	r8, [r6], #1
 800fda6:	9b00      	ldr	r3, [sp, #0]
 800fda8:	eba6 020a 	sub.w	r2, r6, sl
 800fdac:	4293      	cmp	r3, r2
 800fdae:	ddb3      	ble.n	800fd18 <_dtoa_r+0xad8>
 800fdb0:	4649      	mov	r1, r9
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	220a      	movs	r2, #10
 800fdb6:	4658      	mov	r0, fp
 800fdb8:	f000 f8b2 	bl	800ff20 <__multadd>
 800fdbc:	4681      	mov	r9, r0
 800fdbe:	e7ea      	b.n	800fd96 <_dtoa_r+0xb56>
 800fdc0:	08011394 	.word	0x08011394
 800fdc4:	08011318 	.word	0x08011318

0800fdc8 <_free_r>:
 800fdc8:	b538      	push	{r3, r4, r5, lr}
 800fdca:	4605      	mov	r5, r0
 800fdcc:	2900      	cmp	r1, #0
 800fdce:	d041      	beq.n	800fe54 <_free_r+0x8c>
 800fdd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdd4:	1f0c      	subs	r4, r1, #4
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	bfb8      	it	lt
 800fdda:	18e4      	addlt	r4, r4, r3
 800fddc:	f7fe fa66 	bl	800e2ac <__malloc_lock>
 800fde0:	4a1d      	ldr	r2, [pc, #116]	@ (800fe58 <_free_r+0x90>)
 800fde2:	6813      	ldr	r3, [r2, #0]
 800fde4:	b933      	cbnz	r3, 800fdf4 <_free_r+0x2c>
 800fde6:	6063      	str	r3, [r4, #4]
 800fde8:	6014      	str	r4, [r2, #0]
 800fdea:	4628      	mov	r0, r5
 800fdec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdf0:	f7fe ba62 	b.w	800e2b8 <__malloc_unlock>
 800fdf4:	42a3      	cmp	r3, r4
 800fdf6:	d908      	bls.n	800fe0a <_free_r+0x42>
 800fdf8:	6820      	ldr	r0, [r4, #0]
 800fdfa:	1821      	adds	r1, r4, r0
 800fdfc:	428b      	cmp	r3, r1
 800fdfe:	bf01      	itttt	eq
 800fe00:	6819      	ldreq	r1, [r3, #0]
 800fe02:	685b      	ldreq	r3, [r3, #4]
 800fe04:	1809      	addeq	r1, r1, r0
 800fe06:	6021      	streq	r1, [r4, #0]
 800fe08:	e7ed      	b.n	800fde6 <_free_r+0x1e>
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	b10b      	cbz	r3, 800fe14 <_free_r+0x4c>
 800fe10:	42a3      	cmp	r3, r4
 800fe12:	d9fa      	bls.n	800fe0a <_free_r+0x42>
 800fe14:	6811      	ldr	r1, [r2, #0]
 800fe16:	1850      	adds	r0, r2, r1
 800fe18:	42a0      	cmp	r0, r4
 800fe1a:	d10b      	bne.n	800fe34 <_free_r+0x6c>
 800fe1c:	6820      	ldr	r0, [r4, #0]
 800fe1e:	4401      	add	r1, r0
 800fe20:	1850      	adds	r0, r2, r1
 800fe22:	4283      	cmp	r3, r0
 800fe24:	6011      	str	r1, [r2, #0]
 800fe26:	d1e0      	bne.n	800fdea <_free_r+0x22>
 800fe28:	6818      	ldr	r0, [r3, #0]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	6053      	str	r3, [r2, #4]
 800fe2e:	4408      	add	r0, r1
 800fe30:	6010      	str	r0, [r2, #0]
 800fe32:	e7da      	b.n	800fdea <_free_r+0x22>
 800fe34:	d902      	bls.n	800fe3c <_free_r+0x74>
 800fe36:	230c      	movs	r3, #12
 800fe38:	602b      	str	r3, [r5, #0]
 800fe3a:	e7d6      	b.n	800fdea <_free_r+0x22>
 800fe3c:	6820      	ldr	r0, [r4, #0]
 800fe3e:	1821      	adds	r1, r4, r0
 800fe40:	428b      	cmp	r3, r1
 800fe42:	bf04      	itt	eq
 800fe44:	6819      	ldreq	r1, [r3, #0]
 800fe46:	685b      	ldreq	r3, [r3, #4]
 800fe48:	6063      	str	r3, [r4, #4]
 800fe4a:	bf04      	itt	eq
 800fe4c:	1809      	addeq	r1, r1, r0
 800fe4e:	6021      	streq	r1, [r4, #0]
 800fe50:	6054      	str	r4, [r2, #4]
 800fe52:	e7ca      	b.n	800fdea <_free_r+0x22>
 800fe54:	bd38      	pop	{r3, r4, r5, pc}
 800fe56:	bf00      	nop
 800fe58:	20000da8 	.word	0x20000da8

0800fe5c <_Balloc>:
 800fe5c:	b570      	push	{r4, r5, r6, lr}
 800fe5e:	69c6      	ldr	r6, [r0, #28]
 800fe60:	4604      	mov	r4, r0
 800fe62:	460d      	mov	r5, r1
 800fe64:	b976      	cbnz	r6, 800fe84 <_Balloc+0x28>
 800fe66:	2010      	movs	r0, #16
 800fe68:	f7fe f96e 	bl	800e148 <malloc>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	61e0      	str	r0, [r4, #28]
 800fe70:	b920      	cbnz	r0, 800fe7c <_Balloc+0x20>
 800fe72:	4b18      	ldr	r3, [pc, #96]	@ (800fed4 <_Balloc+0x78>)
 800fe74:	4818      	ldr	r0, [pc, #96]	@ (800fed8 <_Balloc+0x7c>)
 800fe76:	216b      	movs	r1, #107	@ 0x6b
 800fe78:	f000 ff56 	bl	8010d28 <__assert_func>
 800fe7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe80:	6006      	str	r6, [r0, #0]
 800fe82:	60c6      	str	r6, [r0, #12]
 800fe84:	69e6      	ldr	r6, [r4, #28]
 800fe86:	68f3      	ldr	r3, [r6, #12]
 800fe88:	b183      	cbz	r3, 800feac <_Balloc+0x50>
 800fe8a:	69e3      	ldr	r3, [r4, #28]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe92:	b9b8      	cbnz	r0, 800fec4 <_Balloc+0x68>
 800fe94:	2101      	movs	r1, #1
 800fe96:	fa01 f605 	lsl.w	r6, r1, r5
 800fe9a:	1d72      	adds	r2, r6, #5
 800fe9c:	0092      	lsls	r2, r2, #2
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f000 ff60 	bl	8010d64 <_calloc_r>
 800fea4:	b160      	cbz	r0, 800fec0 <_Balloc+0x64>
 800fea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800feaa:	e00e      	b.n	800feca <_Balloc+0x6e>
 800feac:	2221      	movs	r2, #33	@ 0x21
 800feae:	2104      	movs	r1, #4
 800feb0:	4620      	mov	r0, r4
 800feb2:	f000 ff57 	bl	8010d64 <_calloc_r>
 800feb6:	69e3      	ldr	r3, [r4, #28]
 800feb8:	60f0      	str	r0, [r6, #12]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1e4      	bne.n	800fe8a <_Balloc+0x2e>
 800fec0:	2000      	movs	r0, #0
 800fec2:	bd70      	pop	{r4, r5, r6, pc}
 800fec4:	6802      	ldr	r2, [r0, #0]
 800fec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800feca:	2300      	movs	r3, #0
 800fecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fed0:	e7f7      	b.n	800fec2 <_Balloc+0x66>
 800fed2:	bf00      	nop
 800fed4:	08011325 	.word	0x08011325
 800fed8:	080113a5 	.word	0x080113a5

0800fedc <_Bfree>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	69c6      	ldr	r6, [r0, #28]
 800fee0:	4605      	mov	r5, r0
 800fee2:	460c      	mov	r4, r1
 800fee4:	b976      	cbnz	r6, 800ff04 <_Bfree+0x28>
 800fee6:	2010      	movs	r0, #16
 800fee8:	f7fe f92e 	bl	800e148 <malloc>
 800feec:	4602      	mov	r2, r0
 800feee:	61e8      	str	r0, [r5, #28]
 800fef0:	b920      	cbnz	r0, 800fefc <_Bfree+0x20>
 800fef2:	4b09      	ldr	r3, [pc, #36]	@ (800ff18 <_Bfree+0x3c>)
 800fef4:	4809      	ldr	r0, [pc, #36]	@ (800ff1c <_Bfree+0x40>)
 800fef6:	218f      	movs	r1, #143	@ 0x8f
 800fef8:	f000 ff16 	bl	8010d28 <__assert_func>
 800fefc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff00:	6006      	str	r6, [r0, #0]
 800ff02:	60c6      	str	r6, [r0, #12]
 800ff04:	b13c      	cbz	r4, 800ff16 <_Bfree+0x3a>
 800ff06:	69eb      	ldr	r3, [r5, #28]
 800ff08:	6862      	ldr	r2, [r4, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff10:	6021      	str	r1, [r4, #0]
 800ff12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff16:	bd70      	pop	{r4, r5, r6, pc}
 800ff18:	08011325 	.word	0x08011325
 800ff1c:	080113a5 	.word	0x080113a5

0800ff20 <__multadd>:
 800ff20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff24:	690d      	ldr	r5, [r1, #16]
 800ff26:	4607      	mov	r7, r0
 800ff28:	460c      	mov	r4, r1
 800ff2a:	461e      	mov	r6, r3
 800ff2c:	f101 0c14 	add.w	ip, r1, #20
 800ff30:	2000      	movs	r0, #0
 800ff32:	f8dc 3000 	ldr.w	r3, [ip]
 800ff36:	b299      	uxth	r1, r3
 800ff38:	fb02 6101 	mla	r1, r2, r1, r6
 800ff3c:	0c1e      	lsrs	r6, r3, #16
 800ff3e:	0c0b      	lsrs	r3, r1, #16
 800ff40:	fb02 3306 	mla	r3, r2, r6, r3
 800ff44:	b289      	uxth	r1, r1
 800ff46:	3001      	adds	r0, #1
 800ff48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff4c:	4285      	cmp	r5, r0
 800ff4e:	f84c 1b04 	str.w	r1, [ip], #4
 800ff52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff56:	dcec      	bgt.n	800ff32 <__multadd+0x12>
 800ff58:	b30e      	cbz	r6, 800ff9e <__multadd+0x7e>
 800ff5a:	68a3      	ldr	r3, [r4, #8]
 800ff5c:	42ab      	cmp	r3, r5
 800ff5e:	dc19      	bgt.n	800ff94 <__multadd+0x74>
 800ff60:	6861      	ldr	r1, [r4, #4]
 800ff62:	4638      	mov	r0, r7
 800ff64:	3101      	adds	r1, #1
 800ff66:	f7ff ff79 	bl	800fe5c <_Balloc>
 800ff6a:	4680      	mov	r8, r0
 800ff6c:	b928      	cbnz	r0, 800ff7a <__multadd+0x5a>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	4b0c      	ldr	r3, [pc, #48]	@ (800ffa4 <__multadd+0x84>)
 800ff72:	480d      	ldr	r0, [pc, #52]	@ (800ffa8 <__multadd+0x88>)
 800ff74:	21ba      	movs	r1, #186	@ 0xba
 800ff76:	f000 fed7 	bl	8010d28 <__assert_func>
 800ff7a:	6922      	ldr	r2, [r4, #16]
 800ff7c:	3202      	adds	r2, #2
 800ff7e:	f104 010c 	add.w	r1, r4, #12
 800ff82:	0092      	lsls	r2, r2, #2
 800ff84:	300c      	adds	r0, #12
 800ff86:	f7ff f8c2 	bl	800f10e <memcpy>
 800ff8a:	4621      	mov	r1, r4
 800ff8c:	4638      	mov	r0, r7
 800ff8e:	f7ff ffa5 	bl	800fedc <_Bfree>
 800ff92:	4644      	mov	r4, r8
 800ff94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff98:	3501      	adds	r5, #1
 800ff9a:	615e      	str	r6, [r3, #20]
 800ff9c:	6125      	str	r5, [r4, #16]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa4:	08011394 	.word	0x08011394
 800ffa8:	080113a5 	.word	0x080113a5

0800ffac <__hi0bits>:
 800ffac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	bf36      	itet	cc
 800ffb4:	0403      	lslcc	r3, r0, #16
 800ffb6:	2000      	movcs	r0, #0
 800ffb8:	2010      	movcc	r0, #16
 800ffba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ffbe:	bf3c      	itt	cc
 800ffc0:	021b      	lslcc	r3, r3, #8
 800ffc2:	3008      	addcc	r0, #8
 800ffc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ffc8:	bf3c      	itt	cc
 800ffca:	011b      	lslcc	r3, r3, #4
 800ffcc:	3004      	addcc	r0, #4
 800ffce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffd2:	bf3c      	itt	cc
 800ffd4:	009b      	lslcc	r3, r3, #2
 800ffd6:	3002      	addcc	r0, #2
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	db05      	blt.n	800ffe8 <__hi0bits+0x3c>
 800ffdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ffe0:	f100 0001 	add.w	r0, r0, #1
 800ffe4:	bf08      	it	eq
 800ffe6:	2020      	moveq	r0, #32
 800ffe8:	4770      	bx	lr

0800ffea <__lo0bits>:
 800ffea:	6803      	ldr	r3, [r0, #0]
 800ffec:	4602      	mov	r2, r0
 800ffee:	f013 0007 	ands.w	r0, r3, #7
 800fff2:	d00b      	beq.n	801000c <__lo0bits+0x22>
 800fff4:	07d9      	lsls	r1, r3, #31
 800fff6:	d421      	bmi.n	801003c <__lo0bits+0x52>
 800fff8:	0798      	lsls	r0, r3, #30
 800fffa:	bf49      	itett	mi
 800fffc:	085b      	lsrmi	r3, r3, #1
 800fffe:	089b      	lsrpl	r3, r3, #2
 8010000:	2001      	movmi	r0, #1
 8010002:	6013      	strmi	r3, [r2, #0]
 8010004:	bf5c      	itt	pl
 8010006:	6013      	strpl	r3, [r2, #0]
 8010008:	2002      	movpl	r0, #2
 801000a:	4770      	bx	lr
 801000c:	b299      	uxth	r1, r3
 801000e:	b909      	cbnz	r1, 8010014 <__lo0bits+0x2a>
 8010010:	0c1b      	lsrs	r3, r3, #16
 8010012:	2010      	movs	r0, #16
 8010014:	b2d9      	uxtb	r1, r3
 8010016:	b909      	cbnz	r1, 801001c <__lo0bits+0x32>
 8010018:	3008      	adds	r0, #8
 801001a:	0a1b      	lsrs	r3, r3, #8
 801001c:	0719      	lsls	r1, r3, #28
 801001e:	bf04      	itt	eq
 8010020:	091b      	lsreq	r3, r3, #4
 8010022:	3004      	addeq	r0, #4
 8010024:	0799      	lsls	r1, r3, #30
 8010026:	bf04      	itt	eq
 8010028:	089b      	lsreq	r3, r3, #2
 801002a:	3002      	addeq	r0, #2
 801002c:	07d9      	lsls	r1, r3, #31
 801002e:	d403      	bmi.n	8010038 <__lo0bits+0x4e>
 8010030:	085b      	lsrs	r3, r3, #1
 8010032:	f100 0001 	add.w	r0, r0, #1
 8010036:	d003      	beq.n	8010040 <__lo0bits+0x56>
 8010038:	6013      	str	r3, [r2, #0]
 801003a:	4770      	bx	lr
 801003c:	2000      	movs	r0, #0
 801003e:	4770      	bx	lr
 8010040:	2020      	movs	r0, #32
 8010042:	4770      	bx	lr

08010044 <__i2b>:
 8010044:	b510      	push	{r4, lr}
 8010046:	460c      	mov	r4, r1
 8010048:	2101      	movs	r1, #1
 801004a:	f7ff ff07 	bl	800fe5c <_Balloc>
 801004e:	4602      	mov	r2, r0
 8010050:	b928      	cbnz	r0, 801005e <__i2b+0x1a>
 8010052:	4b05      	ldr	r3, [pc, #20]	@ (8010068 <__i2b+0x24>)
 8010054:	4805      	ldr	r0, [pc, #20]	@ (801006c <__i2b+0x28>)
 8010056:	f240 1145 	movw	r1, #325	@ 0x145
 801005a:	f000 fe65 	bl	8010d28 <__assert_func>
 801005e:	2301      	movs	r3, #1
 8010060:	6144      	str	r4, [r0, #20]
 8010062:	6103      	str	r3, [r0, #16]
 8010064:	bd10      	pop	{r4, pc}
 8010066:	bf00      	nop
 8010068:	08011394 	.word	0x08011394
 801006c:	080113a5 	.word	0x080113a5

08010070 <__multiply>:
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	4614      	mov	r4, r2
 8010076:	690a      	ldr	r2, [r1, #16]
 8010078:	6923      	ldr	r3, [r4, #16]
 801007a:	429a      	cmp	r2, r3
 801007c:	bfa8      	it	ge
 801007e:	4623      	movge	r3, r4
 8010080:	460f      	mov	r7, r1
 8010082:	bfa4      	itt	ge
 8010084:	460c      	movge	r4, r1
 8010086:	461f      	movge	r7, r3
 8010088:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801008c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010090:	68a3      	ldr	r3, [r4, #8]
 8010092:	6861      	ldr	r1, [r4, #4]
 8010094:	eb0a 0609 	add.w	r6, sl, r9
 8010098:	42b3      	cmp	r3, r6
 801009a:	b085      	sub	sp, #20
 801009c:	bfb8      	it	lt
 801009e:	3101      	addlt	r1, #1
 80100a0:	f7ff fedc 	bl	800fe5c <_Balloc>
 80100a4:	b930      	cbnz	r0, 80100b4 <__multiply+0x44>
 80100a6:	4602      	mov	r2, r0
 80100a8:	4b44      	ldr	r3, [pc, #272]	@ (80101bc <__multiply+0x14c>)
 80100aa:	4845      	ldr	r0, [pc, #276]	@ (80101c0 <__multiply+0x150>)
 80100ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80100b0:	f000 fe3a 	bl	8010d28 <__assert_func>
 80100b4:	f100 0514 	add.w	r5, r0, #20
 80100b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100bc:	462b      	mov	r3, r5
 80100be:	2200      	movs	r2, #0
 80100c0:	4543      	cmp	r3, r8
 80100c2:	d321      	bcc.n	8010108 <__multiply+0x98>
 80100c4:	f107 0114 	add.w	r1, r7, #20
 80100c8:	f104 0214 	add.w	r2, r4, #20
 80100cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80100d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80100d4:	9302      	str	r3, [sp, #8]
 80100d6:	1b13      	subs	r3, r2, r4
 80100d8:	3b15      	subs	r3, #21
 80100da:	f023 0303 	bic.w	r3, r3, #3
 80100de:	3304      	adds	r3, #4
 80100e0:	f104 0715 	add.w	r7, r4, #21
 80100e4:	42ba      	cmp	r2, r7
 80100e6:	bf38      	it	cc
 80100e8:	2304      	movcc	r3, #4
 80100ea:	9301      	str	r3, [sp, #4]
 80100ec:	9b02      	ldr	r3, [sp, #8]
 80100ee:	9103      	str	r1, [sp, #12]
 80100f0:	428b      	cmp	r3, r1
 80100f2:	d80c      	bhi.n	801010e <__multiply+0x9e>
 80100f4:	2e00      	cmp	r6, #0
 80100f6:	dd03      	ble.n	8010100 <__multiply+0x90>
 80100f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d05b      	beq.n	80101b8 <__multiply+0x148>
 8010100:	6106      	str	r6, [r0, #16]
 8010102:	b005      	add	sp, #20
 8010104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010108:	f843 2b04 	str.w	r2, [r3], #4
 801010c:	e7d8      	b.n	80100c0 <__multiply+0x50>
 801010e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010112:	f1ba 0f00 	cmp.w	sl, #0
 8010116:	d024      	beq.n	8010162 <__multiply+0xf2>
 8010118:	f104 0e14 	add.w	lr, r4, #20
 801011c:	46a9      	mov	r9, r5
 801011e:	f04f 0c00 	mov.w	ip, #0
 8010122:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010126:	f8d9 3000 	ldr.w	r3, [r9]
 801012a:	fa1f fb87 	uxth.w	fp, r7
 801012e:	b29b      	uxth	r3, r3
 8010130:	fb0a 330b 	mla	r3, sl, fp, r3
 8010134:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010138:	f8d9 7000 	ldr.w	r7, [r9]
 801013c:	4463      	add	r3, ip
 801013e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010142:	fb0a c70b 	mla	r7, sl, fp, ip
 8010146:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801014a:	b29b      	uxth	r3, r3
 801014c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010150:	4572      	cmp	r2, lr
 8010152:	f849 3b04 	str.w	r3, [r9], #4
 8010156:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801015a:	d8e2      	bhi.n	8010122 <__multiply+0xb2>
 801015c:	9b01      	ldr	r3, [sp, #4]
 801015e:	f845 c003 	str.w	ip, [r5, r3]
 8010162:	9b03      	ldr	r3, [sp, #12]
 8010164:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010168:	3104      	adds	r1, #4
 801016a:	f1b9 0f00 	cmp.w	r9, #0
 801016e:	d021      	beq.n	80101b4 <__multiply+0x144>
 8010170:	682b      	ldr	r3, [r5, #0]
 8010172:	f104 0c14 	add.w	ip, r4, #20
 8010176:	46ae      	mov	lr, r5
 8010178:	f04f 0a00 	mov.w	sl, #0
 801017c:	f8bc b000 	ldrh.w	fp, [ip]
 8010180:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010184:	fb09 770b 	mla	r7, r9, fp, r7
 8010188:	4457      	add	r7, sl
 801018a:	b29b      	uxth	r3, r3
 801018c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010190:	f84e 3b04 	str.w	r3, [lr], #4
 8010194:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010198:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801019c:	f8be 3000 	ldrh.w	r3, [lr]
 80101a0:	fb09 330a 	mla	r3, r9, sl, r3
 80101a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80101a8:	4562      	cmp	r2, ip
 80101aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101ae:	d8e5      	bhi.n	801017c <__multiply+0x10c>
 80101b0:	9f01      	ldr	r7, [sp, #4]
 80101b2:	51eb      	str	r3, [r5, r7]
 80101b4:	3504      	adds	r5, #4
 80101b6:	e799      	b.n	80100ec <__multiply+0x7c>
 80101b8:	3e01      	subs	r6, #1
 80101ba:	e79b      	b.n	80100f4 <__multiply+0x84>
 80101bc:	08011394 	.word	0x08011394
 80101c0:	080113a5 	.word	0x080113a5

080101c4 <__pow5mult>:
 80101c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101c8:	4615      	mov	r5, r2
 80101ca:	f012 0203 	ands.w	r2, r2, #3
 80101ce:	4607      	mov	r7, r0
 80101d0:	460e      	mov	r6, r1
 80101d2:	d007      	beq.n	80101e4 <__pow5mult+0x20>
 80101d4:	4c25      	ldr	r4, [pc, #148]	@ (801026c <__pow5mult+0xa8>)
 80101d6:	3a01      	subs	r2, #1
 80101d8:	2300      	movs	r3, #0
 80101da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101de:	f7ff fe9f 	bl	800ff20 <__multadd>
 80101e2:	4606      	mov	r6, r0
 80101e4:	10ad      	asrs	r5, r5, #2
 80101e6:	d03d      	beq.n	8010264 <__pow5mult+0xa0>
 80101e8:	69fc      	ldr	r4, [r7, #28]
 80101ea:	b97c      	cbnz	r4, 801020c <__pow5mult+0x48>
 80101ec:	2010      	movs	r0, #16
 80101ee:	f7fd ffab 	bl	800e148 <malloc>
 80101f2:	4602      	mov	r2, r0
 80101f4:	61f8      	str	r0, [r7, #28]
 80101f6:	b928      	cbnz	r0, 8010204 <__pow5mult+0x40>
 80101f8:	4b1d      	ldr	r3, [pc, #116]	@ (8010270 <__pow5mult+0xac>)
 80101fa:	481e      	ldr	r0, [pc, #120]	@ (8010274 <__pow5mult+0xb0>)
 80101fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010200:	f000 fd92 	bl	8010d28 <__assert_func>
 8010204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010208:	6004      	str	r4, [r0, #0]
 801020a:	60c4      	str	r4, [r0, #12]
 801020c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010214:	b94c      	cbnz	r4, 801022a <__pow5mult+0x66>
 8010216:	f240 2171 	movw	r1, #625	@ 0x271
 801021a:	4638      	mov	r0, r7
 801021c:	f7ff ff12 	bl	8010044 <__i2b>
 8010220:	2300      	movs	r3, #0
 8010222:	f8c8 0008 	str.w	r0, [r8, #8]
 8010226:	4604      	mov	r4, r0
 8010228:	6003      	str	r3, [r0, #0]
 801022a:	f04f 0900 	mov.w	r9, #0
 801022e:	07eb      	lsls	r3, r5, #31
 8010230:	d50a      	bpl.n	8010248 <__pow5mult+0x84>
 8010232:	4631      	mov	r1, r6
 8010234:	4622      	mov	r2, r4
 8010236:	4638      	mov	r0, r7
 8010238:	f7ff ff1a 	bl	8010070 <__multiply>
 801023c:	4631      	mov	r1, r6
 801023e:	4680      	mov	r8, r0
 8010240:	4638      	mov	r0, r7
 8010242:	f7ff fe4b 	bl	800fedc <_Bfree>
 8010246:	4646      	mov	r6, r8
 8010248:	106d      	asrs	r5, r5, #1
 801024a:	d00b      	beq.n	8010264 <__pow5mult+0xa0>
 801024c:	6820      	ldr	r0, [r4, #0]
 801024e:	b938      	cbnz	r0, 8010260 <__pow5mult+0x9c>
 8010250:	4622      	mov	r2, r4
 8010252:	4621      	mov	r1, r4
 8010254:	4638      	mov	r0, r7
 8010256:	f7ff ff0b 	bl	8010070 <__multiply>
 801025a:	6020      	str	r0, [r4, #0]
 801025c:	f8c0 9000 	str.w	r9, [r0]
 8010260:	4604      	mov	r4, r0
 8010262:	e7e4      	b.n	801022e <__pow5mult+0x6a>
 8010264:	4630      	mov	r0, r6
 8010266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801026a:	bf00      	nop
 801026c:	08011400 	.word	0x08011400
 8010270:	08011325 	.word	0x08011325
 8010274:	080113a5 	.word	0x080113a5

08010278 <__lshift>:
 8010278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801027c:	460c      	mov	r4, r1
 801027e:	6849      	ldr	r1, [r1, #4]
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010286:	68a3      	ldr	r3, [r4, #8]
 8010288:	4607      	mov	r7, r0
 801028a:	4691      	mov	r9, r2
 801028c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010290:	f108 0601 	add.w	r6, r8, #1
 8010294:	42b3      	cmp	r3, r6
 8010296:	db0b      	blt.n	80102b0 <__lshift+0x38>
 8010298:	4638      	mov	r0, r7
 801029a:	f7ff fddf 	bl	800fe5c <_Balloc>
 801029e:	4605      	mov	r5, r0
 80102a0:	b948      	cbnz	r0, 80102b6 <__lshift+0x3e>
 80102a2:	4602      	mov	r2, r0
 80102a4:	4b28      	ldr	r3, [pc, #160]	@ (8010348 <__lshift+0xd0>)
 80102a6:	4829      	ldr	r0, [pc, #164]	@ (801034c <__lshift+0xd4>)
 80102a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80102ac:	f000 fd3c 	bl	8010d28 <__assert_func>
 80102b0:	3101      	adds	r1, #1
 80102b2:	005b      	lsls	r3, r3, #1
 80102b4:	e7ee      	b.n	8010294 <__lshift+0x1c>
 80102b6:	2300      	movs	r3, #0
 80102b8:	f100 0114 	add.w	r1, r0, #20
 80102bc:	f100 0210 	add.w	r2, r0, #16
 80102c0:	4618      	mov	r0, r3
 80102c2:	4553      	cmp	r3, sl
 80102c4:	db33      	blt.n	801032e <__lshift+0xb6>
 80102c6:	6920      	ldr	r0, [r4, #16]
 80102c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102cc:	f104 0314 	add.w	r3, r4, #20
 80102d0:	f019 091f 	ands.w	r9, r9, #31
 80102d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102dc:	d02b      	beq.n	8010336 <__lshift+0xbe>
 80102de:	f1c9 0e20 	rsb	lr, r9, #32
 80102e2:	468a      	mov	sl, r1
 80102e4:	2200      	movs	r2, #0
 80102e6:	6818      	ldr	r0, [r3, #0]
 80102e8:	fa00 f009 	lsl.w	r0, r0, r9
 80102ec:	4310      	orrs	r0, r2
 80102ee:	f84a 0b04 	str.w	r0, [sl], #4
 80102f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80102f6:	459c      	cmp	ip, r3
 80102f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80102fc:	d8f3      	bhi.n	80102e6 <__lshift+0x6e>
 80102fe:	ebac 0304 	sub.w	r3, ip, r4
 8010302:	3b15      	subs	r3, #21
 8010304:	f023 0303 	bic.w	r3, r3, #3
 8010308:	3304      	adds	r3, #4
 801030a:	f104 0015 	add.w	r0, r4, #21
 801030e:	4584      	cmp	ip, r0
 8010310:	bf38      	it	cc
 8010312:	2304      	movcc	r3, #4
 8010314:	50ca      	str	r2, [r1, r3]
 8010316:	b10a      	cbz	r2, 801031c <__lshift+0xa4>
 8010318:	f108 0602 	add.w	r6, r8, #2
 801031c:	3e01      	subs	r6, #1
 801031e:	4638      	mov	r0, r7
 8010320:	612e      	str	r6, [r5, #16]
 8010322:	4621      	mov	r1, r4
 8010324:	f7ff fdda 	bl	800fedc <_Bfree>
 8010328:	4628      	mov	r0, r5
 801032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801032e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010332:	3301      	adds	r3, #1
 8010334:	e7c5      	b.n	80102c2 <__lshift+0x4a>
 8010336:	3904      	subs	r1, #4
 8010338:	f853 2b04 	ldr.w	r2, [r3], #4
 801033c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010340:	459c      	cmp	ip, r3
 8010342:	d8f9      	bhi.n	8010338 <__lshift+0xc0>
 8010344:	e7ea      	b.n	801031c <__lshift+0xa4>
 8010346:	bf00      	nop
 8010348:	08011394 	.word	0x08011394
 801034c:	080113a5 	.word	0x080113a5

08010350 <__mcmp>:
 8010350:	690a      	ldr	r2, [r1, #16]
 8010352:	4603      	mov	r3, r0
 8010354:	6900      	ldr	r0, [r0, #16]
 8010356:	1a80      	subs	r0, r0, r2
 8010358:	b530      	push	{r4, r5, lr}
 801035a:	d10e      	bne.n	801037a <__mcmp+0x2a>
 801035c:	3314      	adds	r3, #20
 801035e:	3114      	adds	r1, #20
 8010360:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010364:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010368:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801036c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010370:	4295      	cmp	r5, r2
 8010372:	d003      	beq.n	801037c <__mcmp+0x2c>
 8010374:	d205      	bcs.n	8010382 <__mcmp+0x32>
 8010376:	f04f 30ff 	mov.w	r0, #4294967295
 801037a:	bd30      	pop	{r4, r5, pc}
 801037c:	42a3      	cmp	r3, r4
 801037e:	d3f3      	bcc.n	8010368 <__mcmp+0x18>
 8010380:	e7fb      	b.n	801037a <__mcmp+0x2a>
 8010382:	2001      	movs	r0, #1
 8010384:	e7f9      	b.n	801037a <__mcmp+0x2a>
	...

08010388 <__mdiff>:
 8010388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801038c:	4689      	mov	r9, r1
 801038e:	4606      	mov	r6, r0
 8010390:	4611      	mov	r1, r2
 8010392:	4648      	mov	r0, r9
 8010394:	4614      	mov	r4, r2
 8010396:	f7ff ffdb 	bl	8010350 <__mcmp>
 801039a:	1e05      	subs	r5, r0, #0
 801039c:	d112      	bne.n	80103c4 <__mdiff+0x3c>
 801039e:	4629      	mov	r1, r5
 80103a0:	4630      	mov	r0, r6
 80103a2:	f7ff fd5b 	bl	800fe5c <_Balloc>
 80103a6:	4602      	mov	r2, r0
 80103a8:	b928      	cbnz	r0, 80103b6 <__mdiff+0x2e>
 80103aa:	4b3f      	ldr	r3, [pc, #252]	@ (80104a8 <__mdiff+0x120>)
 80103ac:	f240 2137 	movw	r1, #567	@ 0x237
 80103b0:	483e      	ldr	r0, [pc, #248]	@ (80104ac <__mdiff+0x124>)
 80103b2:	f000 fcb9 	bl	8010d28 <__assert_func>
 80103b6:	2301      	movs	r3, #1
 80103b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103bc:	4610      	mov	r0, r2
 80103be:	b003      	add	sp, #12
 80103c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c4:	bfbc      	itt	lt
 80103c6:	464b      	movlt	r3, r9
 80103c8:	46a1      	movlt	r9, r4
 80103ca:	4630      	mov	r0, r6
 80103cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80103d0:	bfba      	itte	lt
 80103d2:	461c      	movlt	r4, r3
 80103d4:	2501      	movlt	r5, #1
 80103d6:	2500      	movge	r5, #0
 80103d8:	f7ff fd40 	bl	800fe5c <_Balloc>
 80103dc:	4602      	mov	r2, r0
 80103de:	b918      	cbnz	r0, 80103e8 <__mdiff+0x60>
 80103e0:	4b31      	ldr	r3, [pc, #196]	@ (80104a8 <__mdiff+0x120>)
 80103e2:	f240 2145 	movw	r1, #581	@ 0x245
 80103e6:	e7e3      	b.n	80103b0 <__mdiff+0x28>
 80103e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80103ec:	6926      	ldr	r6, [r4, #16]
 80103ee:	60c5      	str	r5, [r0, #12]
 80103f0:	f109 0310 	add.w	r3, r9, #16
 80103f4:	f109 0514 	add.w	r5, r9, #20
 80103f8:	f104 0e14 	add.w	lr, r4, #20
 80103fc:	f100 0b14 	add.w	fp, r0, #20
 8010400:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010404:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010408:	9301      	str	r3, [sp, #4]
 801040a:	46d9      	mov	r9, fp
 801040c:	f04f 0c00 	mov.w	ip, #0
 8010410:	9b01      	ldr	r3, [sp, #4]
 8010412:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010416:	f853 af04 	ldr.w	sl, [r3, #4]!
 801041a:	9301      	str	r3, [sp, #4]
 801041c:	fa1f f38a 	uxth.w	r3, sl
 8010420:	4619      	mov	r1, r3
 8010422:	b283      	uxth	r3, r0
 8010424:	1acb      	subs	r3, r1, r3
 8010426:	0c00      	lsrs	r0, r0, #16
 8010428:	4463      	add	r3, ip
 801042a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801042e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010432:	b29b      	uxth	r3, r3
 8010434:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010438:	4576      	cmp	r6, lr
 801043a:	f849 3b04 	str.w	r3, [r9], #4
 801043e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010442:	d8e5      	bhi.n	8010410 <__mdiff+0x88>
 8010444:	1b33      	subs	r3, r6, r4
 8010446:	3b15      	subs	r3, #21
 8010448:	f023 0303 	bic.w	r3, r3, #3
 801044c:	3415      	adds	r4, #21
 801044e:	3304      	adds	r3, #4
 8010450:	42a6      	cmp	r6, r4
 8010452:	bf38      	it	cc
 8010454:	2304      	movcc	r3, #4
 8010456:	441d      	add	r5, r3
 8010458:	445b      	add	r3, fp
 801045a:	461e      	mov	r6, r3
 801045c:	462c      	mov	r4, r5
 801045e:	4544      	cmp	r4, r8
 8010460:	d30e      	bcc.n	8010480 <__mdiff+0xf8>
 8010462:	f108 0103 	add.w	r1, r8, #3
 8010466:	1b49      	subs	r1, r1, r5
 8010468:	f021 0103 	bic.w	r1, r1, #3
 801046c:	3d03      	subs	r5, #3
 801046e:	45a8      	cmp	r8, r5
 8010470:	bf38      	it	cc
 8010472:	2100      	movcc	r1, #0
 8010474:	440b      	add	r3, r1
 8010476:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801047a:	b191      	cbz	r1, 80104a2 <__mdiff+0x11a>
 801047c:	6117      	str	r7, [r2, #16]
 801047e:	e79d      	b.n	80103bc <__mdiff+0x34>
 8010480:	f854 1b04 	ldr.w	r1, [r4], #4
 8010484:	46e6      	mov	lr, ip
 8010486:	0c08      	lsrs	r0, r1, #16
 8010488:	fa1c fc81 	uxtah	ip, ip, r1
 801048c:	4471      	add	r1, lr
 801048e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010492:	b289      	uxth	r1, r1
 8010494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010498:	f846 1b04 	str.w	r1, [r6], #4
 801049c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80104a0:	e7dd      	b.n	801045e <__mdiff+0xd6>
 80104a2:	3f01      	subs	r7, #1
 80104a4:	e7e7      	b.n	8010476 <__mdiff+0xee>
 80104a6:	bf00      	nop
 80104a8:	08011394 	.word	0x08011394
 80104ac:	080113a5 	.word	0x080113a5

080104b0 <__d2b>:
 80104b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80104b4:	460f      	mov	r7, r1
 80104b6:	2101      	movs	r1, #1
 80104b8:	ec59 8b10 	vmov	r8, r9, d0
 80104bc:	4616      	mov	r6, r2
 80104be:	f7ff fccd 	bl	800fe5c <_Balloc>
 80104c2:	4604      	mov	r4, r0
 80104c4:	b930      	cbnz	r0, 80104d4 <__d2b+0x24>
 80104c6:	4602      	mov	r2, r0
 80104c8:	4b23      	ldr	r3, [pc, #140]	@ (8010558 <__d2b+0xa8>)
 80104ca:	4824      	ldr	r0, [pc, #144]	@ (801055c <__d2b+0xac>)
 80104cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80104d0:	f000 fc2a 	bl	8010d28 <__assert_func>
 80104d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80104d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104dc:	b10d      	cbz	r5, 80104e2 <__d2b+0x32>
 80104de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	f1b8 0300 	subs.w	r3, r8, #0
 80104e8:	d023      	beq.n	8010532 <__d2b+0x82>
 80104ea:	4668      	mov	r0, sp
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	f7ff fd7c 	bl	800ffea <__lo0bits>
 80104f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80104f6:	b1d0      	cbz	r0, 801052e <__d2b+0x7e>
 80104f8:	f1c0 0320 	rsb	r3, r0, #32
 80104fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010500:	430b      	orrs	r3, r1
 8010502:	40c2      	lsrs	r2, r0
 8010504:	6163      	str	r3, [r4, #20]
 8010506:	9201      	str	r2, [sp, #4]
 8010508:	9b01      	ldr	r3, [sp, #4]
 801050a:	61a3      	str	r3, [r4, #24]
 801050c:	2b00      	cmp	r3, #0
 801050e:	bf0c      	ite	eq
 8010510:	2201      	moveq	r2, #1
 8010512:	2202      	movne	r2, #2
 8010514:	6122      	str	r2, [r4, #16]
 8010516:	b1a5      	cbz	r5, 8010542 <__d2b+0x92>
 8010518:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801051c:	4405      	add	r5, r0
 801051e:	603d      	str	r5, [r7, #0]
 8010520:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010524:	6030      	str	r0, [r6, #0]
 8010526:	4620      	mov	r0, r4
 8010528:	b003      	add	sp, #12
 801052a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801052e:	6161      	str	r1, [r4, #20]
 8010530:	e7ea      	b.n	8010508 <__d2b+0x58>
 8010532:	a801      	add	r0, sp, #4
 8010534:	f7ff fd59 	bl	800ffea <__lo0bits>
 8010538:	9b01      	ldr	r3, [sp, #4]
 801053a:	6163      	str	r3, [r4, #20]
 801053c:	3020      	adds	r0, #32
 801053e:	2201      	movs	r2, #1
 8010540:	e7e8      	b.n	8010514 <__d2b+0x64>
 8010542:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010546:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801054a:	6038      	str	r0, [r7, #0]
 801054c:	6918      	ldr	r0, [r3, #16]
 801054e:	f7ff fd2d 	bl	800ffac <__hi0bits>
 8010552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010556:	e7e5      	b.n	8010524 <__d2b+0x74>
 8010558:	08011394 	.word	0x08011394
 801055c:	080113a5 	.word	0x080113a5

08010560 <__ssputs_r>:
 8010560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010564:	688e      	ldr	r6, [r1, #8]
 8010566:	461f      	mov	r7, r3
 8010568:	42be      	cmp	r6, r7
 801056a:	680b      	ldr	r3, [r1, #0]
 801056c:	4682      	mov	sl, r0
 801056e:	460c      	mov	r4, r1
 8010570:	4690      	mov	r8, r2
 8010572:	d82d      	bhi.n	80105d0 <__ssputs_r+0x70>
 8010574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010578:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801057c:	d026      	beq.n	80105cc <__ssputs_r+0x6c>
 801057e:	6965      	ldr	r5, [r4, #20]
 8010580:	6909      	ldr	r1, [r1, #16]
 8010582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010586:	eba3 0901 	sub.w	r9, r3, r1
 801058a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801058e:	1c7b      	adds	r3, r7, #1
 8010590:	444b      	add	r3, r9
 8010592:	106d      	asrs	r5, r5, #1
 8010594:	429d      	cmp	r5, r3
 8010596:	bf38      	it	cc
 8010598:	461d      	movcc	r5, r3
 801059a:	0553      	lsls	r3, r2, #21
 801059c:	d527      	bpl.n	80105ee <__ssputs_r+0x8e>
 801059e:	4629      	mov	r1, r5
 80105a0:	f7fd fe04 	bl	800e1ac <_malloc_r>
 80105a4:	4606      	mov	r6, r0
 80105a6:	b360      	cbz	r0, 8010602 <__ssputs_r+0xa2>
 80105a8:	6921      	ldr	r1, [r4, #16]
 80105aa:	464a      	mov	r2, r9
 80105ac:	f7fe fdaf 	bl	800f10e <memcpy>
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80105b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105ba:	81a3      	strh	r3, [r4, #12]
 80105bc:	6126      	str	r6, [r4, #16]
 80105be:	6165      	str	r5, [r4, #20]
 80105c0:	444e      	add	r6, r9
 80105c2:	eba5 0509 	sub.w	r5, r5, r9
 80105c6:	6026      	str	r6, [r4, #0]
 80105c8:	60a5      	str	r5, [r4, #8]
 80105ca:	463e      	mov	r6, r7
 80105cc:	42be      	cmp	r6, r7
 80105ce:	d900      	bls.n	80105d2 <__ssputs_r+0x72>
 80105d0:	463e      	mov	r6, r7
 80105d2:	6820      	ldr	r0, [r4, #0]
 80105d4:	4632      	mov	r2, r6
 80105d6:	4641      	mov	r1, r8
 80105d8:	f000 fb6a 	bl	8010cb0 <memmove>
 80105dc:	68a3      	ldr	r3, [r4, #8]
 80105de:	1b9b      	subs	r3, r3, r6
 80105e0:	60a3      	str	r3, [r4, #8]
 80105e2:	6823      	ldr	r3, [r4, #0]
 80105e4:	4433      	add	r3, r6
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	2000      	movs	r0, #0
 80105ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ee:	462a      	mov	r2, r5
 80105f0:	f000 fbde 	bl	8010db0 <_realloc_r>
 80105f4:	4606      	mov	r6, r0
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d1e0      	bne.n	80105bc <__ssputs_r+0x5c>
 80105fa:	6921      	ldr	r1, [r4, #16]
 80105fc:	4650      	mov	r0, sl
 80105fe:	f7ff fbe3 	bl	800fdc8 <_free_r>
 8010602:	230c      	movs	r3, #12
 8010604:	f8ca 3000 	str.w	r3, [sl]
 8010608:	89a3      	ldrh	r3, [r4, #12]
 801060a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801060e:	81a3      	strh	r3, [r4, #12]
 8010610:	f04f 30ff 	mov.w	r0, #4294967295
 8010614:	e7e9      	b.n	80105ea <__ssputs_r+0x8a>
	...

08010618 <_svfiprintf_r>:
 8010618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061c:	4698      	mov	r8, r3
 801061e:	898b      	ldrh	r3, [r1, #12]
 8010620:	061b      	lsls	r3, r3, #24
 8010622:	b09d      	sub	sp, #116	@ 0x74
 8010624:	4607      	mov	r7, r0
 8010626:	460d      	mov	r5, r1
 8010628:	4614      	mov	r4, r2
 801062a:	d510      	bpl.n	801064e <_svfiprintf_r+0x36>
 801062c:	690b      	ldr	r3, [r1, #16]
 801062e:	b973      	cbnz	r3, 801064e <_svfiprintf_r+0x36>
 8010630:	2140      	movs	r1, #64	@ 0x40
 8010632:	f7fd fdbb 	bl	800e1ac <_malloc_r>
 8010636:	6028      	str	r0, [r5, #0]
 8010638:	6128      	str	r0, [r5, #16]
 801063a:	b930      	cbnz	r0, 801064a <_svfiprintf_r+0x32>
 801063c:	230c      	movs	r3, #12
 801063e:	603b      	str	r3, [r7, #0]
 8010640:	f04f 30ff 	mov.w	r0, #4294967295
 8010644:	b01d      	add	sp, #116	@ 0x74
 8010646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064a:	2340      	movs	r3, #64	@ 0x40
 801064c:	616b      	str	r3, [r5, #20]
 801064e:	2300      	movs	r3, #0
 8010650:	9309      	str	r3, [sp, #36]	@ 0x24
 8010652:	2320      	movs	r3, #32
 8010654:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010658:	f8cd 800c 	str.w	r8, [sp, #12]
 801065c:	2330      	movs	r3, #48	@ 0x30
 801065e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80107fc <_svfiprintf_r+0x1e4>
 8010662:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010666:	f04f 0901 	mov.w	r9, #1
 801066a:	4623      	mov	r3, r4
 801066c:	469a      	mov	sl, r3
 801066e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010672:	b10a      	cbz	r2, 8010678 <_svfiprintf_r+0x60>
 8010674:	2a25      	cmp	r2, #37	@ 0x25
 8010676:	d1f9      	bne.n	801066c <_svfiprintf_r+0x54>
 8010678:	ebba 0b04 	subs.w	fp, sl, r4
 801067c:	d00b      	beq.n	8010696 <_svfiprintf_r+0x7e>
 801067e:	465b      	mov	r3, fp
 8010680:	4622      	mov	r2, r4
 8010682:	4629      	mov	r1, r5
 8010684:	4638      	mov	r0, r7
 8010686:	f7ff ff6b 	bl	8010560 <__ssputs_r>
 801068a:	3001      	adds	r0, #1
 801068c:	f000 80a7 	beq.w	80107de <_svfiprintf_r+0x1c6>
 8010690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010692:	445a      	add	r2, fp
 8010694:	9209      	str	r2, [sp, #36]	@ 0x24
 8010696:	f89a 3000 	ldrb.w	r3, [sl]
 801069a:	2b00      	cmp	r3, #0
 801069c:	f000 809f 	beq.w	80107de <_svfiprintf_r+0x1c6>
 80106a0:	2300      	movs	r3, #0
 80106a2:	f04f 32ff 	mov.w	r2, #4294967295
 80106a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106aa:	f10a 0a01 	add.w	sl, sl, #1
 80106ae:	9304      	str	r3, [sp, #16]
 80106b0:	9307      	str	r3, [sp, #28]
 80106b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80106b8:	4654      	mov	r4, sl
 80106ba:	2205      	movs	r2, #5
 80106bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106c0:	484e      	ldr	r0, [pc, #312]	@ (80107fc <_svfiprintf_r+0x1e4>)
 80106c2:	f7ef fd8d 	bl	80001e0 <memchr>
 80106c6:	9a04      	ldr	r2, [sp, #16]
 80106c8:	b9d8      	cbnz	r0, 8010702 <_svfiprintf_r+0xea>
 80106ca:	06d0      	lsls	r0, r2, #27
 80106cc:	bf44      	itt	mi
 80106ce:	2320      	movmi	r3, #32
 80106d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106d4:	0711      	lsls	r1, r2, #28
 80106d6:	bf44      	itt	mi
 80106d8:	232b      	movmi	r3, #43	@ 0x2b
 80106da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106de:	f89a 3000 	ldrb.w	r3, [sl]
 80106e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80106e4:	d015      	beq.n	8010712 <_svfiprintf_r+0xfa>
 80106e6:	9a07      	ldr	r2, [sp, #28]
 80106e8:	4654      	mov	r4, sl
 80106ea:	2000      	movs	r0, #0
 80106ec:	f04f 0c0a 	mov.w	ip, #10
 80106f0:	4621      	mov	r1, r4
 80106f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106f6:	3b30      	subs	r3, #48	@ 0x30
 80106f8:	2b09      	cmp	r3, #9
 80106fa:	d94b      	bls.n	8010794 <_svfiprintf_r+0x17c>
 80106fc:	b1b0      	cbz	r0, 801072c <_svfiprintf_r+0x114>
 80106fe:	9207      	str	r2, [sp, #28]
 8010700:	e014      	b.n	801072c <_svfiprintf_r+0x114>
 8010702:	eba0 0308 	sub.w	r3, r0, r8
 8010706:	fa09 f303 	lsl.w	r3, r9, r3
 801070a:	4313      	orrs	r3, r2
 801070c:	9304      	str	r3, [sp, #16]
 801070e:	46a2      	mov	sl, r4
 8010710:	e7d2      	b.n	80106b8 <_svfiprintf_r+0xa0>
 8010712:	9b03      	ldr	r3, [sp, #12]
 8010714:	1d19      	adds	r1, r3, #4
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	9103      	str	r1, [sp, #12]
 801071a:	2b00      	cmp	r3, #0
 801071c:	bfbb      	ittet	lt
 801071e:	425b      	neglt	r3, r3
 8010720:	f042 0202 	orrlt.w	r2, r2, #2
 8010724:	9307      	strge	r3, [sp, #28]
 8010726:	9307      	strlt	r3, [sp, #28]
 8010728:	bfb8      	it	lt
 801072a:	9204      	strlt	r2, [sp, #16]
 801072c:	7823      	ldrb	r3, [r4, #0]
 801072e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010730:	d10a      	bne.n	8010748 <_svfiprintf_r+0x130>
 8010732:	7863      	ldrb	r3, [r4, #1]
 8010734:	2b2a      	cmp	r3, #42	@ 0x2a
 8010736:	d132      	bne.n	801079e <_svfiprintf_r+0x186>
 8010738:	9b03      	ldr	r3, [sp, #12]
 801073a:	1d1a      	adds	r2, r3, #4
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	9203      	str	r2, [sp, #12]
 8010740:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010744:	3402      	adds	r4, #2
 8010746:	9305      	str	r3, [sp, #20]
 8010748:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801080c <_svfiprintf_r+0x1f4>
 801074c:	7821      	ldrb	r1, [r4, #0]
 801074e:	2203      	movs	r2, #3
 8010750:	4650      	mov	r0, sl
 8010752:	f7ef fd45 	bl	80001e0 <memchr>
 8010756:	b138      	cbz	r0, 8010768 <_svfiprintf_r+0x150>
 8010758:	9b04      	ldr	r3, [sp, #16]
 801075a:	eba0 000a 	sub.w	r0, r0, sl
 801075e:	2240      	movs	r2, #64	@ 0x40
 8010760:	4082      	lsls	r2, r0
 8010762:	4313      	orrs	r3, r2
 8010764:	3401      	adds	r4, #1
 8010766:	9304      	str	r3, [sp, #16]
 8010768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801076c:	4824      	ldr	r0, [pc, #144]	@ (8010800 <_svfiprintf_r+0x1e8>)
 801076e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010772:	2206      	movs	r2, #6
 8010774:	f7ef fd34 	bl	80001e0 <memchr>
 8010778:	2800      	cmp	r0, #0
 801077a:	d036      	beq.n	80107ea <_svfiprintf_r+0x1d2>
 801077c:	4b21      	ldr	r3, [pc, #132]	@ (8010804 <_svfiprintf_r+0x1ec>)
 801077e:	bb1b      	cbnz	r3, 80107c8 <_svfiprintf_r+0x1b0>
 8010780:	9b03      	ldr	r3, [sp, #12]
 8010782:	3307      	adds	r3, #7
 8010784:	f023 0307 	bic.w	r3, r3, #7
 8010788:	3308      	adds	r3, #8
 801078a:	9303      	str	r3, [sp, #12]
 801078c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801078e:	4433      	add	r3, r6
 8010790:	9309      	str	r3, [sp, #36]	@ 0x24
 8010792:	e76a      	b.n	801066a <_svfiprintf_r+0x52>
 8010794:	fb0c 3202 	mla	r2, ip, r2, r3
 8010798:	460c      	mov	r4, r1
 801079a:	2001      	movs	r0, #1
 801079c:	e7a8      	b.n	80106f0 <_svfiprintf_r+0xd8>
 801079e:	2300      	movs	r3, #0
 80107a0:	3401      	adds	r4, #1
 80107a2:	9305      	str	r3, [sp, #20]
 80107a4:	4619      	mov	r1, r3
 80107a6:	f04f 0c0a 	mov.w	ip, #10
 80107aa:	4620      	mov	r0, r4
 80107ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107b0:	3a30      	subs	r2, #48	@ 0x30
 80107b2:	2a09      	cmp	r2, #9
 80107b4:	d903      	bls.n	80107be <_svfiprintf_r+0x1a6>
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d0c6      	beq.n	8010748 <_svfiprintf_r+0x130>
 80107ba:	9105      	str	r1, [sp, #20]
 80107bc:	e7c4      	b.n	8010748 <_svfiprintf_r+0x130>
 80107be:	fb0c 2101 	mla	r1, ip, r1, r2
 80107c2:	4604      	mov	r4, r0
 80107c4:	2301      	movs	r3, #1
 80107c6:	e7f0      	b.n	80107aa <_svfiprintf_r+0x192>
 80107c8:	ab03      	add	r3, sp, #12
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	462a      	mov	r2, r5
 80107ce:	4b0e      	ldr	r3, [pc, #56]	@ (8010808 <_svfiprintf_r+0x1f0>)
 80107d0:	a904      	add	r1, sp, #16
 80107d2:	4638      	mov	r0, r7
 80107d4:	f7fd fe16 	bl	800e404 <_printf_float>
 80107d8:	1c42      	adds	r2, r0, #1
 80107da:	4606      	mov	r6, r0
 80107dc:	d1d6      	bne.n	801078c <_svfiprintf_r+0x174>
 80107de:	89ab      	ldrh	r3, [r5, #12]
 80107e0:	065b      	lsls	r3, r3, #25
 80107e2:	f53f af2d 	bmi.w	8010640 <_svfiprintf_r+0x28>
 80107e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107e8:	e72c      	b.n	8010644 <_svfiprintf_r+0x2c>
 80107ea:	ab03      	add	r3, sp, #12
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	462a      	mov	r2, r5
 80107f0:	4b05      	ldr	r3, [pc, #20]	@ (8010808 <_svfiprintf_r+0x1f0>)
 80107f2:	a904      	add	r1, sp, #16
 80107f4:	4638      	mov	r0, r7
 80107f6:	f7fe f89d 	bl	800e934 <_printf_i>
 80107fa:	e7ed      	b.n	80107d8 <_svfiprintf_r+0x1c0>
 80107fc:	08011500 	.word	0x08011500
 8010800:	0801150a 	.word	0x0801150a
 8010804:	0800e405 	.word	0x0800e405
 8010808:	08010561 	.word	0x08010561
 801080c:	08011506 	.word	0x08011506

08010810 <__sfputc_r>:
 8010810:	6893      	ldr	r3, [r2, #8]
 8010812:	3b01      	subs	r3, #1
 8010814:	2b00      	cmp	r3, #0
 8010816:	b410      	push	{r4}
 8010818:	6093      	str	r3, [r2, #8]
 801081a:	da08      	bge.n	801082e <__sfputc_r+0x1e>
 801081c:	6994      	ldr	r4, [r2, #24]
 801081e:	42a3      	cmp	r3, r4
 8010820:	db01      	blt.n	8010826 <__sfputc_r+0x16>
 8010822:	290a      	cmp	r1, #10
 8010824:	d103      	bne.n	801082e <__sfputc_r+0x1e>
 8010826:	f85d 4b04 	ldr.w	r4, [sp], #4
 801082a:	f7fe bb4c 	b.w	800eec6 <__swbuf_r>
 801082e:	6813      	ldr	r3, [r2, #0]
 8010830:	1c58      	adds	r0, r3, #1
 8010832:	6010      	str	r0, [r2, #0]
 8010834:	7019      	strb	r1, [r3, #0]
 8010836:	4608      	mov	r0, r1
 8010838:	f85d 4b04 	ldr.w	r4, [sp], #4
 801083c:	4770      	bx	lr

0801083e <__sfputs_r>:
 801083e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010840:	4606      	mov	r6, r0
 8010842:	460f      	mov	r7, r1
 8010844:	4614      	mov	r4, r2
 8010846:	18d5      	adds	r5, r2, r3
 8010848:	42ac      	cmp	r4, r5
 801084a:	d101      	bne.n	8010850 <__sfputs_r+0x12>
 801084c:	2000      	movs	r0, #0
 801084e:	e007      	b.n	8010860 <__sfputs_r+0x22>
 8010850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010854:	463a      	mov	r2, r7
 8010856:	4630      	mov	r0, r6
 8010858:	f7ff ffda 	bl	8010810 <__sfputc_r>
 801085c:	1c43      	adds	r3, r0, #1
 801085e:	d1f3      	bne.n	8010848 <__sfputs_r+0xa>
 8010860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010864 <_vfiprintf_r>:
 8010864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010868:	460d      	mov	r5, r1
 801086a:	b09d      	sub	sp, #116	@ 0x74
 801086c:	4614      	mov	r4, r2
 801086e:	4698      	mov	r8, r3
 8010870:	4606      	mov	r6, r0
 8010872:	b118      	cbz	r0, 801087c <_vfiprintf_r+0x18>
 8010874:	6a03      	ldr	r3, [r0, #32]
 8010876:	b90b      	cbnz	r3, 801087c <_vfiprintf_r+0x18>
 8010878:	f7fe fa08 	bl	800ec8c <__sinit>
 801087c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801087e:	07d9      	lsls	r1, r3, #31
 8010880:	d405      	bmi.n	801088e <_vfiprintf_r+0x2a>
 8010882:	89ab      	ldrh	r3, [r5, #12]
 8010884:	059a      	lsls	r2, r3, #22
 8010886:	d402      	bmi.n	801088e <_vfiprintf_r+0x2a>
 8010888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801088a:	f7fe fc3e 	bl	800f10a <__retarget_lock_acquire_recursive>
 801088e:	89ab      	ldrh	r3, [r5, #12]
 8010890:	071b      	lsls	r3, r3, #28
 8010892:	d501      	bpl.n	8010898 <_vfiprintf_r+0x34>
 8010894:	692b      	ldr	r3, [r5, #16]
 8010896:	b99b      	cbnz	r3, 80108c0 <_vfiprintf_r+0x5c>
 8010898:	4629      	mov	r1, r5
 801089a:	4630      	mov	r0, r6
 801089c:	f7fe fb52 	bl	800ef44 <__swsetup_r>
 80108a0:	b170      	cbz	r0, 80108c0 <_vfiprintf_r+0x5c>
 80108a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108a4:	07dc      	lsls	r4, r3, #31
 80108a6:	d504      	bpl.n	80108b2 <_vfiprintf_r+0x4e>
 80108a8:	f04f 30ff 	mov.w	r0, #4294967295
 80108ac:	b01d      	add	sp, #116	@ 0x74
 80108ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b2:	89ab      	ldrh	r3, [r5, #12]
 80108b4:	0598      	lsls	r0, r3, #22
 80108b6:	d4f7      	bmi.n	80108a8 <_vfiprintf_r+0x44>
 80108b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108ba:	f7fe fc27 	bl	800f10c <__retarget_lock_release_recursive>
 80108be:	e7f3      	b.n	80108a8 <_vfiprintf_r+0x44>
 80108c0:	2300      	movs	r3, #0
 80108c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80108c4:	2320      	movs	r3, #32
 80108c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80108ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80108ce:	2330      	movs	r3, #48	@ 0x30
 80108d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010a80 <_vfiprintf_r+0x21c>
 80108d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80108d8:	f04f 0901 	mov.w	r9, #1
 80108dc:	4623      	mov	r3, r4
 80108de:	469a      	mov	sl, r3
 80108e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108e4:	b10a      	cbz	r2, 80108ea <_vfiprintf_r+0x86>
 80108e6:	2a25      	cmp	r2, #37	@ 0x25
 80108e8:	d1f9      	bne.n	80108de <_vfiprintf_r+0x7a>
 80108ea:	ebba 0b04 	subs.w	fp, sl, r4
 80108ee:	d00b      	beq.n	8010908 <_vfiprintf_r+0xa4>
 80108f0:	465b      	mov	r3, fp
 80108f2:	4622      	mov	r2, r4
 80108f4:	4629      	mov	r1, r5
 80108f6:	4630      	mov	r0, r6
 80108f8:	f7ff ffa1 	bl	801083e <__sfputs_r>
 80108fc:	3001      	adds	r0, #1
 80108fe:	f000 80a7 	beq.w	8010a50 <_vfiprintf_r+0x1ec>
 8010902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010904:	445a      	add	r2, fp
 8010906:	9209      	str	r2, [sp, #36]	@ 0x24
 8010908:	f89a 3000 	ldrb.w	r3, [sl]
 801090c:	2b00      	cmp	r3, #0
 801090e:	f000 809f 	beq.w	8010a50 <_vfiprintf_r+0x1ec>
 8010912:	2300      	movs	r3, #0
 8010914:	f04f 32ff 	mov.w	r2, #4294967295
 8010918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801091c:	f10a 0a01 	add.w	sl, sl, #1
 8010920:	9304      	str	r3, [sp, #16]
 8010922:	9307      	str	r3, [sp, #28]
 8010924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010928:	931a      	str	r3, [sp, #104]	@ 0x68
 801092a:	4654      	mov	r4, sl
 801092c:	2205      	movs	r2, #5
 801092e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010932:	4853      	ldr	r0, [pc, #332]	@ (8010a80 <_vfiprintf_r+0x21c>)
 8010934:	f7ef fc54 	bl	80001e0 <memchr>
 8010938:	9a04      	ldr	r2, [sp, #16]
 801093a:	b9d8      	cbnz	r0, 8010974 <_vfiprintf_r+0x110>
 801093c:	06d1      	lsls	r1, r2, #27
 801093e:	bf44      	itt	mi
 8010940:	2320      	movmi	r3, #32
 8010942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010946:	0713      	lsls	r3, r2, #28
 8010948:	bf44      	itt	mi
 801094a:	232b      	movmi	r3, #43	@ 0x2b
 801094c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010950:	f89a 3000 	ldrb.w	r3, [sl]
 8010954:	2b2a      	cmp	r3, #42	@ 0x2a
 8010956:	d015      	beq.n	8010984 <_vfiprintf_r+0x120>
 8010958:	9a07      	ldr	r2, [sp, #28]
 801095a:	4654      	mov	r4, sl
 801095c:	2000      	movs	r0, #0
 801095e:	f04f 0c0a 	mov.w	ip, #10
 8010962:	4621      	mov	r1, r4
 8010964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010968:	3b30      	subs	r3, #48	@ 0x30
 801096a:	2b09      	cmp	r3, #9
 801096c:	d94b      	bls.n	8010a06 <_vfiprintf_r+0x1a2>
 801096e:	b1b0      	cbz	r0, 801099e <_vfiprintf_r+0x13a>
 8010970:	9207      	str	r2, [sp, #28]
 8010972:	e014      	b.n	801099e <_vfiprintf_r+0x13a>
 8010974:	eba0 0308 	sub.w	r3, r0, r8
 8010978:	fa09 f303 	lsl.w	r3, r9, r3
 801097c:	4313      	orrs	r3, r2
 801097e:	9304      	str	r3, [sp, #16]
 8010980:	46a2      	mov	sl, r4
 8010982:	e7d2      	b.n	801092a <_vfiprintf_r+0xc6>
 8010984:	9b03      	ldr	r3, [sp, #12]
 8010986:	1d19      	adds	r1, r3, #4
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	9103      	str	r1, [sp, #12]
 801098c:	2b00      	cmp	r3, #0
 801098e:	bfbb      	ittet	lt
 8010990:	425b      	neglt	r3, r3
 8010992:	f042 0202 	orrlt.w	r2, r2, #2
 8010996:	9307      	strge	r3, [sp, #28]
 8010998:	9307      	strlt	r3, [sp, #28]
 801099a:	bfb8      	it	lt
 801099c:	9204      	strlt	r2, [sp, #16]
 801099e:	7823      	ldrb	r3, [r4, #0]
 80109a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80109a2:	d10a      	bne.n	80109ba <_vfiprintf_r+0x156>
 80109a4:	7863      	ldrb	r3, [r4, #1]
 80109a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80109a8:	d132      	bne.n	8010a10 <_vfiprintf_r+0x1ac>
 80109aa:	9b03      	ldr	r3, [sp, #12]
 80109ac:	1d1a      	adds	r2, r3, #4
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	9203      	str	r2, [sp, #12]
 80109b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80109b6:	3402      	adds	r4, #2
 80109b8:	9305      	str	r3, [sp, #20]
 80109ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010a90 <_vfiprintf_r+0x22c>
 80109be:	7821      	ldrb	r1, [r4, #0]
 80109c0:	2203      	movs	r2, #3
 80109c2:	4650      	mov	r0, sl
 80109c4:	f7ef fc0c 	bl	80001e0 <memchr>
 80109c8:	b138      	cbz	r0, 80109da <_vfiprintf_r+0x176>
 80109ca:	9b04      	ldr	r3, [sp, #16]
 80109cc:	eba0 000a 	sub.w	r0, r0, sl
 80109d0:	2240      	movs	r2, #64	@ 0x40
 80109d2:	4082      	lsls	r2, r0
 80109d4:	4313      	orrs	r3, r2
 80109d6:	3401      	adds	r4, #1
 80109d8:	9304      	str	r3, [sp, #16]
 80109da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109de:	4829      	ldr	r0, [pc, #164]	@ (8010a84 <_vfiprintf_r+0x220>)
 80109e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80109e4:	2206      	movs	r2, #6
 80109e6:	f7ef fbfb 	bl	80001e0 <memchr>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	d03f      	beq.n	8010a6e <_vfiprintf_r+0x20a>
 80109ee:	4b26      	ldr	r3, [pc, #152]	@ (8010a88 <_vfiprintf_r+0x224>)
 80109f0:	bb1b      	cbnz	r3, 8010a3a <_vfiprintf_r+0x1d6>
 80109f2:	9b03      	ldr	r3, [sp, #12]
 80109f4:	3307      	adds	r3, #7
 80109f6:	f023 0307 	bic.w	r3, r3, #7
 80109fa:	3308      	adds	r3, #8
 80109fc:	9303      	str	r3, [sp, #12]
 80109fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a00:	443b      	add	r3, r7
 8010a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a04:	e76a      	b.n	80108dc <_vfiprintf_r+0x78>
 8010a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a0a:	460c      	mov	r4, r1
 8010a0c:	2001      	movs	r0, #1
 8010a0e:	e7a8      	b.n	8010962 <_vfiprintf_r+0xfe>
 8010a10:	2300      	movs	r3, #0
 8010a12:	3401      	adds	r4, #1
 8010a14:	9305      	str	r3, [sp, #20]
 8010a16:	4619      	mov	r1, r3
 8010a18:	f04f 0c0a 	mov.w	ip, #10
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a22:	3a30      	subs	r2, #48	@ 0x30
 8010a24:	2a09      	cmp	r2, #9
 8010a26:	d903      	bls.n	8010a30 <_vfiprintf_r+0x1cc>
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d0c6      	beq.n	80109ba <_vfiprintf_r+0x156>
 8010a2c:	9105      	str	r1, [sp, #20]
 8010a2e:	e7c4      	b.n	80109ba <_vfiprintf_r+0x156>
 8010a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a34:	4604      	mov	r4, r0
 8010a36:	2301      	movs	r3, #1
 8010a38:	e7f0      	b.n	8010a1c <_vfiprintf_r+0x1b8>
 8010a3a:	ab03      	add	r3, sp, #12
 8010a3c:	9300      	str	r3, [sp, #0]
 8010a3e:	462a      	mov	r2, r5
 8010a40:	4b12      	ldr	r3, [pc, #72]	@ (8010a8c <_vfiprintf_r+0x228>)
 8010a42:	a904      	add	r1, sp, #16
 8010a44:	4630      	mov	r0, r6
 8010a46:	f7fd fcdd 	bl	800e404 <_printf_float>
 8010a4a:	4607      	mov	r7, r0
 8010a4c:	1c78      	adds	r0, r7, #1
 8010a4e:	d1d6      	bne.n	80109fe <_vfiprintf_r+0x19a>
 8010a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a52:	07d9      	lsls	r1, r3, #31
 8010a54:	d405      	bmi.n	8010a62 <_vfiprintf_r+0x1fe>
 8010a56:	89ab      	ldrh	r3, [r5, #12]
 8010a58:	059a      	lsls	r2, r3, #22
 8010a5a:	d402      	bmi.n	8010a62 <_vfiprintf_r+0x1fe>
 8010a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a5e:	f7fe fb55 	bl	800f10c <__retarget_lock_release_recursive>
 8010a62:	89ab      	ldrh	r3, [r5, #12]
 8010a64:	065b      	lsls	r3, r3, #25
 8010a66:	f53f af1f 	bmi.w	80108a8 <_vfiprintf_r+0x44>
 8010a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a6c:	e71e      	b.n	80108ac <_vfiprintf_r+0x48>
 8010a6e:	ab03      	add	r3, sp, #12
 8010a70:	9300      	str	r3, [sp, #0]
 8010a72:	462a      	mov	r2, r5
 8010a74:	4b05      	ldr	r3, [pc, #20]	@ (8010a8c <_vfiprintf_r+0x228>)
 8010a76:	a904      	add	r1, sp, #16
 8010a78:	4630      	mov	r0, r6
 8010a7a:	f7fd ff5b 	bl	800e934 <_printf_i>
 8010a7e:	e7e4      	b.n	8010a4a <_vfiprintf_r+0x1e6>
 8010a80:	08011500 	.word	0x08011500
 8010a84:	0801150a 	.word	0x0801150a
 8010a88:	0800e405 	.word	0x0800e405
 8010a8c:	0801083f 	.word	0x0801083f
 8010a90:	08011506 	.word	0x08011506

08010a94 <__sflush_r>:
 8010a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a9c:	0716      	lsls	r6, r2, #28
 8010a9e:	4605      	mov	r5, r0
 8010aa0:	460c      	mov	r4, r1
 8010aa2:	d454      	bmi.n	8010b4e <__sflush_r+0xba>
 8010aa4:	684b      	ldr	r3, [r1, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	dc02      	bgt.n	8010ab0 <__sflush_r+0x1c>
 8010aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dd48      	ble.n	8010b42 <__sflush_r+0xae>
 8010ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ab2:	2e00      	cmp	r6, #0
 8010ab4:	d045      	beq.n	8010b42 <__sflush_r+0xae>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010abc:	682f      	ldr	r7, [r5, #0]
 8010abe:	6a21      	ldr	r1, [r4, #32]
 8010ac0:	602b      	str	r3, [r5, #0]
 8010ac2:	d030      	beq.n	8010b26 <__sflush_r+0x92>
 8010ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010ac6:	89a3      	ldrh	r3, [r4, #12]
 8010ac8:	0759      	lsls	r1, r3, #29
 8010aca:	d505      	bpl.n	8010ad8 <__sflush_r+0x44>
 8010acc:	6863      	ldr	r3, [r4, #4]
 8010ace:	1ad2      	subs	r2, r2, r3
 8010ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ad2:	b10b      	cbz	r3, 8010ad8 <__sflush_r+0x44>
 8010ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ad6:	1ad2      	subs	r2, r2, r3
 8010ad8:	2300      	movs	r3, #0
 8010ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010adc:	6a21      	ldr	r1, [r4, #32]
 8010ade:	4628      	mov	r0, r5
 8010ae0:	47b0      	blx	r6
 8010ae2:	1c43      	adds	r3, r0, #1
 8010ae4:	89a3      	ldrh	r3, [r4, #12]
 8010ae6:	d106      	bne.n	8010af6 <__sflush_r+0x62>
 8010ae8:	6829      	ldr	r1, [r5, #0]
 8010aea:	291d      	cmp	r1, #29
 8010aec:	d82b      	bhi.n	8010b46 <__sflush_r+0xb2>
 8010aee:	4a2a      	ldr	r2, [pc, #168]	@ (8010b98 <__sflush_r+0x104>)
 8010af0:	410a      	asrs	r2, r1
 8010af2:	07d6      	lsls	r6, r2, #31
 8010af4:	d427      	bmi.n	8010b46 <__sflush_r+0xb2>
 8010af6:	2200      	movs	r2, #0
 8010af8:	6062      	str	r2, [r4, #4]
 8010afa:	04d9      	lsls	r1, r3, #19
 8010afc:	6922      	ldr	r2, [r4, #16]
 8010afe:	6022      	str	r2, [r4, #0]
 8010b00:	d504      	bpl.n	8010b0c <__sflush_r+0x78>
 8010b02:	1c42      	adds	r2, r0, #1
 8010b04:	d101      	bne.n	8010b0a <__sflush_r+0x76>
 8010b06:	682b      	ldr	r3, [r5, #0]
 8010b08:	b903      	cbnz	r3, 8010b0c <__sflush_r+0x78>
 8010b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b0e:	602f      	str	r7, [r5, #0]
 8010b10:	b1b9      	cbz	r1, 8010b42 <__sflush_r+0xae>
 8010b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b16:	4299      	cmp	r1, r3
 8010b18:	d002      	beq.n	8010b20 <__sflush_r+0x8c>
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f7ff f954 	bl	800fdc8 <_free_r>
 8010b20:	2300      	movs	r3, #0
 8010b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b24:	e00d      	b.n	8010b42 <__sflush_r+0xae>
 8010b26:	2301      	movs	r3, #1
 8010b28:	4628      	mov	r0, r5
 8010b2a:	47b0      	blx	r6
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	1c50      	adds	r0, r2, #1
 8010b30:	d1c9      	bne.n	8010ac6 <__sflush_r+0x32>
 8010b32:	682b      	ldr	r3, [r5, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d0c6      	beq.n	8010ac6 <__sflush_r+0x32>
 8010b38:	2b1d      	cmp	r3, #29
 8010b3a:	d001      	beq.n	8010b40 <__sflush_r+0xac>
 8010b3c:	2b16      	cmp	r3, #22
 8010b3e:	d11e      	bne.n	8010b7e <__sflush_r+0xea>
 8010b40:	602f      	str	r7, [r5, #0]
 8010b42:	2000      	movs	r0, #0
 8010b44:	e022      	b.n	8010b8c <__sflush_r+0xf8>
 8010b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b4a:	b21b      	sxth	r3, r3
 8010b4c:	e01b      	b.n	8010b86 <__sflush_r+0xf2>
 8010b4e:	690f      	ldr	r7, [r1, #16]
 8010b50:	2f00      	cmp	r7, #0
 8010b52:	d0f6      	beq.n	8010b42 <__sflush_r+0xae>
 8010b54:	0793      	lsls	r3, r2, #30
 8010b56:	680e      	ldr	r6, [r1, #0]
 8010b58:	bf08      	it	eq
 8010b5a:	694b      	ldreq	r3, [r1, #20]
 8010b5c:	600f      	str	r7, [r1, #0]
 8010b5e:	bf18      	it	ne
 8010b60:	2300      	movne	r3, #0
 8010b62:	eba6 0807 	sub.w	r8, r6, r7
 8010b66:	608b      	str	r3, [r1, #8]
 8010b68:	f1b8 0f00 	cmp.w	r8, #0
 8010b6c:	dde9      	ble.n	8010b42 <__sflush_r+0xae>
 8010b6e:	6a21      	ldr	r1, [r4, #32]
 8010b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010b72:	4643      	mov	r3, r8
 8010b74:	463a      	mov	r2, r7
 8010b76:	4628      	mov	r0, r5
 8010b78:	47b0      	blx	r6
 8010b7a:	2800      	cmp	r0, #0
 8010b7c:	dc08      	bgt.n	8010b90 <__sflush_r+0xfc>
 8010b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b86:	81a3      	strh	r3, [r4, #12]
 8010b88:	f04f 30ff 	mov.w	r0, #4294967295
 8010b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b90:	4407      	add	r7, r0
 8010b92:	eba8 0800 	sub.w	r8, r8, r0
 8010b96:	e7e7      	b.n	8010b68 <__sflush_r+0xd4>
 8010b98:	dfbffffe 	.word	0xdfbffffe

08010b9c <_fflush_r>:
 8010b9c:	b538      	push	{r3, r4, r5, lr}
 8010b9e:	690b      	ldr	r3, [r1, #16]
 8010ba0:	4605      	mov	r5, r0
 8010ba2:	460c      	mov	r4, r1
 8010ba4:	b913      	cbnz	r3, 8010bac <_fflush_r+0x10>
 8010ba6:	2500      	movs	r5, #0
 8010ba8:	4628      	mov	r0, r5
 8010baa:	bd38      	pop	{r3, r4, r5, pc}
 8010bac:	b118      	cbz	r0, 8010bb6 <_fflush_r+0x1a>
 8010bae:	6a03      	ldr	r3, [r0, #32]
 8010bb0:	b90b      	cbnz	r3, 8010bb6 <_fflush_r+0x1a>
 8010bb2:	f7fe f86b 	bl	800ec8c <__sinit>
 8010bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d0f3      	beq.n	8010ba6 <_fflush_r+0xa>
 8010bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010bc0:	07d0      	lsls	r0, r2, #31
 8010bc2:	d404      	bmi.n	8010bce <_fflush_r+0x32>
 8010bc4:	0599      	lsls	r1, r3, #22
 8010bc6:	d402      	bmi.n	8010bce <_fflush_r+0x32>
 8010bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bca:	f7fe fa9e 	bl	800f10a <__retarget_lock_acquire_recursive>
 8010bce:	4628      	mov	r0, r5
 8010bd0:	4621      	mov	r1, r4
 8010bd2:	f7ff ff5f 	bl	8010a94 <__sflush_r>
 8010bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010bd8:	07da      	lsls	r2, r3, #31
 8010bda:	4605      	mov	r5, r0
 8010bdc:	d4e4      	bmi.n	8010ba8 <_fflush_r+0xc>
 8010bde:	89a3      	ldrh	r3, [r4, #12]
 8010be0:	059b      	lsls	r3, r3, #22
 8010be2:	d4e1      	bmi.n	8010ba8 <_fflush_r+0xc>
 8010be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010be6:	f7fe fa91 	bl	800f10c <__retarget_lock_release_recursive>
 8010bea:	e7dd      	b.n	8010ba8 <_fflush_r+0xc>

08010bec <__swhatbuf_r>:
 8010bec:	b570      	push	{r4, r5, r6, lr}
 8010bee:	460c      	mov	r4, r1
 8010bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bf4:	2900      	cmp	r1, #0
 8010bf6:	b096      	sub	sp, #88	@ 0x58
 8010bf8:	4615      	mov	r5, r2
 8010bfa:	461e      	mov	r6, r3
 8010bfc:	da0d      	bge.n	8010c1a <__swhatbuf_r+0x2e>
 8010bfe:	89a3      	ldrh	r3, [r4, #12]
 8010c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010c04:	f04f 0100 	mov.w	r1, #0
 8010c08:	bf14      	ite	ne
 8010c0a:	2340      	movne	r3, #64	@ 0x40
 8010c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c10:	2000      	movs	r0, #0
 8010c12:	6031      	str	r1, [r6, #0]
 8010c14:	602b      	str	r3, [r5, #0]
 8010c16:	b016      	add	sp, #88	@ 0x58
 8010c18:	bd70      	pop	{r4, r5, r6, pc}
 8010c1a:	466a      	mov	r2, sp
 8010c1c:	f000 f862 	bl	8010ce4 <_fstat_r>
 8010c20:	2800      	cmp	r0, #0
 8010c22:	dbec      	blt.n	8010bfe <__swhatbuf_r+0x12>
 8010c24:	9901      	ldr	r1, [sp, #4]
 8010c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c2e:	4259      	negs	r1, r3
 8010c30:	4159      	adcs	r1, r3
 8010c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c36:	e7eb      	b.n	8010c10 <__swhatbuf_r+0x24>

08010c38 <__smakebuf_r>:
 8010c38:	898b      	ldrh	r3, [r1, #12]
 8010c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c3c:	079d      	lsls	r5, r3, #30
 8010c3e:	4606      	mov	r6, r0
 8010c40:	460c      	mov	r4, r1
 8010c42:	d507      	bpl.n	8010c54 <__smakebuf_r+0x1c>
 8010c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c48:	6023      	str	r3, [r4, #0]
 8010c4a:	6123      	str	r3, [r4, #16]
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	6163      	str	r3, [r4, #20]
 8010c50:	b003      	add	sp, #12
 8010c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c54:	ab01      	add	r3, sp, #4
 8010c56:	466a      	mov	r2, sp
 8010c58:	f7ff ffc8 	bl	8010bec <__swhatbuf_r>
 8010c5c:	9f00      	ldr	r7, [sp, #0]
 8010c5e:	4605      	mov	r5, r0
 8010c60:	4639      	mov	r1, r7
 8010c62:	4630      	mov	r0, r6
 8010c64:	f7fd faa2 	bl	800e1ac <_malloc_r>
 8010c68:	b948      	cbnz	r0, 8010c7e <__smakebuf_r+0x46>
 8010c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c6e:	059a      	lsls	r2, r3, #22
 8010c70:	d4ee      	bmi.n	8010c50 <__smakebuf_r+0x18>
 8010c72:	f023 0303 	bic.w	r3, r3, #3
 8010c76:	f043 0302 	orr.w	r3, r3, #2
 8010c7a:	81a3      	strh	r3, [r4, #12]
 8010c7c:	e7e2      	b.n	8010c44 <__smakebuf_r+0xc>
 8010c7e:	89a3      	ldrh	r3, [r4, #12]
 8010c80:	6020      	str	r0, [r4, #0]
 8010c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c86:	81a3      	strh	r3, [r4, #12]
 8010c88:	9b01      	ldr	r3, [sp, #4]
 8010c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c8e:	b15b      	cbz	r3, 8010ca8 <__smakebuf_r+0x70>
 8010c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c94:	4630      	mov	r0, r6
 8010c96:	f000 f837 	bl	8010d08 <_isatty_r>
 8010c9a:	b128      	cbz	r0, 8010ca8 <__smakebuf_r+0x70>
 8010c9c:	89a3      	ldrh	r3, [r4, #12]
 8010c9e:	f023 0303 	bic.w	r3, r3, #3
 8010ca2:	f043 0301 	orr.w	r3, r3, #1
 8010ca6:	81a3      	strh	r3, [r4, #12]
 8010ca8:	89a3      	ldrh	r3, [r4, #12]
 8010caa:	431d      	orrs	r5, r3
 8010cac:	81a5      	strh	r5, [r4, #12]
 8010cae:	e7cf      	b.n	8010c50 <__smakebuf_r+0x18>

08010cb0 <memmove>:
 8010cb0:	4288      	cmp	r0, r1
 8010cb2:	b510      	push	{r4, lr}
 8010cb4:	eb01 0402 	add.w	r4, r1, r2
 8010cb8:	d902      	bls.n	8010cc0 <memmove+0x10>
 8010cba:	4284      	cmp	r4, r0
 8010cbc:	4623      	mov	r3, r4
 8010cbe:	d807      	bhi.n	8010cd0 <memmove+0x20>
 8010cc0:	1e43      	subs	r3, r0, #1
 8010cc2:	42a1      	cmp	r1, r4
 8010cc4:	d008      	beq.n	8010cd8 <memmove+0x28>
 8010cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cce:	e7f8      	b.n	8010cc2 <memmove+0x12>
 8010cd0:	4402      	add	r2, r0
 8010cd2:	4601      	mov	r1, r0
 8010cd4:	428a      	cmp	r2, r1
 8010cd6:	d100      	bne.n	8010cda <memmove+0x2a>
 8010cd8:	bd10      	pop	{r4, pc}
 8010cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ce2:	e7f7      	b.n	8010cd4 <memmove+0x24>

08010ce4 <_fstat_r>:
 8010ce4:	b538      	push	{r3, r4, r5, lr}
 8010ce6:	4d07      	ldr	r5, [pc, #28]	@ (8010d04 <_fstat_r+0x20>)
 8010ce8:	2300      	movs	r3, #0
 8010cea:	4604      	mov	r4, r0
 8010cec:	4608      	mov	r0, r1
 8010cee:	4611      	mov	r1, r2
 8010cf0:	602b      	str	r3, [r5, #0]
 8010cf2:	f7f0 ff6b 	bl	8001bcc <_fstat>
 8010cf6:	1c43      	adds	r3, r0, #1
 8010cf8:	d102      	bne.n	8010d00 <_fstat_r+0x1c>
 8010cfa:	682b      	ldr	r3, [r5, #0]
 8010cfc:	b103      	cbz	r3, 8010d00 <_fstat_r+0x1c>
 8010cfe:	6023      	str	r3, [r4, #0]
 8010d00:	bd38      	pop	{r3, r4, r5, pc}
 8010d02:	bf00      	nop
 8010d04:	20000ee8 	.word	0x20000ee8

08010d08 <_isatty_r>:
 8010d08:	b538      	push	{r3, r4, r5, lr}
 8010d0a:	4d06      	ldr	r5, [pc, #24]	@ (8010d24 <_isatty_r+0x1c>)
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	4604      	mov	r4, r0
 8010d10:	4608      	mov	r0, r1
 8010d12:	602b      	str	r3, [r5, #0]
 8010d14:	f7f0 ff6a 	bl	8001bec <_isatty>
 8010d18:	1c43      	adds	r3, r0, #1
 8010d1a:	d102      	bne.n	8010d22 <_isatty_r+0x1a>
 8010d1c:	682b      	ldr	r3, [r5, #0]
 8010d1e:	b103      	cbz	r3, 8010d22 <_isatty_r+0x1a>
 8010d20:	6023      	str	r3, [r4, #0]
 8010d22:	bd38      	pop	{r3, r4, r5, pc}
 8010d24:	20000ee8 	.word	0x20000ee8

08010d28 <__assert_func>:
 8010d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d2a:	4614      	mov	r4, r2
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	4b09      	ldr	r3, [pc, #36]	@ (8010d54 <__assert_func+0x2c>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4605      	mov	r5, r0
 8010d34:	68d8      	ldr	r0, [r3, #12]
 8010d36:	b954      	cbnz	r4, 8010d4e <__assert_func+0x26>
 8010d38:	4b07      	ldr	r3, [pc, #28]	@ (8010d58 <__assert_func+0x30>)
 8010d3a:	461c      	mov	r4, r3
 8010d3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d40:	9100      	str	r1, [sp, #0]
 8010d42:	462b      	mov	r3, r5
 8010d44:	4905      	ldr	r1, [pc, #20]	@ (8010d5c <__assert_func+0x34>)
 8010d46:	f000 f86f 	bl	8010e28 <fiprintf>
 8010d4a:	f000 f87f 	bl	8010e4c <abort>
 8010d4e:	4b04      	ldr	r3, [pc, #16]	@ (8010d60 <__assert_func+0x38>)
 8010d50:	e7f4      	b.n	8010d3c <__assert_func+0x14>
 8010d52:	bf00      	nop
 8010d54:	2000003c 	.word	0x2000003c
 8010d58:	08011556 	.word	0x08011556
 8010d5c:	08011528 	.word	0x08011528
 8010d60:	0801151b 	.word	0x0801151b

08010d64 <_calloc_r>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	fba1 5402 	umull	r5, r4, r1, r2
 8010d6a:	b93c      	cbnz	r4, 8010d7c <_calloc_r+0x18>
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	f7fd fa1d 	bl	800e1ac <_malloc_r>
 8010d72:	4606      	mov	r6, r0
 8010d74:	b928      	cbnz	r0, 8010d82 <_calloc_r+0x1e>
 8010d76:	2600      	movs	r6, #0
 8010d78:	4630      	mov	r0, r6
 8010d7a:	bd70      	pop	{r4, r5, r6, pc}
 8010d7c:	220c      	movs	r2, #12
 8010d7e:	6002      	str	r2, [r0, #0]
 8010d80:	e7f9      	b.n	8010d76 <_calloc_r+0x12>
 8010d82:	462a      	mov	r2, r5
 8010d84:	4621      	mov	r1, r4
 8010d86:	f7fe f933 	bl	800eff0 <memset>
 8010d8a:	e7f5      	b.n	8010d78 <_calloc_r+0x14>

08010d8c <__ascii_mbtowc>:
 8010d8c:	b082      	sub	sp, #8
 8010d8e:	b901      	cbnz	r1, 8010d92 <__ascii_mbtowc+0x6>
 8010d90:	a901      	add	r1, sp, #4
 8010d92:	b142      	cbz	r2, 8010da6 <__ascii_mbtowc+0x1a>
 8010d94:	b14b      	cbz	r3, 8010daa <__ascii_mbtowc+0x1e>
 8010d96:	7813      	ldrb	r3, [r2, #0]
 8010d98:	600b      	str	r3, [r1, #0]
 8010d9a:	7812      	ldrb	r2, [r2, #0]
 8010d9c:	1e10      	subs	r0, r2, #0
 8010d9e:	bf18      	it	ne
 8010da0:	2001      	movne	r0, #1
 8010da2:	b002      	add	sp, #8
 8010da4:	4770      	bx	lr
 8010da6:	4610      	mov	r0, r2
 8010da8:	e7fb      	b.n	8010da2 <__ascii_mbtowc+0x16>
 8010daa:	f06f 0001 	mvn.w	r0, #1
 8010dae:	e7f8      	b.n	8010da2 <__ascii_mbtowc+0x16>

08010db0 <_realloc_r>:
 8010db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010db4:	4680      	mov	r8, r0
 8010db6:	4615      	mov	r5, r2
 8010db8:	460c      	mov	r4, r1
 8010dba:	b921      	cbnz	r1, 8010dc6 <_realloc_r+0x16>
 8010dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	f7fd b9f3 	b.w	800e1ac <_malloc_r>
 8010dc6:	b92a      	cbnz	r2, 8010dd4 <_realloc_r+0x24>
 8010dc8:	f7fe fffe 	bl	800fdc8 <_free_r>
 8010dcc:	2400      	movs	r4, #0
 8010dce:	4620      	mov	r0, r4
 8010dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd4:	f000 f841 	bl	8010e5a <_malloc_usable_size_r>
 8010dd8:	4285      	cmp	r5, r0
 8010dda:	4606      	mov	r6, r0
 8010ddc:	d802      	bhi.n	8010de4 <_realloc_r+0x34>
 8010dde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010de2:	d8f4      	bhi.n	8010dce <_realloc_r+0x1e>
 8010de4:	4629      	mov	r1, r5
 8010de6:	4640      	mov	r0, r8
 8010de8:	f7fd f9e0 	bl	800e1ac <_malloc_r>
 8010dec:	4607      	mov	r7, r0
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d0ec      	beq.n	8010dcc <_realloc_r+0x1c>
 8010df2:	42b5      	cmp	r5, r6
 8010df4:	462a      	mov	r2, r5
 8010df6:	4621      	mov	r1, r4
 8010df8:	bf28      	it	cs
 8010dfa:	4632      	movcs	r2, r6
 8010dfc:	f7fe f987 	bl	800f10e <memcpy>
 8010e00:	4621      	mov	r1, r4
 8010e02:	4640      	mov	r0, r8
 8010e04:	f7fe ffe0 	bl	800fdc8 <_free_r>
 8010e08:	463c      	mov	r4, r7
 8010e0a:	e7e0      	b.n	8010dce <_realloc_r+0x1e>

08010e0c <__ascii_wctomb>:
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4608      	mov	r0, r1
 8010e10:	b141      	cbz	r1, 8010e24 <__ascii_wctomb+0x18>
 8010e12:	2aff      	cmp	r2, #255	@ 0xff
 8010e14:	d904      	bls.n	8010e20 <__ascii_wctomb+0x14>
 8010e16:	228a      	movs	r2, #138	@ 0x8a
 8010e18:	601a      	str	r2, [r3, #0]
 8010e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e1e:	4770      	bx	lr
 8010e20:	700a      	strb	r2, [r1, #0]
 8010e22:	2001      	movs	r0, #1
 8010e24:	4770      	bx	lr
	...

08010e28 <fiprintf>:
 8010e28:	b40e      	push	{r1, r2, r3}
 8010e2a:	b503      	push	{r0, r1, lr}
 8010e2c:	4601      	mov	r1, r0
 8010e2e:	ab03      	add	r3, sp, #12
 8010e30:	4805      	ldr	r0, [pc, #20]	@ (8010e48 <fiprintf+0x20>)
 8010e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e36:	6800      	ldr	r0, [r0, #0]
 8010e38:	9301      	str	r3, [sp, #4]
 8010e3a:	f7ff fd13 	bl	8010864 <_vfiprintf_r>
 8010e3e:	b002      	add	sp, #8
 8010e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e44:	b003      	add	sp, #12
 8010e46:	4770      	bx	lr
 8010e48:	2000003c 	.word	0x2000003c

08010e4c <abort>:
 8010e4c:	b508      	push	{r3, lr}
 8010e4e:	2006      	movs	r0, #6
 8010e50:	f000 f834 	bl	8010ebc <raise>
 8010e54:	2001      	movs	r0, #1
 8010e56:	f7f0 fe69 	bl	8001b2c <_exit>

08010e5a <_malloc_usable_size_r>:
 8010e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e5e:	1f18      	subs	r0, r3, #4
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	bfbc      	itt	lt
 8010e64:	580b      	ldrlt	r3, [r1, r0]
 8010e66:	18c0      	addlt	r0, r0, r3
 8010e68:	4770      	bx	lr

08010e6a <_raise_r>:
 8010e6a:	291f      	cmp	r1, #31
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	4605      	mov	r5, r0
 8010e70:	460c      	mov	r4, r1
 8010e72:	d904      	bls.n	8010e7e <_raise_r+0x14>
 8010e74:	2316      	movs	r3, #22
 8010e76:	6003      	str	r3, [r0, #0]
 8010e78:	f04f 30ff 	mov.w	r0, #4294967295
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}
 8010e7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010e80:	b112      	cbz	r2, 8010e88 <_raise_r+0x1e>
 8010e82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e86:	b94b      	cbnz	r3, 8010e9c <_raise_r+0x32>
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f000 f831 	bl	8010ef0 <_getpid_r>
 8010e8e:	4622      	mov	r2, r4
 8010e90:	4601      	mov	r1, r0
 8010e92:	4628      	mov	r0, r5
 8010e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e98:	f000 b818 	b.w	8010ecc <_kill_r>
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d00a      	beq.n	8010eb6 <_raise_r+0x4c>
 8010ea0:	1c59      	adds	r1, r3, #1
 8010ea2:	d103      	bne.n	8010eac <_raise_r+0x42>
 8010ea4:	2316      	movs	r3, #22
 8010ea6:	6003      	str	r3, [r0, #0]
 8010ea8:	2001      	movs	r0, #1
 8010eaa:	e7e7      	b.n	8010e7c <_raise_r+0x12>
 8010eac:	2100      	movs	r1, #0
 8010eae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	4798      	blx	r3
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	e7e0      	b.n	8010e7c <_raise_r+0x12>
	...

08010ebc <raise>:
 8010ebc:	4b02      	ldr	r3, [pc, #8]	@ (8010ec8 <raise+0xc>)
 8010ebe:	4601      	mov	r1, r0
 8010ec0:	6818      	ldr	r0, [r3, #0]
 8010ec2:	f7ff bfd2 	b.w	8010e6a <_raise_r>
 8010ec6:	bf00      	nop
 8010ec8:	2000003c 	.word	0x2000003c

08010ecc <_kill_r>:
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4d07      	ldr	r5, [pc, #28]	@ (8010eec <_kill_r+0x20>)
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	4604      	mov	r4, r0
 8010ed4:	4608      	mov	r0, r1
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	602b      	str	r3, [r5, #0]
 8010eda:	f7f0 fe17 	bl	8001b0c <_kill>
 8010ede:	1c43      	adds	r3, r0, #1
 8010ee0:	d102      	bne.n	8010ee8 <_kill_r+0x1c>
 8010ee2:	682b      	ldr	r3, [r5, #0]
 8010ee4:	b103      	cbz	r3, 8010ee8 <_kill_r+0x1c>
 8010ee6:	6023      	str	r3, [r4, #0]
 8010ee8:	bd38      	pop	{r3, r4, r5, pc}
 8010eea:	bf00      	nop
 8010eec:	20000ee8 	.word	0x20000ee8

08010ef0 <_getpid_r>:
 8010ef0:	f7f0 be04 	b.w	8001afc <_getpid>

08010ef4 <sqrt>:
 8010ef4:	b538      	push	{r3, r4, r5, lr}
 8010ef6:	ed2d 8b02 	vpush	{d8}
 8010efa:	ec55 4b10 	vmov	r4, r5, d0
 8010efe:	f000 f825 	bl	8010f4c <__ieee754_sqrt>
 8010f02:	4622      	mov	r2, r4
 8010f04:	462b      	mov	r3, r5
 8010f06:	4620      	mov	r0, r4
 8010f08:	4629      	mov	r1, r5
 8010f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8010f0e:	eef0 8a60 	vmov.f32	s17, s1
 8010f12:	f7ef fe13 	bl	8000b3c <__aeabi_dcmpun>
 8010f16:	b990      	cbnz	r0, 8010f3e <sqrt+0x4a>
 8010f18:	2200      	movs	r2, #0
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	4629      	mov	r1, r5
 8010f20:	f7ef fde4 	bl	8000aec <__aeabi_dcmplt>
 8010f24:	b158      	cbz	r0, 8010f3e <sqrt+0x4a>
 8010f26:	f7fe f8c5 	bl	800f0b4 <__errno>
 8010f2a:	2321      	movs	r3, #33	@ 0x21
 8010f2c:	6003      	str	r3, [r0, #0]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	2300      	movs	r3, #0
 8010f32:	4610      	mov	r0, r2
 8010f34:	4619      	mov	r1, r3
 8010f36:	f7ef fc91 	bl	800085c <__aeabi_ddiv>
 8010f3a:	ec41 0b18 	vmov	d8, r0, r1
 8010f3e:	eeb0 0a48 	vmov.f32	s0, s16
 8010f42:	eef0 0a68 	vmov.f32	s1, s17
 8010f46:	ecbd 8b02 	vpop	{d8}
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}

08010f4c <__ieee754_sqrt>:
 8010f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f50:	4a68      	ldr	r2, [pc, #416]	@ (80110f4 <__ieee754_sqrt+0x1a8>)
 8010f52:	ec55 4b10 	vmov	r4, r5, d0
 8010f56:	43aa      	bics	r2, r5
 8010f58:	462b      	mov	r3, r5
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	d110      	bne.n	8010f80 <__ieee754_sqrt+0x34>
 8010f5e:	4622      	mov	r2, r4
 8010f60:	4620      	mov	r0, r4
 8010f62:	4629      	mov	r1, r5
 8010f64:	f7ef fb50 	bl	8000608 <__aeabi_dmul>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	4629      	mov	r1, r5
 8010f70:	f7ef f994 	bl	800029c <__adddf3>
 8010f74:	4604      	mov	r4, r0
 8010f76:	460d      	mov	r5, r1
 8010f78:	ec45 4b10 	vmov	d0, r4, r5
 8010f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f80:	2d00      	cmp	r5, #0
 8010f82:	dc0e      	bgt.n	8010fa2 <__ieee754_sqrt+0x56>
 8010f84:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010f88:	4322      	orrs	r2, r4
 8010f8a:	d0f5      	beq.n	8010f78 <__ieee754_sqrt+0x2c>
 8010f8c:	b19d      	cbz	r5, 8010fb6 <__ieee754_sqrt+0x6a>
 8010f8e:	4622      	mov	r2, r4
 8010f90:	4620      	mov	r0, r4
 8010f92:	4629      	mov	r1, r5
 8010f94:	f7ef f980 	bl	8000298 <__aeabi_dsub>
 8010f98:	4602      	mov	r2, r0
 8010f9a:	460b      	mov	r3, r1
 8010f9c:	f7ef fc5e 	bl	800085c <__aeabi_ddiv>
 8010fa0:	e7e8      	b.n	8010f74 <__ieee754_sqrt+0x28>
 8010fa2:	152a      	asrs	r2, r5, #20
 8010fa4:	d115      	bne.n	8010fd2 <__ieee754_sqrt+0x86>
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	e009      	b.n	8010fbe <__ieee754_sqrt+0x72>
 8010faa:	0acb      	lsrs	r3, r1, #11
 8010fac:	3a15      	subs	r2, #21
 8010fae:	0549      	lsls	r1, r1, #21
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d0fa      	beq.n	8010faa <__ieee754_sqrt+0x5e>
 8010fb4:	e7f7      	b.n	8010fa6 <__ieee754_sqrt+0x5a>
 8010fb6:	462a      	mov	r2, r5
 8010fb8:	e7fa      	b.n	8010fb0 <__ieee754_sqrt+0x64>
 8010fba:	005b      	lsls	r3, r3, #1
 8010fbc:	3001      	adds	r0, #1
 8010fbe:	02dc      	lsls	r4, r3, #11
 8010fc0:	d5fb      	bpl.n	8010fba <__ieee754_sqrt+0x6e>
 8010fc2:	1e44      	subs	r4, r0, #1
 8010fc4:	1b12      	subs	r2, r2, r4
 8010fc6:	f1c0 0420 	rsb	r4, r0, #32
 8010fca:	fa21 f404 	lsr.w	r4, r1, r4
 8010fce:	4323      	orrs	r3, r4
 8010fd0:	4081      	lsls	r1, r0
 8010fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fd6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010fde:	07d2      	lsls	r2, r2, #31
 8010fe0:	bf5c      	itt	pl
 8010fe2:	005b      	lslpl	r3, r3, #1
 8010fe4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010fe8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010fec:	bf58      	it	pl
 8010fee:	0049      	lslpl	r1, r1, #1
 8010ff0:	2600      	movs	r6, #0
 8010ff2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010ff6:	106d      	asrs	r5, r5, #1
 8010ff8:	0049      	lsls	r1, r1, #1
 8010ffa:	2016      	movs	r0, #22
 8010ffc:	4632      	mov	r2, r6
 8010ffe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011002:	1917      	adds	r7, r2, r4
 8011004:	429f      	cmp	r7, r3
 8011006:	bfde      	ittt	le
 8011008:	193a      	addle	r2, r7, r4
 801100a:	1bdb      	suble	r3, r3, r7
 801100c:	1936      	addle	r6, r6, r4
 801100e:	0fcf      	lsrs	r7, r1, #31
 8011010:	3801      	subs	r0, #1
 8011012:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8011016:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801101a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801101e:	d1f0      	bne.n	8011002 <__ieee754_sqrt+0xb6>
 8011020:	4604      	mov	r4, r0
 8011022:	2720      	movs	r7, #32
 8011024:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011028:	429a      	cmp	r2, r3
 801102a:	eb00 0e0c 	add.w	lr, r0, ip
 801102e:	db02      	blt.n	8011036 <__ieee754_sqrt+0xea>
 8011030:	d113      	bne.n	801105a <__ieee754_sqrt+0x10e>
 8011032:	458e      	cmp	lr, r1
 8011034:	d811      	bhi.n	801105a <__ieee754_sqrt+0x10e>
 8011036:	f1be 0f00 	cmp.w	lr, #0
 801103a:	eb0e 000c 	add.w	r0, lr, ip
 801103e:	da42      	bge.n	80110c6 <__ieee754_sqrt+0x17a>
 8011040:	2800      	cmp	r0, #0
 8011042:	db40      	blt.n	80110c6 <__ieee754_sqrt+0x17a>
 8011044:	f102 0801 	add.w	r8, r2, #1
 8011048:	1a9b      	subs	r3, r3, r2
 801104a:	458e      	cmp	lr, r1
 801104c:	bf88      	it	hi
 801104e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011052:	eba1 010e 	sub.w	r1, r1, lr
 8011056:	4464      	add	r4, ip
 8011058:	4642      	mov	r2, r8
 801105a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801105e:	3f01      	subs	r7, #1
 8011060:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011064:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011068:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801106c:	d1dc      	bne.n	8011028 <__ieee754_sqrt+0xdc>
 801106e:	4319      	orrs	r1, r3
 8011070:	d01b      	beq.n	80110aa <__ieee754_sqrt+0x15e>
 8011072:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80110f8 <__ieee754_sqrt+0x1ac>
 8011076:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80110fc <__ieee754_sqrt+0x1b0>
 801107a:	e9da 0100 	ldrd	r0, r1, [sl]
 801107e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011082:	f7ef f909 	bl	8000298 <__aeabi_dsub>
 8011086:	e9da 8900 	ldrd	r8, r9, [sl]
 801108a:	4602      	mov	r2, r0
 801108c:	460b      	mov	r3, r1
 801108e:	4640      	mov	r0, r8
 8011090:	4649      	mov	r1, r9
 8011092:	f7ef fd35 	bl	8000b00 <__aeabi_dcmple>
 8011096:	b140      	cbz	r0, 80110aa <__ieee754_sqrt+0x15e>
 8011098:	f1b4 3fff 	cmp.w	r4, #4294967295
 801109c:	e9da 0100 	ldrd	r0, r1, [sl]
 80110a0:	e9db 2300 	ldrd	r2, r3, [fp]
 80110a4:	d111      	bne.n	80110ca <__ieee754_sqrt+0x17e>
 80110a6:	3601      	adds	r6, #1
 80110a8:	463c      	mov	r4, r7
 80110aa:	1072      	asrs	r2, r6, #1
 80110ac:	0863      	lsrs	r3, r4, #1
 80110ae:	07f1      	lsls	r1, r6, #31
 80110b0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80110b4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80110b8:	bf48      	it	mi
 80110ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80110be:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80110c2:	4618      	mov	r0, r3
 80110c4:	e756      	b.n	8010f74 <__ieee754_sqrt+0x28>
 80110c6:	4690      	mov	r8, r2
 80110c8:	e7be      	b.n	8011048 <__ieee754_sqrt+0xfc>
 80110ca:	f7ef f8e7 	bl	800029c <__adddf3>
 80110ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80110d2:	4602      	mov	r2, r0
 80110d4:	460b      	mov	r3, r1
 80110d6:	4640      	mov	r0, r8
 80110d8:	4649      	mov	r1, r9
 80110da:	f7ef fd07 	bl	8000aec <__aeabi_dcmplt>
 80110de:	b120      	cbz	r0, 80110ea <__ieee754_sqrt+0x19e>
 80110e0:	1ca0      	adds	r0, r4, #2
 80110e2:	bf08      	it	eq
 80110e4:	3601      	addeq	r6, #1
 80110e6:	3402      	adds	r4, #2
 80110e8:	e7df      	b.n	80110aa <__ieee754_sqrt+0x15e>
 80110ea:	1c63      	adds	r3, r4, #1
 80110ec:	f023 0401 	bic.w	r4, r3, #1
 80110f0:	e7db      	b.n	80110aa <__ieee754_sqrt+0x15e>
 80110f2:	bf00      	nop
 80110f4:	7ff00000 	.word	0x7ff00000
 80110f8:	20000200 	.word	0x20000200
 80110fc:	200001f8 	.word	0x200001f8

08011100 <_init>:
 8011100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011102:	bf00      	nop
 8011104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011106:	bc08      	pop	{r3}
 8011108:	469e      	mov	lr, r3
 801110a:	4770      	bx	lr

0801110c <_fini>:
 801110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801110e:	bf00      	nop
 8011110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011112:	bc08      	pop	{r3}
 8011114:	469e      	mov	lr, r3
 8011116:	4770      	bx	lr
